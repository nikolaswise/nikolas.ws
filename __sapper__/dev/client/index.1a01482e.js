import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, a as validate_slots, e as element, t as text, b as space, c as claim_element, f as children, g as claim_text, h as detach_dev, j as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as noop, r as empty, q as query_selector_all, p as destroy_each } from './client.6735b514.js';
import { p as projects } from './index.1e45f033.js';

/* src/routes/projects/index.svelte generated by Svelte v3.24.0 */
const file = "src/routes/projects/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (27:0) {#each projects as project}
function create_each_block(ctx) {
	let date;
	let t0_value = /*project*/ ctx[0].meta.date + "";
	let t0;
	let t1;
	let h2;
	let a;
	let t2_value = /*project*/ ctx[0].meta.title + "";
	let t2;
	let a_href_value;
	let t3;
	let p;
	let raw_value = /*project*/ ctx[0].meta.description + "";

	const block = {
		c: function create() {
			date = element("date");
			t0 = text(t0_value);
			t1 = space();
			h2 = element("h2");
			a = element("a");
			t2 = text(t2_value);
			t3 = space();
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			date = claim_element(nodes, "DATE", { class: true });
			var date_nodes = children(date);
			t0 = claim_text(date_nodes, t0_value);
			date_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			a = claim_element(h2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, t2_value);
			a_nodes.forEach(detach_dev);
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(date, "class", "svelte-qq8s9h");
			add_location(date, file, 27, 2, 364);
			attr_dev(a, "href", a_href_value = "/projects/" + /*project*/ ctx[0].meta.slug);
			add_location(a, file, 29, 4, 408);
			attr_dev(h2, "class", "svelte-qq8s9h");
			add_location(h2, file, 28, 2, 399);
			attr_dev(p, "class", "svelte-qq8s9h");
			add_location(p, file, 33, 2, 495);
		},
		m: function mount(target, anchor) {
			insert_dev(target, date, anchor);
			append_dev(date, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, a);
			append_dev(a, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(date);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(27:0) {#each projects as project}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let each_1_anchor;
	let each_value = projects;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Projects");
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1en3a0b\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Projects");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Projects";
			add_location(h1, file, 23, 0, 312);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*projects*/ 0) {
				each_value = projects;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Projects", $$slots, []);
	$$self.$capture_state = () => ({ projects });
	return [];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment.name
		});
	}
}

export default Projects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWEwMTQ4MmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcHJvamVjdHMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCBwcm9qZWN0cyBmcm9tICcuLi8uLi9kYXRhL3Byb2plY3RzL2luZGV4Lmpzb24nXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICBcbiAgcCB7XG4gICAgbWFyZ2luLWJvdHRvbTogNXJlbTtcbiAgfVxuICBkYXRlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwcmVtO1xuICAgIGZvbnQtZmFtaWx5OiBcIklucHV0XCI7XG4gIH1cbiAgaDIge1xuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgfSAgXG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5Qcm9qZWN0czwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+UHJvamVjdHM8L2gxPlxuXG5cbnsjZWFjaCBwcm9qZWN0cyBhcyBwcm9qZWN0fSAgXG4gIDxkYXRlPntwcm9qZWN0Lm1ldGEuZGF0ZX08L2RhdGU+XG4gIDxoMj5cbiAgICA8YSBocmVmPVwiL3Byb2plY3RzL3twcm9qZWN0Lm1ldGEuc2x1Z31cIj5cbiAgICAgIHtwcm9qZWN0Lm1ldGEudGl0bGV9XG4gICAgPC9hPlxuICA8L2gyPlxuICA8cD57QGh0bWwgcHJvamVjdC5tZXRhLmRlc2NyaXB0aW9ufTwvcD5cbnsvZWFjaH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7NEJBMkJTLEdBQU8sSUFBQyxJQUFJLENBQUMsSUFBSTs7Ozs7NEJBR25CLEdBQU8sSUFBQyxJQUFJLENBQUMsS0FBSzs7Ozs7NkJBR2IsR0FBTyxJQUFDLElBQUksQ0FBQyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUVBSlosR0FBTyxJQUFDLElBQUksQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBSGxDLFFBQVE7Ozs7Z0NBQWIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUJBQUMsUUFBUTs7OzsrQkFBYixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
