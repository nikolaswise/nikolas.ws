import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as validate_slots, b as space, r as empty, q as query_selector_all, h as detach_dev, j as claim_space, m as insert_dev, o as noop, e as element, t as text, c as claim_element, f as children, g as claim_text, l as add_location, k as attr_dev, n as append_dev, u as set_data_dev, H as HtmlTag } from './client.6735b514.js';
import { p as projects } from './index.1e45f033.js';

/* src/routes/projects/[slug].svelte generated by Svelte v3.24.0 */
const file = "src/routes/projects/[slug].svelte";

// (49:0) {:else}
function create_else_block(ctx) {
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let a;
	let t3;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("404");
			t1 = space();
			p = element("p");
			t2 = text("That's not a project. ");
			a = element("a");
			t3 = text("See what is.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "404");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "That's not a project. ");
			a = claim_element(p_nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, "See what is.");
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 49, 2, 840);
			attr_dev(a, "href", "/projects");
			add_location(a, file, 50, 27, 880);
			add_location(p, file, 50, 2, 855);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
			append_dev(p, a);
			append_dev(a, t3);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(49:0) {:else}",
		ctx
	});

	return block;
}

// (31:0) {#if project}
function create_if_block(ctx) {
	let date;
	let t0_value = /*project*/ ctx[0].meta.date + "";
	let t0;
	let t1;
	let h1;
	let t2_value = /*project*/ ctx[0].meta.title + "";
	let t2;
	let t3;
	let p;
	let a;
	let t4;
	let a_href_value;
	let t5;
	let h2;
	let raw0_value = /*project*/ ctx[0].meta.description + "";
	let t6;
	let html_tag;
	let raw1_value = /*project*/ ctx[0].content + "";
	let html_anchor;

	const block = {
		c: function create() {
			date = element("date");
			t0 = text(t0_value);
			t1 = space();
			h1 = element("h1");
			t2 = text(t2_value);
			t3 = space();
			p = element("p");
			a = element("a");
			t4 = text("See Live Project");
			t5 = space();
			h2 = element("h2");
			t6 = space();
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			date = claim_element(nodes, "DATE", { class: true });
			var date_nodes = children(date);
			t0 = claim_text(date_nodes, t0_value);
			date_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, "See Live Project");
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			h2_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(date, "class", "svelte-11onoba");
			add_location(date, file, 31, 2, 599);
			add_location(h1, file, 34, 2, 642);
			attr_dev(a, "href", a_href_value = /*project*/ ctx[0].meta.site);
			add_location(a, file, 39, 4, 691);
			add_location(p, file, 38, 2, 683);
			attr_dev(h2, "class", "svelte-11onoba");
			add_location(h2, file, 42, 2, 752);
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			insert_dev(target, date, anchor);
			append_dev(date, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, h2, anchor);
			h2.innerHTML = raw0_value;
			insert_dev(target, t6, anchor);
			html_tag.m(raw1_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*project*/ 1 && t0_value !== (t0_value = /*project*/ ctx[0].meta.date + "")) set_data_dev(t0, t0_value);
			if (dirty & /*project*/ 1 && t2_value !== (t2_value = /*project*/ ctx[0].meta.title + "")) set_data_dev(t2, t2_value);

			if (dirty & /*project*/ 1 && a_href_value !== (a_href_value = /*project*/ ctx[0].meta.site)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*project*/ 1 && raw0_value !== (raw0_value = /*project*/ ctx[0].meta.description + "")) h2.innerHTML = raw0_value;			if (dirty & /*project*/ 1 && raw1_value !== (raw1_value = /*project*/ ctx[0].content + "")) html_tag.p(raw1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(date);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(31:0) {#if project}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t;
	let if_block_anchor;
	document.title = title_value = /*title*/ ctx[1];

	function select_block_type(ctx, dirty) {
		if (/*project*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1258swp\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 2 && title_value !== (title_value = /*title*/ ctx[1])) {
				document.title = title_value;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	let slug = params.slug;
	let project = projects.find(proj => proj.meta.slug == slug);
	return { project };
}

function instance($$self, $$props, $$invalidate) {
	let { project } = $$props;

	let title = { project }
	? `nikolas.ws: ${project.meta.title}`
	: "Project not found.";

	const writable_props = ["project"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("project" in $$props) $$invalidate(0, project = $$props.project);
	};

	$$self.$capture_state = () => ({ projects, preload, project, title });

	$$self.$inject_state = $$props => {
		if ("project" in $$props) $$invalidate(0, project = $$props.project);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [project, title];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { project: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*project*/ ctx[0] === undefined && !("project" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'project'");
		}
	}

	get project() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set project(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjU2MDRmMjZiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3Byb2plY3RzL1tzbHVnXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGltcG9ydCBwcm9qZWN0cyBmcm9tICcuLi8uLi9kYXRhL3Byb2plY3RzL2luZGV4Lmpzb24nXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zIH0pIHtcbiAgICBsZXQgc2x1ZyA9IHBhcmFtcy5zbHVnO1xuICAgIGxldCBwcm9qZWN0ID0gcHJvamVjdHMuZmluZChwcm9qID0+IHByb2oubWV0YS5zbHVnID09IHNsdWcpXG4gICAgcmV0dXJuIHtwcm9qZWN0fVxuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBwcm9qZWN0XG4gIGxldCB0aXRsZSA9IHtwcm9qZWN0fSA/IGBuaWtvbGFzLndzOiAke3Byb2plY3QubWV0YS50aXRsZX1gIDogJ1Byb2plY3Qgbm90IGZvdW5kLidcbjwvc2NyaXB0PlxuXG5cbjxzdHlsZT5cbiAgZGF0ZSB7XG4gICAgZm9udC1mYW1pbHk6ICdJbnB1dCc7XG4gIH1cbiAgaDIge1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tcy0xOCk7XG4gIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxueyNpZiBwcm9qZWN0fVxuICA8ZGF0ZT5cbiAgICB7cHJvamVjdC5tZXRhLmRhdGV9XG4gIDwvZGF0ZT5cbiAgPGgxPlxuICAgIHtwcm9qZWN0Lm1ldGEudGl0bGV9XG4gIDwvaDE+XG5cbiAgPHA+XG4gICAgPGEgaHJlZj1cIntwcm9qZWN0Lm1ldGEuc2l0ZX1cIj5TZWUgTGl2ZSBQcm9qZWN0PC9hPlxuICA8L3A+XG5cbiAgPGgyPlxuICAgIHtAaHRtbCBwcm9qZWN0Lm1ldGEuZGVzY3JpcHRpb259XG4gIDwvaDI+XG5cblxuICB7QGh0bWwgcHJvamVjdC5jb250ZW50fVxuezplbHNlfVxuICA8aDE+NDA0PC9oMT5cbiAgPHA+VGhhdCdzIG5vdCBhIHByb2plY3QuIDxhIGhyZWY9XCIvcHJvamVjdHNcIj5TZWUgd2hhdCBpcy48L2E+PC9wPlxuey9pZn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBZ0NLLEdBQU8sSUFBQyxJQUFJLENBQUMsSUFBSTs7Ozs0QkFHakIsR0FBTyxJQUFDLElBQUksQ0FBQyxLQUFLOzs7Ozs7Ozs7OEJBUVosR0FBTyxJQUFDLElBQUksQ0FBQyxXQUFXOzs7OEJBSTFCLEdBQU8sSUFBQyxPQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREFSVixHQUFPLElBQUMsSUFBSSxDQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUVBUDFCLEdBQU8sSUFBQyxJQUFJLENBQUMsSUFBSTtxRUFHakIsR0FBTyxJQUFDLElBQUksQ0FBQyxLQUFLOzs2RUFJVCxHQUFPLElBQUMsSUFBSSxDQUFDLElBQUk7Ozs7eUVBSXBCLEdBQU8sSUFBQyxJQUFJLENBQUMsV0FBVywyR0FJMUIsR0FBTyxJQUFDLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MENBcEJkLEdBQUs7OztrQkFHVixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RUFIRixHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUF6QlMsT0FBTyxHQUFHLE1BQU07S0FDaEMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJO0tBQ2xCLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJO1VBQ2xELE9BQU87Ozs7T0FLTixPQUFPOztLQUNkLEtBQUssS0FBSSxPQUFPO2tCQUFtQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUs7R0FBSyxvQkFBb0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
