{"meta":{"title":"Fun With JSON-LD","slug":"fun-with-json-ld","description":"<p>Learning about JSON-LD is all about and why we should.</p>\n","date":"2020.08.25","collection":"texts","timestamp":1598338800000},"content":"<p>Working with <a href=\"https://www.adamriemer.me/\">Adam Riemer</a> on SmugMug’s <span class=\"small-caps\">SEO</span> has been a re­ally il­lu­mi­nat­ing ex­pe­ri­ence. <span class=\"small-caps\">SEO</span> con­sult­ing has al­ways been ﬂagged in my mind as<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Snake Oil Business”, but Adam re­ally is the best in the ﬁeld. Almost all of his <span class=\"small-caps\">SEO</span> sug­ges­tions fo­cus on per­for­mance and ac­ces­si­bil­ity, and he has some clear, hard met­rics to de­ﬁne<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>good”. This squares with my fun­da­men­tal un­der­stand­ing of good <span class=\"small-caps\">SEO</span> prac­tices, and has broad­ened my hori­zons and un­der­stand­ing of of the prac­tice.</p>\n<p>Something that Adam in­tro­duced me to is JSON-LD&thinsp;&mdash;&thinsp;a way of cre­at­ing struc­tured meta­data for pages that’s more ex­plicit that mi­cro­data for­mats. Here’s what I’ve learned about JSON-LD so far.</p>\n<p>JSON-LD is Google’s pre­ferred for­mat for ac­cu­rately and suc­cinctly struc­tur­ing meta­data for pages. This gives them in­sight into what’s on your page and why, and they use The Algorithm to in­ter­act and con­sume this data. Using their stan­dards gives you the <em>op­por­tu­nity</em> to get top, fancy search re­sults but there’s no guar­an­tee of that. The best thing to do is to use your struc­tured data to give the best, more ac­cu­rate, and com­plete pic­ture of what con­tent your page has for your au­di­ence. Trying to game <span class=\"small-caps\">SEO</span> here is prob­a­bly go­ing to back­ﬁre, just de­scribe things as they are as clearly as pos­si­ble.</p>\n<p>The pri­mary <em>pur­pose</em> of struc­tured data is to cre­ate a ma­chine-read­able and al­go­rithm friendly meta­data for your con­tent. This al­lows the con­tent to be con­sumed by the crawlers and the ro­bots, and join in the mesh of con­tent that Google ex­poses to users when they per­form searches or ask ques­tions of it.</p>\n<p>Clearly this is a dou­ble-edged propo­si­tion. By us­ing struc­tured data you’re ex­plic­itly buy­ing in to the ecosys­tem that Google is cre­at­ing, and al­low­ing your con­tent to be trawled and used and un­der­stood how­ever they want. You un­doubtable end up pro­vid­ing value to Google in ex­cess to what they are pro­vid­ing to you. Not to men­tion par­tic­i­pat­ing in the pro­ject of mak­ing the world ma­chine-read­able, which has it’s own philo­soph­i­cal freight.</p>\n<p><a href=\"https://schema.org/\">Schema.org</a> has a lot of data types that might be ap­pro­pri­ate for your pro­ject: Articles, Books, Breadcrumbs, Carousel, Course, Critic Review, Dataset, Event, How-to, Local Business, Movie, Podcast, Product, Software App, and Video are all ones that look in­ter­est­ing to me.</p>\n<p>For some­thing like this site, we’re us­ing pretty much en­tirely <code>Website</code> and <code>Article</code>&thinsp;&mdash;&thinsp;and con­nect them with a <code>CollectionPage</code> and a <code>Person</code> who is me! Maybe some of the art will be a <code>CreativeWork</code>.</p>\n<p>Some in­for­ma­tion on these types:</p>\n<ul>\n<li>Article: <a href=\"https://schema.org/Article\">https://​schema.org/​Ar­ti­cle</a></li>\n<li>Person: <a href=\"https://schema.org/Person\">https://​schema.org/​Per­son</a></li>\n<li>Collection Page: <a href=\"https://schema.org/CollectionPage\">https://​schema.org/​Col­lec­tion­Page</a></li>\n<li>Creative Work: <a href=\"https://schema.org/CreativeWork\">https://​schema.org/​Cre­ative­Work</a></li>\n<li>Web Site: <a href=\"https://schema.org/WebSite\">https://​schema.org/​Web­Site</a></li>\n</ul>\n<p>Lets work through <a href=\"https://developers.google.com/search/docs/data-types/article\">Google’s ex­am­ple of an ar­ti­cle</a>, maybe for this ar­ti­cle!</p>\n<p>Here’s the <code>script</code> tag that is home to our struc­tured data:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span>\n…\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>We ﬁll it with a <span class=\"small-caps\">JSON</span> ob­ject that de­scribes our data struc­ture:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>\n}\n</code></pre>\n<p>The <code>@context</code> key clues the ro­bot in to the data de­f­i­n­i­tion we’re go­ing to be us­ing, which is the <code>schema.org</code> de­f­i­n­i­tions. The <code>@type</code> tag as­so­ci­ates the fol­low­ing data with the pre-de­ﬁned struc­ture. From there on it’s rel­e­vant data! <code>headline</code>, <code>datePublished</code> and <code>dateModified</code> are all di­rectly pulled from the con­tent it­self. In out case our data looks like this:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Fun With JSON-LD&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>\n}\n</code></pre>\n<p>Open ques­tion: <code>BlogPosting</code> or <code>Article</code>? Im go­ing to stick with <code>BlogPosting</code> since these texts are re­ally just that. I would use <code>Article</code> if I was writ­ing a news piece or a re­view, or some­thing maybe more schol­arly.</p>\n<p>The last re­quired ﬁeld is an <code>image</code>:</p>\n<blockquote>\n<p>For best re­sults, pro­vide mul­ti­ple high-res­o­lu­tion im­ages (minimum of 300,000 pix­els when mul­ti­ply­ing width and height) with the fol­low­ing as­pect ra­tios: 16x9, 4x3, and 1x1.</p>\n</blockquote>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n  ]\n}\n</code></pre>\n<p>This means that cre­at­ing thumb­nails for every Article is im­por­tant, and those im­ages need to ex­ist on the page in a way that user can see.</p>\n<p>For this site, the main use of these im­ages is go­ing to be for shar­ing thumb­nails. The fact that the im­age needs to be on the pages is in­ter­est­ing, since that re­ally in­ﬂu­ences the de­sign of the page. I’ve found that cre­at­ing the ne­ces­sity for a promi­nent thumb­nail or hero im­age that ac­com­pa­nies each ar­ti­cle is a recipe for a) not writ­ing ar­ti­cles and b) bland stock pho­tog­ra­phy. I want to avoid both. That means for this site I’m go­ing to do il­lus­trated im­ages, small sketches and mo­tif ex­plo­rations that may or may not il­lus­trate the ar­ti­cle, and at­tach it to the <em>bot­tom</em> of the ar­ti­cle.</p>\n<p>There are two other sec­tions I want to look at, even though they are not re­quire­ments ac­cord­ing to Google. These are the <code>author</code> and the <code>publisher</code> ﬁelds. The goal of us­ing these ﬁelds is to cre­ate an as­so­ci­a­tion be­tween you and your work; or in the case of the <code>publisher</code> ﬁeld be­tween an im­print en­tity and the cre­ative works they’ve pub­lished. In our use case for this site, my goal is to cre­ate a ma­chine-read­able en­tity that is<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>Nikolas Wise’ and at­tach my ar­ti­cles and my work to that, in or­der to cre­ate a co­her­ent en­tity that is ex­posed to the broader web.</p>\n<p>The <code>author</code> ﬁeld is a <code>Person</code> or an <code>Organization</code>, the <code>publisher</code> ﬁeld is an <code>Organization</code>. Lets start with <code>Person</code>:</p>\n<blockquote>\n<p>A per­son (alive, dead, un­dead, or ﬁc­tional).\n<a href=\"https://schema.org/Person\">https://​schema.org/​Per­son</a></p>\n</blockquote>\n<p>It gets added to our LSON-LD like this:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t  …\n  }\n}\n</code></pre>\n<p>There are a lot of prop­er­ties in this schema, like <code>deathPlace</code> and <code>knows</code>. One could re­ally get into this and make it a very ro­bust and com­plete data ob­ject, but I’m not sure how much value that would bring at the end of the day. There’s a ﬁne line be­tween fol­low­ing specs and best prac­tices to achieve a goal and tick­ing boxes to struc­ture our lives solely in or­der to make them leg­i­ble to the al­go­rithm. I guess we each de­cide where that line is for our­selves.</p>\n<p>For me, I’m go­ing to stick with <code>name</code>, <code>url</code>, <code>image</code>, <code>jobTitle</code>, <code>knowsLanguage</code>, and <code>sameAs</code>. Although <code>publishingPrinciples</code> seems in­ter­est­ing, and I might write one of those.</p>\n<p>Most of the ﬁelds are sim­ple text strings, and can get ﬁlled out like so:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: …,\n  }\n}\n</code></pre>\n<p>The lan­guage codes are from the <a href=\"https://tools.ietf.org/html/bcp47\">lan­guage code spec</a>, and could also be <a href=\"https://schema.org/Language\">lan­guage</a> schema ob­jects. The job ti­tle could be a <a href=\"https://schema.org/DefinedTerm\">Deﬁned Term</a> schema ob­ject.</p>\n<p>The <code>sameAs</code> key is an in­ter­est­ing one, it’s ei­ther a <span class=\"small-caps\">URL</span> or an ar­ray of URLs that con­nect this <code>@person</code> with other parts of the web that are <em>also</em> that <code>@person</code>.</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;@person&quot;</span>: {\n\t  …\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t],\n  }\n}\n</code></pre>\n<p>This will con­nect<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>me” with this site and my twit­ter, github, in­sta­gram, and linkedin pro­ﬁles. Those are the pages that I want to the al­go­rithm to as­so­ci­ate with<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>me”.</p>\n<p><code>@organization</code> is sim­i­lar to <code>@person</code> in a lot of ways, and the fun­da­men­tal idea is the same. The goal is to cre­ate a sin­gle en­tity that the al­go­rithm can con­nect dis­parate pages and items too. I’m not go­ing to set of an <code>@organization</code> here, but the the <a href=\"https://schema.org/Organization\"><code>@organization</code> schema type</a> has the spec for the ob­ject.</p>\n<p>So that’s it! That means the en­tire JSON-LD for this ar­ti­cle&thinsp;&mdash;&thinsp;and there­for the rest of the texts as well, looks like this:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span><span class=\"javascript\">\n\t{\n\t  <span class=\"hljs-string\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n\t  ],\n\t  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t\t],\n\t  }\n\t}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n"}