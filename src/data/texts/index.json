[{"meta":{"title":"Headless CMS; A Brief Introduction","description":"<p>What <em>is</em> a Headless CMS, and how can it be useful for building websites and apps?</p>\n","date":"2021.05.28","slug":"headless-cms-introduction","collection":"texts","timestamp":1622185200000},"content":"<p>A Content Management System is a central aspect of any web project - even projects where you would never think of as &quot;having&quot; or &quot;using&quot; a CMS. In these sorts of projects the content management system <em>is</em> the codebase, and the strategy for managing content is identical to the process for managing code. This, obviously, is not ideal for anyone who wants to edit content and not code, or in uncomfortable in the workflows that developers rely on for our day-to-day practice — like Git. The other end of the spectrum of CMS is something like Squarespace — the code is the content. Not ideal if you want to edit code and not content. A traditional CMS like Wordpress attempts to split the difference; the CMS controls the code and the content, but makes an attempt to keep them at least a little independant by storage content in a database and providing an admin interface for editing and authoring that content.</p>\n<p>All of the above approach the problem of content management with the same set of assumptions: the CMS is responsible for taking the content, combining it with the code, and assembling and delivering the entire website. Both parts are coupled together, with the CMS rendering the &quot;head&quot; of the website or app.</p>\n<p>In the past few years with rise of build-time generated and static sites, a new approach to this problem has been articulated and built by a number of companies. The basic idea underlying this new approach is that the CMS should only be in charge of content, and interacted with like any other API. This decouples the code from the content, and removes the CMS from any responsibility of interacting with the code at all. This style of CMS does not render anything out to the web, and is thus called a headless CMS. In short, a headless CMS has no website out of the box. This means there is not a default theme (there are no themes!) to configure, there is no classic &quot;blog&quot; visuals or interfaces to configure and map too content. A blog is just one of many things a headless CMS can be used for.</p>\n<p>A headless CMS has a number of advantages: the first among them is that the product in charge of managing content can focus solely on managing content, and be very, very good at authoring, creating, and editing without needing to also be a good tool for building web apps with. The second biggest advantage is it provides the development team with complete freedom to meet the real-world business use cases associated with the project without relying on the CMS to support those use cases.</p>\n<p>Search Engine Optimization is an excellent example of these two characteristics at work – we are completely free to implement any SEO improvements without any support from the CMS, because the CMS doesn't do anything but manage content. SEO tags and page metadata can become content like any other content, and the codebase of the web app is responsible for rendering the actual website as it goes over the wire and gets consumed by browsers. Instead of relying on Wordpress Plugins or trusting that Squarespace is following best practices, all of the implementation details over your SEO strategy is completely in your teams control — just like any project <em>without</em> a CMS integration — while the content itself is entirely in your strategy or marketing teams control.</p>\n<p>A Headless CMS exposes content via an API, and that's all it does.</p>\n<p>Contentful provides a set of client libraries that allow content to be consumed in a developers language of choice, meaning that the technologies or systems used to render your app can be selected by any set of criteria at hand, rather than being forced into a decision by the CMS – if you use Wordpress you're writing your app in PHP within Wordpress. With Contentful you can <a href=\"https://github.com/contentful-labs/contentful-go\">write your app in Go</a> if you want and live your best life.</p>\n<p>Below is a quick overview of using the Contentful JavaScript SDK to access content in the Headless CMS. It returns JSON and can be used at run-time or build-time to add content to a website or app:</p>\n<pre><code><span class=\"hljs-keyword\">const</span> contentful = require(&#x27;contentful&#x27;)\n\n<span class=\"hljs-keyword\">const</span> client = contentful.createClient({\n  space: <span class=\"hljs-variable\">&lt;space-id&gt;</span>,\n  accessToken: <span class=\"hljs-variable\">&lt;access-token&gt;</span>,\n  host: <span class=\"hljs-variable\">&lt;host&gt;</span>\n})\n</code></pre>\n<p>The <code>client</code> provides a set of methods for interacting and querying the content database;</p>\n<pre><code> getSpace: <span class=\"hljs-keyword\">async</span> ƒ getSpace(),\n  getContentType: <span class=\"hljs-keyword\">async</span> ƒ getContentType(),\n  getContentTypes: <span class=\"hljs-keyword\">async</span> ƒ getContentTypes(),\n  getEntry: <span class=\"hljs-keyword\">async</span> ƒ getEntry(),\n  getEntries: <span class=\"hljs-keyword\">async</span> ƒ getEntries(),\n  getAsset: <span class=\"hljs-keyword\">async</span> ƒ getAsset(),\n  getAssets: <span class=\"hljs-keyword\">async</span> ƒ getAssets(),\n  createAssetKey: <span class=\"hljs-keyword\">async</span> ƒ createAssetKey(),\n  getLocales: <span class=\"hljs-keyword\">async</span> ƒ getLocales(),\n  parseEntries: ƒ parseEntries(),\n  <span class=\"hljs-keyword\">sync</span>: <span class=\"hljs-keyword\">async</span> ƒ <span class=\"hljs-keyword\">sync</span>()\n</code></pre>\n<p>You can use the <code>getEntries</code> function to get all the entries available:</p>\n<pre><code>client<span class=\"hljs-selector-class\">.getEntries</span>()\n  <span class=\"hljs-selector-class\">.then</span>(entries =&gt; {\n    console<span class=\"hljs-selector-class\">.log</span>(entries)\n  })\n</code></pre>\n<p>Or query on metadata or content:</p>\n<pre><code>  client<span class=\"hljs-selector-class\">.getEntries</span>({\n    content_type: <span class=\"hljs-string\">&#x27;lesson&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;fields.slug[in]&#x27;</span>: <span class=\"hljs-string\">&#x27;content-management&#x27;</span>\n  })<span class=\"hljs-selector-class\">.then</span>(entries =&gt; {\n    console<span class=\"hljs-selector-class\">.log</span>(entries)\n  })\n</code></pre>\n<p>Contentful in particular is interesting because one of the fields you can add to your entries is a reference <em>to other entries</em>. This gives the information architecture model some pretty amazing abilities to structure and enable pretty much any sort of content strategy you want to build. Some simple key-value pairs for getting strings to complicated, nested, conditional data structures.</p>\n<p>And from the code's perspective, it's all just JSON!</p>\n<p>For an example of how one can write components that consume this general API data, I've put together a small sample of how to create a component that's defined by JSON structures, and how handling different configuration keys alongside content strings can create a powerful way to integrate with a Headless CMS like Contentful. Check out the <a href=\"https://component-doc-sample.glitch.me/\">demo on Glitch</a>.</p>\n"},{"meta":{"title":"Towards an Ethical Web Development","description":"<p>Thinking about what it means for an industry to determine a moral standard of practice.</p>\n","date":"2020.09.01","slug":"an-ethical-web-development","collection":"texts","timestamp":1598943600000},"content":"<p>Since the beginning of this summer, with everything that’s descending upon us with Covid-19 and the Black Lives Matter uprising, it feels like we are living through a moment of moral accounting. In Portland, antifa is in the street in running battles with secret police, exploited workers are speaking up about the realities of our treasured restaurant industry, business owners are shutting down and pulling a disappearing act instead of facing accountability for their behavior. This has me thinking about <em>my</em> industry, which we all know has massive problems around racism, techno-fascism, and robber-baron level exploitation. We’re still dealing with people who read <em>Snow Crash</em> and <em>Neuromancer</em> and think those books were descriptions of Utopias.</p>\n<p>There are a lot of people doing hard work right now to address these issues in the industry, working to identify how we can — as businesses — move toward a more just system of working, how we need to avoid baking our prejudices in to the AIs we build, and how the physical underpinning of the internet is built on an exploitative and extractive logic of global capital. This is all good and necessary work. It makes me think though, about if there are distinctions between the craft and practice of web development and the business logic and drive the industry. The industry vs the practice - as in the technical skill of painting vs the economic system of patronage. Clearly they are related, and clearly our conception of painting has always been tied to the economic structures that make it a reality as a profession, but is there a way to think about an Ethical Web Development? It would be tied to running an ethical business, and necessarily need to be supporting by an ethical economic system, but how could we articulate what it would look like the perform the craft and practice of web development ethically? What would an antiracist and antifascist web development practice look like?s</p>\n<p>Recently we were visiting my parents in Corvallis, and as it happens my moms partner is <a href=\"https://www.michaelpnelson.com/biography\">Michal Nelson</a> - a moral philosopher who specializes in ecological and environmental ethics. So I asked him if there were any frameworks for determining if a given industry (his discipline focuses on forestry and resource management for example) was acting “ethically”. How does an industry set its own standard of ethical behavior? He explained that acting “ethically” is essentially just staying internally consistent to a set of values that you’ve articulated — and in this way being “ethical” or “sustainable” doesn’t inherently hold any value. Many people or entities agree on the importance of acting ethically, but their baseline for what the core concepts actually mean, what they are talking about when they mean “harm” for example can vary wildly.</p>\n<p>An ethical framework is a tool to reduce the possibility space - to help determine what choices available should be taken rather than could be taken. It creates a heuristic for determining which actions will cultivate an environment that supports a set of desired values. Determining ethical considerations becomes a design problem — what values do we want to see in the world? What outcomes do we want and why? Who are we considering, who are we not considering? What are the edges and the limitations beyond which we decide not to concern ourselves?</p>\n<p>There are many ethics available to work from, and conflating a single ethic with the entire range of possible ethics can be a problem. If we assume that a utilitarian, individualist ethic is the <em>only</em> possible ethic we can work with (cough cough economics cough cough) it will necessarily preclude a whole range of outcomes that just aren’t possible to arrive at from those starting conditions. Another ethic based on compassion, animism, and collectivism would start with wildly different axioms and naturally arrive at different outcomes. This debate and tension is at play <em>today</em> among the people who study and try and outline what a sustainable future of forest management is - it’s an ongoing conversation (argument?) between people who don’t share the same basic axioms around what they are trying to talk about.</p>\n<p>Perhaps the core of any ethic is “harm reduction”. We can see this in the Hippocratic oath and the medical ethic — first do no harm. The issue is that “harm” is not a natural, discoverable property of the natural world. Harm is necessarily framed as a value judgment, the corollary to the idea of &quot;good in the expanded field&quot;. We can outline the structural requirements and definitions of harm, and use those value judgments to identify harm in the world, but it’s still a human judgement system being used to sort and order the world. The medical world to illustrate this, we can look at the contemporary prerogative of “informed consent”. We now define lack agency over medical decisions as a harm done to an individual. This has not always been the case.</p>\n<p>This starts to get at the ecological connections between the craft and the business and web development - we can easily frame accessibility as a fundamental requirement of an ethical web development practice in that it reduces the harm of excluding individuals from our work. But we can arrive at that principle from the logic of many different ethics, some of which could be wildly contradictory. From a utilitarian, efficiency and profit maximizing ethic, creating accessible web apps is ethical because not doing so would be to leave money on the table. From a humanistic and compassionate ethic, it’s accessible because it fosters inclusion and equity. So we see accessibility and a clearly defined ethical practice, but that doesn’t mean that we all agree on <em>why</em> accessibility is ethical.</p>\n<p>I think in order for us to define what we mean when we try and define how our industry can be ethical, we need to work through a few steps:</p>\n<ol>\n<li>What values do we want to encourage and foster in the environment?</li>\n<li>Where do we draw the distinction between things we are concerned with and things we are not?</li>\n<li>How do we determine who is effected by our ethic and who is not?</li>\n<li>How do we then define the rules for determine which actions we should take and which actions we should not take?</li>\n</ol>\n<p>If, as an industry and as individuals, we can have these conversations then we can start to come to terms with what it means to work every day in a world where we are actively supporting and enriching the worlds first trillionaire. Is an ethical web development one where we must boycott AWS? How do we feel about data centers in general? What about ISPs, what about underwater cables?</p>\n<p><a href=\"https://www.eater.com/21398969/future-co-op-worker-owned-restaurants-ethical-business\">Jaya Saxena's recent piece in Eater</a> clearly identifies the problems associated with acting ethically as an individual — or even an industry — while remaining a part of a society that systemically undermines that ethic through structural design.</p>\n<blockquote>\n<p>Building an equitable restaurant, a place where all workers are paid fairly, have benefits, and can work in an anti-discriminatory environment, is going to take a near-undoing of the way most restaurants are run.</p>\n</blockquote>\n<p>Saxena examines some current models for employee-owned and cooperative businesses, and privately owned business that actively choose equality and community over profit. She identifies that is a compromise in these enterprises, and sums up the system issues at hand by concussing that &quot;… when it comes to restaurants, it’s hard to change one thing unless you’re changing everything.&quot;</p>\n<p>There are systemic forces at work that prevent any individual, or even any small community from truly reaching a place of ethical behavior. This makes me think that there has to be a split between &quot;acting ethically&quot; and &quot;being ethical&quot;. We can all act ethically, working our way upstream against the system forces arrayed against us, but that's no guarantee that we will, at the end of the day, be ethical.</p>\n<p>The essay identifies one restaurant and farm that solves their ethical crisis by charing $195 per person per meal, and frames that as a choice that <em>consumers</em> get to make. This is striking. We live in a time of unprecedented efficiency, unbelievable abundance, and massive wealth but if a <em>restaurant</em> is called to truly account for its exploitation to charge its true price, it's immediately untenable. This feels like it must be true across many industries – Uber would rather cease service in California than treat it's drivers like employees. What would it take to truly understand what the network of costs, values, debts, and the real price of things?</p>\n<p>Would an ethical web development be able to account for that cost and still be able to be a business in our society? During my early courses in fine art printmaking at University, I was taught that a blank sheet of paper had value on its own. Not only the price attached to it (steep, for nice paper) but also the work and craft that went in to making it. One had to be sure that the image we we're impressing on the blank sheet of paper added value to it that than reduced it. Our work had to be more valuable than the paper, and if it wasn't we didn't make it.</p>\n<p><a href=\"http://lifewinning.com/tag/writes/\">Ingrid Burrington</a> has written extensively about the physical realities of the internet, and what it means to turn the raw stuff of the earth into the objects we need to make computers. She's even turned computers back into <a href=\"https://twitter.com/lifewinning/status/1049653649562132482\">raw stuff</a>. It's hard to confront the reality of an open pit lithium mine and conclude that needs must for better batteries.</p>\n<p>Can web development be ethical? Maybe not. But that doesn't mean that we don't have an obligation to act ethically. If we can articulate the ethic we want to have in our industry, and stay internally consistent to those principles in an effort to manifest values we want in the world, maybe that's enough. Or a start anyway.</p>\n"},{"meta":{"title":"Fun With JSON-LD","slug":"fun-with-json-ld","description":"<p>Learning about JSON-LD is all about and why we should.</p>\n","date":"2020.08.25","collection":"texts","timestamp":1598338800000},"content":"<p>Working with <a href=\"https://www.adamriemer.me/\">Adam Riemer</a> on SmugMug's SEO has been a really illuminating experience. SEO consulting has always been flagged in my mind as &quot;Snake Oil Business&quot;, but Adam really is the best in the field. Almost all of his SEO suggestions focus on performance and accessibility, and he has some clear, hard metrics to define &quot;good&quot;. This squares with my fundamental understanding of good SEO practices, and has broadened my horizons and understanding of of the practice.</p>\n<p>Something that Adam introduced me to is JSON-LD – a way of creating structured metadata for pages that's more explicit that microdata formats. Here's what I've learned about JSON-LD so far.</p>\n<p>JSON-LD is Google's preferred format for accurately and succinctly structuring metadata for pages. This gives them insight into what's on your page and why, and they use The Algorithm to interact and consume this data. Using their standards gives you the <em>opportunity</em> to get top, fancy search results but there's no guarantee of that. The best thing to do is to use your structured data to give the best, more accurate, and complete picture of what content your page has for your audience. Trying to game SEO here is probably going to backfire, just describe things as they are as clearly as possible.</p>\n<p>The primary <em>purpose</em> of structured data is to create a machine-readable and algorithm friendly metadata for your content. This allows the content to be consumed by the crawlers and the robots, and join in the mesh of content that Google exposes to users when they perform searches or ask questions of it.</p>\n<p>Clearly this is a double-edged proposition. By using structured data you're explicitly buying in to the ecosystem that Google is creating, and allowing your content to be trawled and used and understood however they want. You undoubtable end up providing value to Google in excess to what they are providing to you. Not to mention participating in the project of making the world machine-readable, which has it's own philosophical freight.</p>\n<p><a href=\"https://schema.org/\">Schema.org</a> has a lot of data types that might be appropriate for your project: Articles, Books, Breadcrumbs, Carousel, Course, Critic Review, Dataset, Event, How-to, Local Business, Movie, Podcast, Product, Software App, and Video are all ones that look interesting to me.</p>\n<p>For something like this site, we're using pretty much entirely <code>Website</code> and <code>Article</code> – and connect them with a <code>CollectionPage</code> and a <code>Person</code> who is me! Maybe some of the art will be a <code>CreativeWork</code>.</p>\n<p>Some information on these types:</p>\n<ul>\n<li>Article: <a href=\"https://schema.org/Article\">https://schema.org/Article</a></li>\n<li>Person: <a href=\"https://schema.org/Person\">https://schema.org/Person</a></li>\n<li>Collection Page: <a href=\"https://schema.org/CollectionPage\">https://schema.org/CollectionPage</a></li>\n<li>Creative Work: <a href=\"https://schema.org/CreativeWork\">https://schema.org/CreativeWork</a></li>\n<li>Web Site: <a href=\"https://schema.org/WebSite\">https://schema.org/WebSite</a></li>\n</ul>\n<p>Lets work through <a href=\"https://developers.google.com/search/docs/data-types/article\">Google's example of an article</a>, maybe for this article!</p>\n<p>Here's the <code>script</code> tag that is home to our structured data:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span>\n…\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>We fill it with a JSON object that describes our data structure:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>\n}\n</code></pre>\n<p>The <code>@context</code> key clues the robot in to the data definition we're going to be using, which is the <code>schema.org</code> definitions. The <code>@type</code> tag associates the following data with the pre-defined structure. From there on it's relevant data! <code>headline</code>, <code>datePublished</code> and <code>dateModified</code> are all directly pulled from the content itself. In out case our data looks like this:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Fun With JSON-LD&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>\n}\n</code></pre>\n<p>Open question: <code>BlogPosting</code> or <code>Article</code>? Im going to stick with <code>BlogPosting</code> since these texts are really just that. I would use <code>Article</code> if I was writing a news piece or a review, or something maybe more scholarly.</p>\n<p>The last required field is an <code>image</code>:</p>\n<blockquote>\n<p>For best results, provide multiple high-resolution images (minimum of 300,000 pixels when multiplying width and height) with the following aspect ratios: 16x9, 4x3, and 1x1.</p>\n</blockquote>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n  ]\n}\n</code></pre>\n<p>This means that creating thumbnails for every Article is important, and those images need to exist on the page in a way that user can see.</p>\n<p>For this site, the main use of these images is going to be for sharing thumbnails. The fact that the image needs to be on the pages is interesting, since that really influences the design of the page. I've found that creating the necessity for a prominent thumbnail or hero image that accompanies each article is a recipe for a) not writing articles and b) bland stock photography. I want to avoid both. That means for this site I'm going to do illustrated images, small sketches and motif explorations that may or may not illustrate the article, and attach it to the <em>bottom</em> of the article.</p>\n<p>There are two other sections I want to look at, even though they are not requirements according to Google. These are the <code>author</code> and the <code>publisher</code> fields. The goal of using these fields is to create an association between you and your work; or in the case of the <code>publisher</code> field between an imprint entity and the creative works they've published. In our use case for this site, my goal is to create a machine-readable entity that is 'Nikolas Wise' and attach my articles and my work to that, in order to create a coherent entity that is exposed to the broader web.</p>\n<p>The <code>author</code> field is a <code>Person</code> or an <code>Organization</code>, the <code>publisher</code> field is an <code>Organization</code>. Lets start with <code>Person</code>:</p>\n<blockquote>\n<p>A person (alive, dead, undead, or fictional).\n<a href=\"https://schema.org/Person\">https://schema.org/Person</a></p>\n</blockquote>\n<p>It gets added to our LSON-LD like this:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t  …\n  }\n}\n</code></pre>\n<p>There are a lot of properties in this schema, like <code>deathPlace</code> and <code>knows</code>. One could really get into this and make it a very robust and complete data object, but I'm not sure how much value that would bring at the end of the day. There's a fine line between following specs and best practices to achieve a goal and ticking boxes to structure our lives solely in order to make them legible to the algorithm. I guess we each decide where that line is for ourselves.</p>\n<p>For me, I'm going to stick with <code>name</code>, <code>url</code>, <code>image</code>, <code>jobTitle</code>, <code>knowsLanguage</code>, and <code>sameAs</code>. Although <code>publishingPrinciples</code> seems interesting, and I might write one of those.</p>\n<p>Most of the fields are simple text strings, and can get filled out like so:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: …,\n  }\n}\n</code></pre>\n<p>The language codes are from the <a href=\"https://tools.ietf.org/html/bcp47\">language code spec</a>, and could also be <a href=\"https://schema.org/Language\">language</a> schema objects. The job title could be a <a href=\"https://schema.org/DefinedTerm\">Defined Term</a> schema object.</p>\n<p>The <code>sameAs</code> key is an interesting one, it's either a URL or an array of URLs that connect this <code>@person</code> with other parts of the web that are <em>also</em> that <code>@person</code>.</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;@person&quot;</span>: {\n\t  …\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t],\n  }\n}\n</code></pre>\n<p>This will connect &quot;me&quot; with this site and my twitter, github, instagram, and linkedin profiles. Those are the pages that I want to the algorithm to associate with &quot;me&quot;.</p>\n<p><code>@organization</code> is similar to <code>@person</code> in a lot of ways, and the fundamental idea is the same. The goal is to create a single entity that the algorithm can connect disparate pages and items too. I'm not going to set of an <code>@organization</code> here, but the the <a href=\"https://schema.org/Organization\"><code>@organization</code> schema type</a> has the spec for the object.</p>\n<p>So that's it! That means the entire JSON-LD for this article – and therefor the rest of the texts as well, looks like this:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span><span class=\"javascript\">\n\t{\n\t  <span class=\"hljs-string\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n\t  ],\n\t  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t\t],\n\t  }\n\t}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n"},{"meta":{"title":"Pressing Words, With Your Friend, Wordpress","slug":"wordpress-but-not-terrible","date":"2018.10.24","description":"<p>A contemporary developers guide to building things on Wordpress 4.x and not having it be terrible.</p>\n","collection":"texts","timestamp":1540364400000},"content":"<p>TL:DR; <a href=\"https://github.com/nikolaswise/nanobox-wordpress-1\">Start here</a>. Install <a href=\"https://nanobox.io/\">this thing</a> and connect it to your account on <a href=\"https://www.digitalocean.com/\">here</a>. Buy a license of <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">this (it's worth it)</a>. Read some docs for <a href=\"https://www.upstatement.com/timber/\">this</a> and start building. Wordpress 5 and Gutenberg will probably break all of this except the environments.</p>\n<p>When I first started working as a developer, Wordpress was <em>the</em> prevalent platform for pretty much any project. Ten years later and … Wordpress is still pretty much most of the internet. In general, Wordpress will be my last choice of a platform. I prefer to build static sites, use a headless CMS, or almost anything else at all.</p>\n<p>That said, as the Technical Director at Fuzzco — a design studio that relies almost exclusively on Wordpress for their websites — Wordpress was happening. Fuzzco is rare among studios in that we manage and host projects for our clients, and often have maintenance riders that can last for years. This means that in the course of a year, not only did we build a half dozen new projects on Wordpress, but we maintained and triaged issues on over 100 legacy projects.</p>\n<p>Very quickly I realized I had one option: <em>make Wordpress not terrible.</em></p>\n<h2>Terrible is pretty harsh</h2>\n<p>If you're comfortable with Wordpress, you might find some fightin' words here. What's my problem with Wordpress and what am I trying to solve for? My biggest issue with Wordpress development as I've encountered it in the past is a lack of clarity around the requirements of the entire system. What does the project need to run in an environment, and why? How do we move from a repository to a local environment and start working on a codebase? How does that codebase get deployed to a server?</p>\n<p>I've seen Wordpress systems that are frozen in time in 2006 — FTP to the server and edit a CSS file on production, or &quot;deploy&quot; your theme by uploading a <code>.zip</code>. I'm interested in how we can lower the cognitive overhead for getting a Wordpress project up and running, and join in with pre-processing, compiling, containerizing, testing, and all the really excellent things that we've come to expect from our web stacks over the past few years.</p>\n<p>Another issue I have with Wordpress is its commitment to auto-magical routes and rendering templates with obscure and complicated <code>.php</code> patterns that basically concatenate strings. I'm interested in explicit routes — either hard-coded or parameterized — and separating concerns between logic and template.</p>\n<p>A lot of this boils down to a disagreement between what Wordpress thinks a site should be and what I end up using it for. Wordpress as designed distinguishes between your &quot;site&quot; and your &quot;theme&quot;. Your &quot;site&quot; is the content in the database, the options you've saved, and the menus and widgets you've installed. It expects &quot;themes&quot; to be presentations of this real website stuff. This model of websites perpetuates that &quot;design&quot; is something that can be applied over a website, a kind of dressing up of the real things. This is the inverse, and perhaps a corollary to, the concept that designing a website is just deciding what it looks like. It's an idea that lives within the system of silos between design and development, and that we can &quot;design&quot; a website in Photoshop or Sketch and hand off the comps to a developer to build it. Which is how a lot of Wordpress projects are built.</p>\n<p>In short, <a href=\"/texts/how-to-design-while-developing/\">I disagree</a> with this concept of websites. My position is that designing a website is both how it looks, how it works, and how the data and structures are composed. Taking this approach, controlling the object models, the information architectures, and the templates are all of equal importance. In my line of work, a Wordpress theme can not be applied to any other site than the one that it was designed for, a site where the structure was designed for the theme.</p>\n<h2>So why use Wordpress?</h2>\n<p>There are still a number of really good, compelling reasons to use Wordpress as a platform for building websites. It's got a robust built-in commenting system with user accounts. It's really good for things that are shaped like blogs. It's got a huge, well-maintained ecosystem of plugins. It's free. And since it's most of the Internet, clients are really, really comfortable with it.</p>\n<p>There are a couple of reasons <em>not</em> to use Wordpress right now. Mostly these center around the impending release of Wordpress 5.0 and the Gutenberg editor, which has a number of concerns around plugin compatibility and accessibility for authors.</p>\n<p>But that's okay, since we've decided to use Wordpress 4.x. As we all know, picking a version of Wordpress and then never upgrading it is one of the time honored traditions of Wordpress development.</p>\n<h2>How does this work even</h2>\n<p>Let's start at the end.</p>\n<p>We're going to be hosting our production Wordpress site on a <a href=\"https://www.digitalocean.com/\">Digital Ocean</a> droplet — the <a href=\"https://www.digitalocean.com/pricing/\">smallest</a> one they have — for $5 per month. Depending on the project lifecycle, we can set up more droplets for a staging server and a development server. At Fuzzco we used dev servers to show sites to the internal team, staging servers to show sites to the client, and production servers to show sites to the public.</p>\n<p>I don't know about you, but I personally don't super love managing my virtual private servers manually. In order to deploy our codebases to Digital Ocean we'll use the phenomenal tool <a href=\"https://nanobox.io/\">Nanobox</a>. Nanobox is an operations layer that handles containerizing applications and deploying them agnostically to a cloud service provider. Nanobox will deploy our code from the command line to any one of our droplets.</p>\n<p>Nanobox will also containerize and run an application in a virtual machine <em>locally</em>. This means we'll use it to run our development environment, and ensure that all of our environments are identical. No more worrying about PHP versions and extensions and plugins. No more running MAMP or MySQL or Apache or whatever on your local machine before anything works. Nanobox defines the server in a <code>.yaml</code> file, and it will always be the same. It also handles all the syncing between our local disk and our virtual environment.</p>\n<p>So now that we know how our code is going from local to production, we can think for a second about <em>how</em> it's going to do that, and how we're going to manage our data.</p>\n<p>The database on the production server is &quot;canonical&quot;. That means that the database the client interacts with is the one true database, and we must treat it with care and attention. We'll never change that database ourselves, and we'll move that database <em>downstream</em> from production to staging to dev to local in order to develop against our real data. Importantly, we don't want to migrate the database manually either. It's a little expensive but using <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/pricing/\">Migrate DB Pro</a> is an incredible resource for this part. I guess one could also look into <a href=\"https://github.com/wp-sync-db/wp-sync-db\">alternatives</a> for personal projects.</p>\n<p>The canonical <em>codebase</em> lives in version control, and moves the other direction. From Github to local to dev to staging to production, amen. The only things we need to track in version control are what makes our project unique. Practically, this means we need to track our theme and our plugins. Wordpress core files are not special, and we should not fill our repositories with them.</p>\n<h2>Getting started</h2>\n<p>At this point it's worth <a href=\"https://docs.nanobox.io/install/\">getting started with Nanobox</a>. I back the containers with <a href=\"https://docs.nanobox.io/install/#lightweight-vm-virtualbox\">VirtualBox</a>, since at the time I started this it was slightly more stable than Docker on MacOS High Sierra. Once Nanobox &amp; Virtualbox/Docker is installed, set up <a href=\"https://docs.nanobox.io/providers/hosting-accounts/digitalocean/\">Digital Ocean as your provider</a>. Once that's done, we have everything we need to get started!</p>\n<p>I'll be talking through a project I built in order to facilitate building other projects. This will be more intense than you might need for a single build, but this was designed a tool that anyone can use to get started quickly. Here's the basic structure of our repo:</p>\n<pre><code>📁 <span class=\"hljs-string\">/project-name</span>\n⮑ 📄 <span class=\"hljs-string\">.gitignore</span>    <span class=\"hljs-comment\"># includes /wp</span>\n⮑ 📄 package.json  <span class=\"hljs-comment\"># tooling lives here</span>\n⮑ 📄 readme.md     <span class=\"hljs-comment\"># be nice, write docs    </span>\n⮑ 📁 theme         <span class=\"hljs-comment\"># our theme codebase</span>\n⮑ 📁 plugins       <span class=\"hljs-comment\"># vendor plugins</span>\n⮑ 📁 scripts       <span class=\"hljs-comment\"># some helpers</span>\n</code></pre>\n<p>The crux of the project is our <code>boxfile.yml</code> configuration file. This is what Nanobox uses to create our containers. It looks like this!</p>\n<pre><code><span class=\"hljs-comment\"># /boxfile.yml                </span>\n<span class=\"hljs-attr\">run.config:</span>                    <span class=\"hljs-comment\"># </span>\n  <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">php</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">engine.config:</span>               <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-string\">php-7.0</span>           <span class=\"hljs-comment\"># Defines PHP version</span>\n    <span class=\"hljs-attr\">document_root:</span> <span class=\"hljs-string\">&#x27;wp/&#x27;</span>       <span class=\"hljs-comment\"># Dir to serve app from</span>\n    <span class=\"hljs-attr\">extensions:</span>                <span class=\"hljs-comment\"># PHP extensions we need</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gd</span>                     <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mysqli</span>                 <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">curl</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zlib</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ctype</span>                  <span class=\"hljs-comment\">#</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">web.wp:</span>                        <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">start:</span> <span class=\"hljs-string\">php-server</span>            <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">network_dirs:</span>                <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">data.storage:</span>              <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wp/wp-content/uploads/</span> <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.db:</span>                       <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/mysql:5.6</span>     <span class=\"hljs-comment\"># Nanobox DB magic</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.storage:</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/unfs:0.9</span>      <span class=\"hljs-comment\">#</span>\n</code></pre>\n<p>As noted above, we'll be serving our entire installation of Wordpress in the <code>/wp</code> directory. This will hold all the Wordpress core files and compiled theme code, none of of which we need or want in version control. As such, make sure this is listed alongside <code>node_modules</code> in the <code>.gitignore</code>.</p>\n<p>Since we've decided that we don't want to track these files, but we need them to actually have a project, we can write a helper script to take care of the gap between those two ideas.</p>\n<p>Here are the scripts we're going to write to help us handle this process:</p>\n<pre><code>📁 /<span class=\"hljs-keyword\">project</span>-name\n⮑ 📁 scripts\n   ⮑ 📄 check-<span class=\"hljs-keyword\">install</span>.sh <span class=\"hljs-comment\"># Installs Wordpress core files.</span>\n   ⮑ 📄 init.sh          <span class=\"hljs-comment\"># Runs our setup helper.</span>\n   ⮑ 📄 prestart.sh      <span class=\"hljs-comment\"># Checks if we need to init.</span>\n   ⮑ 📄 setup.js         <span class=\"hljs-comment\"># Cute lil&#x27; CLI helper.</span>\n</code></pre>\n<p>The first thing we'll do is write a script that checks if <code>/wp</code> exists. If it doesn't, throw an error that we need to initialize the project since we don't have any of the core files we need.</p>\n<pre><code><span class=\"hljs-comment\"># prestart.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;Project not initialized: Run `$ npm run init`&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span>\nfi\n</code></pre>\n<p>I'm calling this <code>prestart</code> because I want to run it before <code>npm start</code>. Many times I'll be on autopilot, and after cloning a repo simply run <code>npm install</code> and <code>npm start</code>. This interrupts that process and lets me know I need a third step, <code>npm run init</code>. Let's put this in our <code>package.json</code> scripts:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;init&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/init.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;prestart&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/prestart.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;npm run dev&quot;</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>We'll get to our dev tooling later. Lets take a look at what our <code>init.sh</code> script does:</p>\n<pre><code><span class=\"hljs-comment\"># init.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">./scripts</span>/setup.js  \n</code></pre>\n<p>Not much! This just runs our setup CLI helper. You might not need all this, but since I built this system to help a team of developers work on <em>many many</em> projects you're gonna get it anyway.</p>\n<pre><code><span class=\"hljs-comment\">// setup.js</span>\n\n<span class=\"hljs-comment\">// some nice deps for making a CLI.</span>\n<span class=\"hljs-keyword\">const</span> prompt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;prompt&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> exec = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;child_process&#x27;</span>).exec\n<span class=\"hljs-keyword\">const</span> colors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;colors/safe&quot;</span>)\n\n<span class=\"hljs-comment\">// Run and log a bash command</span>\n<span class=\"hljs-keyword\">const</span> bash = <span class=\"hljs-function\"><span class=\"hljs-params\">cmd</span> =&gt;</span> {\n  msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Running: <span class=\"hljs-subst\">${cmd}</span>`</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n    exec(cmd, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) reject(err)\n      resolve(stdout, stderr)\n    })\n  });\n}\n\n<span class=\"hljs-comment\">// Log a message</span>\n<span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-function\">(<span class=\"hljs-params\">color, text</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(colors[color](text))\n}\n\n<span class=\"hljs-comment\">// do the magic</span>\n<span class=\"hljs-keyword\">const</span> setup = <span class=\"hljs-function\">(<span class=\"hljs-params\">err, result</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) msg(<span class=\"hljs-string\">`red`</span>, err)\n\n  msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">&#x27;WordPress configuration values ☟&#x27;</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> result) {\n    msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${key}</span>: <span class=\"hljs-subst\">${result[key]}</span>;`</span>)\n  }\n  <span class=\"hljs-comment\">// run our check-install script.</span>\n  bash(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.cwd()}</span>/scripts/check-install.sh`</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// add our project to hostfile</span>\n    bash(<span class=\"hljs-string\">`nanobox dns add local <span class=\"hljs-subst\">${result.name}</span>.local`</span>)\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// explain the next step</span>\n    msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Run npm start, then finish setting up WordPress at <span class=\"hljs-subst\">${result.name}</span>.local/wp-admin`</span>)\n  })\n}\n\nmsg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">&#x27;Making Progress!&#x27;</span>)\nprompt.start();\nprompt.get({\n  <span class=\"hljs-attr\">properties</span>: {\n    <span class=\"hljs-attr\">name</span>: {\n      <span class=\"hljs-attr\">description</span>: colors.magenta(<span class=\"hljs-string\">&quot;Project name:&quot;</span>)\n    }\n  }\n}, setup);\n</code></pre>\n<p>This will open a CLI asking for the name of the project, run the <code>check-install.sh</code> script, create the hostfile line for our local DNS at <code>&lt;project-name&gt;.local</code>, and log the next action that you need to take to finish installing Wordpress.</p>\n<p>Lets take a peek at our <code>check-install.sh</code> file:</p>\n<pre><code><span class=\"hljs-comment\"># check-install.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;nope we need that&#x27;</span>\n  degit git@github.com:nanobox-quickstarts/nanobox-wordpress.git wp\nfi\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/plugins/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/plugins/</span>\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/theme/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/themes/my</span>-theme\n</code></pre>\n<p>Very similar to <code>prestart</code>! The biggest difference is the bit where we use <code>degit</code> to clone Nanobox's official Wordpress repo into our untracked <code>/wp</code> directory. Degit will only get the head files, and none of the git history. Nor will it keep the <code>.git</code> file, basically making this a super clean, super fast way to download a directory of files. It's great. The last thing this does is wipe out any themes or plugins that we don't want our need in the core files and syncs out own tracked directories to the correct places in the Wordpress core file structure.</p>\n<p>Now would be a time to talk about plugins.</p>\n<h2>What's up with plugins?</h2>\n<p>Wordpress has a million plugins. We're going to focus on some of the basic ones that almost every Wordpress project ever needs, and should honestly be part of Wordpress. Building sites without these is a pain. Here they are:</p>\n<pre><code>📁 /project-name\n⮑ 📁 plugins\n  ⮑ 📁 advanced-custom-fields-<span class=\"hljs-keyword\">pro</span>\n  ⮑ 📁 custom-<span class=\"hljs-keyword\">post</span>-types-ui\n  ⮑ 📁 timber-library\n  ⮑ 📁 wp-migrate-<span class=\"hljs-keyword\">db</span>-<span class=\"hljs-keyword\">pro</span>\n</code></pre>\n<p>There are a couple more in my repo to do things like order posts in the CMS and import CSVs. Not super necessary, so we won't talk about theme here.</p>\n<h3>Advanced Custom Fields</h3>\n<p><a href=\"https://www.advancedcustomfields.com/\">ACF</a> is a staple of Wordpress development. It lets us define new key/value pairs to extend the data model of things like posts and pages, and allows us to create a set of global variable available from anywhere. Sounds simple, surprising it's not part of Wordpress.</p>\n<h3>Custom Post Types UI</h3>\n<p><a href=\"https://wordpress.org/plugins/custom-post-type-ui/\">CPT-UI</a> creates an interface in the admin panel for creating new post types. Out of the box, Wordpress comes with <code>Posts</code> and <code>Pages</code>. CPT-UI lets us build new types like <code>Projects</code> or <code>Case Studies</code> or whatever need for our data model. Again, surprising that this  isn't just part of Wordpress. C'est la vivre.</p>\n<h3>WP Migrate DB</h3>\n<p><a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">Migrate DB</a> lets us ... migrate ... our ... DB. This gives us the ability to sync our databases across environments and get media uploads and things without needing to write magic MySQL queries while tunneled into open database ports on virtual machines. This is better. Believe me.</p>\n<h3>Timber</h3>\n<p>The <a href=\"https://www.upstatement.com/timber/\">Timber</a> library from Upstatement is the greatest thing to happen to Wordpress development, after those plugins that should just be part of Wordpress. Timber introduces the concept of <em>layout templates</em> to Wordpress. This lets us write PHP to manipulate data, and pass that data to a template file where we can write <a href=\"https://twig.symfony.com/\">Twig templates</a> rather than composing strings in PHP. Basically ...</p>\n<pre><code><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$myvar</span> <span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>Turns in to:</p>\n<p>{% raw %}</p>\n<pre><code><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">myvar</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p>{% endraw %}</p>\n<p>This lets us write templates with a templating language, and write server-side business logic in a server-side programming language. Truly revolutionary.</p>\n<h2>What we talk about when we talk about Wordpress development: or, The Theme.</h2>\n<p>With all this initial work around Wordpress core, development environments, and a basic plugin ecosystem in place we can start talking about the good stuff: the theme!</p>\n<pre><code>📁 /project-<span class=\"hljs-built_in\">name</span>\n⮑ 📁 theme\n   ⮑ 📁 es6              <span class=\"hljs-comment\"># Source JS</span>\n   ⮑ 📁 scss             <span class=\"hljs-comment\"># Source SCSS</span>\n   ⮑ 📁 routes           <span class=\"hljs-comment\"># PHP route logic files</span>\n      ⮑ 📄 index.php\n      ⮑ 📄 page.php\n      ⮑ 📄 post.php\n   ⮑ 📁 views            <span class=\"hljs-comment\"># Twig templates</span>\n      ⮑ 📁 layouts\n      ⮑ 📁 pages\n      ⮑ 📁 partials\n   ⮑ 📄 functions.php    <span class=\"hljs-comment\"># This includes routing.</span>\n   ⮑ 📄 screenshot.png   <span class=\"hljs-comment\"># Theme preview image.</span>\n   ⮑ 📄 index.php        <span class=\"hljs-comment\"># Need this, but it&#x27;s empty.¯\\_(ツ)_/¯</span>\n</code></pre>\n<p>We won't get too deep into this, since we're getting into more conventional territory here. Basically our <code>es6</code> directory holds source JS that will get compiled into a bundle. Same with the <code>scss</code> directory, which gets compiled into css. We handle that with npm scripts in the <code>package.json</code>.</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;css&quot;</span>: <span class=\"hljs-string\">&quot;node-sass ./theme/scss/style.scss theme/style.css --watch&quot;</span>,\n    <span class=\"hljs-string\">&quot;js&quot;</span>: <span class=\"hljs-string\">&quot;rollup -c -w&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>Hopefully none of this is to unusual — if it's is I recommend reading Paul Pederson's <a href=\"http://paulcpederson.com/articles/npm-run/\">excellent article on npm scripts</a>.</p>\n<p>There is one part of this I want to touch on before moving on:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./plugins/ ./wp/wp-content/plugins/&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./theme/ ./wp/wp-content/themes/fuzzco&quot;</span>,    \n    <span class=\"hljs-string\">&quot;watch&quot;</span>: <span class=\"hljs-string\">&quot;rerun-script&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  },\n  <span class=\"hljs-string\">&quot;watches&quot;</span>: {\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;plugins/**/*.*&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;theme/**/*.*&quot;</span>\n  },\n  <span class=\"hljs-string\">...</span> \n</code></pre>\n<p>This bit sets up a watcher on our <code>theme</code> and <code>plugins</code> directory, which sync our tracked working files to the correct place in our Wordpress core file structure.</p>\n<h2>Functions, Routes, and Views</h2>\n<p>The last thing I want to touch on is the basic structure of using Timber to match routes with views.</p>\n<pre><code><span class=\"hljs-comment\">/** functions.php */</span>\nRoutes::map(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$params</span></span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, <span class=\"hljs-variable\">$params</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/:page&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable\">$params</span></span>) </span>{\n  <span class=\"hljs-variable\">$page</span> = get_page_by_path(<span class=\"hljs-variable\">$params</span>[<span class=\"hljs-string\">&#x27;page&#x27;</span>]);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$page</span>) {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, <span class=\"hljs-variable\">$params</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/404.php&#x27;</span>, <span class=\"hljs-variable\">$params</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">404</span>);\n  }\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/blog/:post&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$params</span></span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/post.php&#x27;</span>, <span class=\"hljs-variable\">$params</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\n</code></pre>\n<p>These are Timber routes defined in the <code>functions.php</code> file. This replaces the standard routing of Wordpress, and we have change the structure of the Wordpress permalinks to anything other than the default to have it work. This is documented in Timber.</p>\n<p>When our server gets a request at a route of <code>/page-name</code>, it will call the <code>page.php</code> file and pass it the params associated with the route.</p>\n<pre><code><span class=\"hljs-comment\">/** page.php */</span>\n<span class=\"hljs-meta\">&lt;?php</span>\n  <span class=\"hljs-variable\">$context</span> = Timber::get_context();\n  <span class=\"hljs-variable\">$post</span> = <span class=\"hljs-keyword\">new</span> TimberPost();\n  <span class=\"hljs-variable\">$context</span>[<span class=\"hljs-string\">&#x27;page&#x27;</span>] = <span class=\"hljs-variable\">$post</span>;\n  \n  Timber::render( <span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">&#x27;views/pages/page-&#x27;</span> . <span class=\"hljs-variable\">$post</span>-&gt;post_name . <span class=\"hljs-string\">&#x27;.twig&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;views/pages/page.twig&#x27;</span>\n  ), <span class=\"hljs-variable\">$context</span> );\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>The <code>page.php</code> file assigns some variables, interacts with Wordpress to get and shape our data, and then renders the twig file associated with the page. In this case, it's going to see if there's a template that matches the name of our page, otherwise it will render the default page template.</p>\n<h2>Back to the beginning</h2>\n<p>You've built your theme! Maybe it's a simple hello world, maybe it's a heavy duty big ol' thing. Either way, it's time to deploy.</p>\n<p>You can use Nanobox to create a droplet for your server. Nanobox will give your project a name in their system, and expose the URL for the server at <code>&lt;your-project&gt;.nanoapp.io</code>. I like to use the convention <code>project-dev</code>, <code>project-stage</code>, and <code>project-prod</code>. Once you create your project in Nanobox, the hard part is over and you can let them do the heavy lifting:</p>\n<pre><code>$ nanobox deploy <span class=\"hljs-keyword\">project</span>-dev\n</code></pre>\n<p>Or we can map this to our NPM script:</p>\n<pre><code>$ npm <span class=\"hljs-builtin-name\">run</span> deploy:dev  \n</code></pre>\n<p>This will containerize our application, push it to our droplet, hydrate the entire thing, and serve! Now we can use Migrate DB to move our database around, and we're in business.</p>\n<h2>Putting it all together</h2>\n<p><a href=\"https://github.com/nikolaswise/nanobox-sapper-1\">The project repo</a> is a turnkey, ready to roll version of all the above. It contains all the tooling needed to get started, and if you've followed along with this guide, you should be able to get started in no time.</p>\n<p>As always, feel free to reach out to me in your venue of choice to talk about any of this — I would be happy to help you set this up for your own Wordpress project!</p>\n"},{"meta":{"title":"Soft Proof","slug":"soft-proof","date":"2017.10.29","description":"<p>Translations and compromises in image making or; the Image Cult Society.</p>\n","collection":"texts","timestamp":1509260400000},"content":"<p>There's an interesting thing that happens when a new idea or technology gets introduced then quickly assimilated into the background hum of our daily lives. It starts out with a discreet name — a clear identifier of what this thing is and means. Than this name just sort of ... slips away. It becomes so normal that to name it would seem strange. Its original name doesn't seem to fit any more, as the name existed in the first place to demarcate the new thought from the ordinary. And now the new thing is just ordinary. Think about Google Maps. It's just ... a map. In 2005, when Google Maps was first released, it's particular approach to the interface of a digital map was called a 'slippy map'. Weird, right?</p>\n<p>This is an interesting phenomenon around cultural approaches to technology, but not actually what I want to talk about. I want to talk about soft proofs. Soft proofs are an example of this taken to an extreme — you use them every day but you have probably never heard of them. There is no need for the soft proof to be something other than normal, the soft proof just <em>is</em> normal. But what is a soft proof, and why is it so normal? And why do I want to explore a topic so quotidian that the word used to mark it as interesting is so faded and worn?</p>\n<p>A soft proof is a way of viewing an image before the image has been reproduced mechanically. In contrast to the soft proof is the hard proof: a way of viewing an image immediately after it's been reproduced mechanically. Basically, a soft proof is an image on a screen that will be sent to a printer. Otherwise known as an image. It's need for a discreet name seems so unnecessary that it seems bizarre to refer to all images - even this text as I write it – as soft proofs. But that is, in essence, what they are. We see images on our screens that an be reliably turned into images on other peoples screens, and even into physical images on paper.</p>\n<p>The reason why this needed a name to demarcate it as special — during the advent of the digital  — is that this is a really hard problem to solve. There are a range of mathematical models for approaching a relatively unified theory of color and vision, and a wide range of physical pieces of machinery that are tasked with producing those images — from printing presses to monitors. The act of ensuring an image can be predictably reproduced is necessarily an act of translation. Translating from this color space to that; from an additive color model of a screen to the subtractive color model of ink and paper; approximating the color of a paper stock to be printed on.</p>\n<p>This translating process is done using something called a Color Profile. A Color Profile is a set of rules for ensuring that an image created with red, green, and blue light can be replicated on off-white paper using cyan, magenta, yellow, orange, and green inks. The current workflow of digital to print is so smooth, so ubiquitous and mundane, as to occlude the massive technological feat that it supports it.</p>\n<p>This feat was undertaken by a small group of technology companies I the early 90s, and they collaborated to define a universal standard of how this would work.</p>\n<blockquote>\n<p>The International Color Consortium was formed in 1993 by eight industry vendors in order to create an open, vendor-neutral color management system which would function transparently across all operating systems and software packages. . . . The eight founding members of the ICC were Adobe, Agfa, Apple, Kodak, Microsoft, Silicon Graphics, Sun Microsystems, and Taligent.</p>\n</blockquote>\n<p><a href=\"https://ninedegreesbelow.com/photography/icc-profile-negative-tristimulus.html#luther\">- Color Science History and the ICC Profile Specifications, Elle Stone</a></p>\n<p>The current, baseline profiles built around RGB and CMYK came about with the rise of digital image-making, which is the basis of the the current world around us, a world built on and predicated by images.</p>\n<p>The dominant translation <em>is</em> dominant because it — to a large degree — works. Creating color profile is really hard, mathy, phsysicsy stuff. It's hard to do yourself. But CMYK/RGB cuts the corners off the world to make it fit into a gamut that can be handled. But by necessity it's a compromise: what colors are we not handling in order to handle the maximum number of colors? What parts of the color space get left behind?</p>\n<blockquote>\n<p>Many of these issues give me the feeling at times of reluctant rather than open co-operation between some of the companies that created this standard. Having said that, there does seem enough information in the public standard (when combined with examining available existing  profiles) to effectively and accurately characterize color profiles of devices and color spaces. I could imagine there being some poor results at times though, due to some looseness in the spec.</p>\n</blockquote>\n<p><a href=\"https://argyllcms.com/icc_problems.html\">—  What's wrong with the ICC profile format anyway?, Graeme Gill</a></p>\n<p>Its important to understand this compromise; understand how it works and what exchange we're making in the process. What are we giving up, and what are we getting in return?</p>\n<p>What are we leaving on the table? For example, photography (up until the 80's) calibrated for white people. African Americans and other dark skinned people photographed poorly. They were outside the color space. The story goes that school photos of interracial classrooms would have rows of perfectly exposed white kids, and voids where the black children should have been (<a href=\"http://www.broombergchanarin.com/text-racism-of-early-colour/\">Adamn Broomberg</a>). More than this, the standards only changed with industry pressure from chocolate and furniture manufacturers — a realm of capital where the browns and blacks matter (<a href=\"https://priceonomics.com/how-photography-was-optimized-for-white-skin/\">Rosie Cima</a>).</p>\n<blockquote>\n<p>Film chemistry, photo lab procedures, video screen colour balancing practices, and digital cameras in general were originally developed with a global assumption of ‘Whiteness.’”</p>\n</blockquote>\n<p><a href=\"http://www.cjc-online.ca/index.php/journal/article/view/2196\">— Looking at Shirley, the Ultimate Norm: Colour Balance, Image Technologies, and Cognitive Equity, Lorna Roth</a></p>\n<p>With the creation of the RGB color space, with the creation of the ICC, we ceded the visual world to supermassive tech interests, much like we've ceded our privacy and personal data. In doing so we've inherently made the creation and dissemination of images into a tool for capital — one that supports dominant power structures.</p>\n<p>How do we understand the implicit, invisible, baked in assumptions of the soft proof? We can start by operating outside the parameters of the soft proof, recognize it as a tool to use or not use. The gap between the soft proof &amp; the hard copy is measured in the gap between the tools used to plan &amp; prepare versus the tools used to produce, and we can move in to this gap and inhabit it. We can create work here, and in doing so reclaim some of the space that we've given away.</p>\n<p>The Risograph, for example, has a toolchain for soft proofing, but the machine— through its high speed &amp; low cost — also opens up the possibility of designing images through iterative hard proofs; blending the techniques go the modern digital print process with the classical analog ones.</p>\n<p>The web is a strange medium – a blending of soft and hard spaces. A plastique space, with plastic proofs and plastic copies. The same process of translation is at work — between the still &amp; the interactive, flowing image. This is why showing comps &amp; wireframes of websites to clients can be so tricky: our culture of image cult and technological process can elide the critical differences we sense as agents of these systems.</p>\n<p>This is a call for a Marxism of image making — to seize the means of production. To create radical images &amp; tools that exist in the corners of the gamut and color spaces discarded by the soft proof. To understand that planning is not doing, and take control of our own visual languages.</p>\n"},{"meta":{"title":"How to Design While Developing","slug":"how-to-design-while-developing","date":"2016.5.15","description":"<p>Moving beyond the idea that the designer and the developer on a web project are different people, and that somehow those are different things.</p>\n","collection":"texts","timestamp":1463295600000},"content":"<p>For a long time, websites got made with one person designing how it should look and one person developing the code that made it look that way.</p>\n<p>A lot of times, this is still how things get done - one team makes static Photoshop comps, and hands them off to a team of developers who know stuff like whether React or Ember or Node or Ruby is the best thing. This can sometimes cause friction. The designer expects the website to look exactly like the comp, the developer writes a bunch of custom CSS and HTML to fit the design, and whoever needs to make sure the whole thing is WCAAG compliant spends weeks hating both of them. When the next comp comes down the line, it all happens again. For a big site, this leads to design drift, and a hugely tangled codebase that’s a <a href=\"http://paulcpederson.com/articles/css-for-people-who-hate-css/\">nightmare to try and untangle</a>.</p>\n<p>This splitting of systems is an artificial one that’s sustained by organizational assumptions: we need designers, and we need developers. The thing about Design though - capital D <em>design</em> - is that it’s simply a method of deciding on a structure to accomplish a purpose. The design tools and methods one uses to accomplish good design is always in tune with the thing being made. A building doesn’t go from painting to construction drawings, nor does a car go from modeling clay to racetrack. The clay and the paint are very useful steps to <em>start</em> the process of design. They help us to be creative and loose and explore new solutions to the problems at hand. This exploratory work helps us to understand how a thing will <em>feel</em> in the world.</p>\n<p>These initial drawings and sketches get translated into their final structures, and translation is a process that can enrich both what is being translated <em>to</em> as well as what is being translated <em>from</em>. Every precise moment may not align directly, since differences in context can have deep implications for meaning.</p>\n<p>We turn our drawings into objects with all the considerations of the final materiality present. We can’t ignore the shape of the engine or structural code requirements, although our models and paintings certainly can. Design is provisional until the point at which it exists in the world, and when talking about the web even this isn’t any sort of ending. A website is its own sort of thing, with its own structure and requirements that need to be present and known throughout the entire process of design.</p>\n<p>A drawing and a website will never look the same. This is mostly because a website isn't static. Because of this, what a website <em>looks like</em> is just a small piece of what a website <em>is</em>. A website is what it enables its users to accomplish, what its developers have to do to keep it stable and moving forward.</p>\n<p>The best way to meet our goals as people who make good websites is to focus less on those drawings right away. Instead we should think more about simplicity and elegance than the detail oriented perfection of a jpeg.</p>\n<p>Don’t get me wrong - the jpeg can be important. It shows us how we think we can solve our problems, a glimpse of how we want our website to looks and feel, and the tone we want to communicate. Through all this it needs to have to room to change and breath as it comes to life and become a real thing. Our drawings should not be on the level of “what does this look like” but “what problem does this solve and how”. At every step in the process we can work to make the real thing better, to solve new questions that arise as we move through the process of design / development – a process where there is no gap between those two ideas.</p>\n<p>To design a website is to develop it - and as we develop a website we are constantly making design decisions. A designer cannot abdicate their responsibility to design by saying “well, my jpeg looked great.” A developer cannot abdicate their responsibility to a codebase by saying “well that’s what they wanted in the comp.”</p>\n"},{"meta":{"title":"Building a Client Library for ArcGIS","slug":"building-a-client-library","date":"2015.3.09","description":"<p>Writing a wrapper client library to smooth out design weirdness at the API level leads to plenty of design thinking on the way things should be.</p>\n","collection":"texts","timestamp":1425884400000},"content":"<p>This year I built a JavaScript wrapper for Node and the Browser around the ArcGIS REST API to simplify working with that platform as a developer. This was as an exercise in API design, as well as making a tool that I wanted to use but didn't exist yet. The project is a bare-bones library to ease interactions with the ArcGIS REST API in JavaScript and Node apps.</p>\n<p>Sometimes – and for sure in this case – an API can be rough, built over time, and not provide the sort of logical models that work well with specific language environments. This was the case with the ArcGIS REST API that I was running in to. A lot of the decisions had been made over the course of years, and didn't translate very smoothly a language as young as Node.js.</p>\n<p>The first step was to figure out what problems I wanted to solve. A lot of my work with Esri PDX has been about content handling, and so this is where I started. Reading <em>all</em> the doc to get a big picture of what's going on with the API, and talk to everyone who's done work like this before to figure out what problems <em>they</em> needed to solve was the first step. From there I felt I had enough context and information to make the thing useful for more people than just me, and make sure that it was coherent with the underlying goals of the original API.</p>\n<p>This project works to simplify and unify the gap between the ArcGIS REST API and a contemporary Node application. This library is a UI in the most basic sense of the term — it provides an interface between the developer and the servers. That interface needs to be well designed and thoughtful in order to make the process as smooth, intuitive, and pleasurable as possible.</p>\n<p>One of the most important parts of the project is to provide developers with a way to access the ArcGIS platform without needing to architect their entire application around opinionated frameworks (like Dojo, for example). Though the library itself is written in ES6, it's distributed as plain, normal ES5 – both as a node package and a packaged bundle. This means it works both in Node and the browser, and has very few opinions on how it integrates with the rest of your app.</p>\n<p>Right now, the library wraps most of the basic platform content management and interactions - getting and editing users, organizations, and items. The Node ArcGIS Client Library is an open source project — so it's scope will increase as the community works to accomplish more goals and workflows.</p>\n<h2>Setting up the client</h2>\n<p>The first step in using the library is initializing the client with your target portal.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">ArcGIS</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">require</span>(<span class=\"hljs-string\">&#x27;arcgis&#x27;</span>)</span>\n<span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">ArcGIS</span>()</span>\n</code></pre>\n<p>This sets up a default object for interacting with the API. This default is going to talk to ArcGIS Online as an anonymous, unauthenticated user. One can authenticate this client session as a named user by passing in a user token obtained from a successful OAuth login process.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">Arcgis</span>({\n  <span class=\"hljs-variable\">token</span>: <span class=\"hljs-variable\">namedUserToken</span>\n})</span>\n</code></pre>\n<p>This isn't exclusive to ArcGIS Online. The API for interacting with your organization's installation of Portal or Server is the same. Setting up the client session with your instance is done by specifying your API domain.</p>\n<pre><code>var arcgis = Arcgis({\n  <span class=\"hljs-attribute\">domain</span>: &#x27;ago<span class=\"hljs-variable\">.my-server</span><span class=\"hljs-variable\">.com</span>&#x27;,\n  token: namedUserToken\n})\n</code></pre>\n<p>Beyond the initialization of the client, the library is exclusively async. All the functions return promises by default.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(m)</span> {</span>\n  console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-keyword\">m</span>)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ohNo</span> <span class=\"hljs-params\">(err)</span> {</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Error(err)\n}\narcgis.request()\n.then(<span class=\"hljs-built_in\">log</span>)\n.<span class=\"hljs-keyword\">catch</span>(ohNo)\n</code></pre>\n<p>You can also pass in a node-style callback, if you'd prefer.</p>\n<pre><code>function <span class=\"hljs-keyword\">log</span> (<span class=\"hljs-keyword\">err</span>, results) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">err</span>) {\n    <span class=\"hljs-keyword\">return</span> new <span class=\"hljs-keyword\">Error</span>(<span class=\"hljs-keyword\">err</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    console.<span class=\"hljs-built_in\">log</span>(results)\n  }\n}\narcgis.request({}, <span class=\"hljs-keyword\">log</span>)\n</code></pre>\n<p>Both methods work just as well, and use all the same business logic. I like promises, but maybe you don't. This is one of the main reasons the library does its best to avoid inflicting my opinions on your codebase.</p>\n<p>Once we have an authenticated session, we can do all sorts of stuff — like figure out who we are:</p>\n<pre><code><span class=\"hljs-keyword\">function</span> hello (<span class=\"hljs-keyword\">user</span>) {\n  console.log(<span class=\"hljs-string\">&#x27;Hello, &#x27;</span> + <span class=\"hljs-keyword\">user</span>.firstName)\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(hello)\n</code></pre>\n<p>We can get all of the items that user has in the platform:</p>\n<pre><code><span class=\"hljs-selector-tag\">function</span> <span class=\"hljs-selector-tag\">getContent</span> (user) {\n  <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">user</span><span class=\"hljs-selector-class\">.content</span>()\n}\n<span class=\"hljs-selector-tag\">function</span> <span class=\"hljs-selector-tag\">logContent</span> (content) {\n  <span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(content)\n}\n<span class=\"hljs-selector-tag\">arcgis</span><span class=\"hljs-selector-class\">.user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>)\n<span class=\"hljs-selector-class\">.then</span>(getContent)\n<span class=\"hljs-selector-class\">.then</span>(logContent)\n</code></pre>\n<p>Or a list of all the groups that a user is a member of.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> logGroups (item) {\n  item.<span class=\"hljs-keyword\">groups</span>.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-keyword\">group</span>) {\n    console.log(<span class=\"hljs-keyword\">group</span>.title)\n  })\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(logGroups)\n</code></pre>\n<p>The library also can interact with the user's organization, returning information, members, or all the content associated with the organization.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logOrg</span> <span class=\"hljs-params\">(org)</span> <span class=\"hljs-comment\">{\n  console.log(org)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">organization</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&#x27;esripdx&#x27;</span>)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logOrg)</span>\n</span></code></pre>\n<p>The organization call defaults to 'self' — whatever organization the current user is a member of.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMembers</span> (org) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">org.members()</span>\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> (members) {\n  console.log(members)\n}\narcgis.organization().then(getMembers).then(log)\n</code></pre>\n<p>Many of the content calls are abstractions or helper methods for longer, more complicated calls to the <code>search</code> endpoint.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getContent</span> <span class=\"hljs-params\">(org)</span> {</span>\n  <span class=\"hljs-keyword\">return</span> org.content()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(items)</span> {</span>\n  console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">items</span>)\n}\narcgis.organization().then(getContent).then(<span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>In this way we are able to create a transitional layer between the API itself (a super complicated call to the search endpoint) and what application developers need (all my organization's content).</p>\n<h2>Working with content</h2>\n<p>Platform content is the weakest link in the library as of today. ArcGIS supports a huge range of item types, and quite a number of sophisticated things you can do with those item types. For now the basics are more or less in place — like getting an item's details:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> layerID = <span class=\"hljs-string\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logItem</span> <span class=\"hljs-params\">(item)</span> <span class=\"hljs-comment\">{\n  console.log(item)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">item</span><span class=\"hljs-params\">(layerID)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logItem)</span>\n</span></code></pre>\n<p>Or updating the those details and editing the permissions:</p>\n<pre><code>var layerId = <span class=\"hljs-symbol\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb</span>&#x27;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateItem</span> (item) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.update({</span>\n    snippet: <span class=\"hljs-symbol\">&#x27;Building</span> footprints <span class=\"hljs-keyword\">in</span> my neighborhood <span class=\"hljs-keyword\">in</span> Portland, Oregon&#x27;\n  })\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shareItem</span> (item) {\n  console.log(item)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.permissions({</span>\n    <span class=\"hljs-keyword\">access</span>: <span class=\"hljs-symbol\">&#x27;public</span>&#x27;\n  })\n}\narcgis.item(layerId)\n.<span class=\"hljs-keyword\">then</span>(updateItem)\n.<span class=\"hljs-keyword\">then</span>(shareItem)\n</code></pre>\n<p>So far, there's some support for item-type-specific methods that are starting to open up the possibilities of manipulating your content from Node — like getting all the data in a layer.</p>\n<pre><code>var layerID = <span class=\"hljs-symbol\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb</span>&#x27;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getData</span> (item) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.data()</span>\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logData</span> (data) {\n  console.log(data)\n}\narcgis.item(layerId)\n.then(getData)\n.then(logData)\n</code></pre>\n<p>There is a lot more of the platform that we could cover than this - services, analysis, layer creation and tile publishing all are actions that this library or ones like it could cover.</p>\n"},{"meta":{"title":"Map as Context","slug":"map-as-context","date":"2015.2.19","description":"<p>Understanding maps as designed objects and attempting to define a theory for making digital maps on the internet as good as old paper maps.</p>\n","collection":"texts","timestamp":1424332800000},"content":"<p>Looking at maps as they exist today on the internet, we have a pretty solid idea of what that means. It means they look like Google Maps. This is a pretty recent design solution to the 'what is a map on the internet' problem, only about 10 years old. Which is old for internet, but pretty young for maps. The Google Maps model is a good one, too! It's a very effective way to present what is essentially a road map - a drivers atlas for navigating a city or a country. Google Maps replaces the AAA State Highway map really effectively, but perhaps there are some weak links with how it applies to other, less navigation-oriented maps.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/01-amt2_akershus-amt-57-vi_1887.jpg\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/01-amt2_akershus-amt-57-vi_1887.jpg\"\n          data-sizes=\"auto\"\n          alt=\"\" />\n      </picture>\n    </figure>\n  </p>\n<p>There a large number of really beautiful maps that exist only on paper, and a large number of really ugly maps that exist on screens. How can we start to think about maps in a way that bridges this gap? Is there a way we can approach these other, not-a-roadmap-map maps more effectively to make them as good as their paper-bound cousins?</p>\n<p>To approach this question from an angle, it's worth taking a moment to think about what a map <em>is</em>. The map is a miniature that pivots around the body to represent the gigantic enormity of the physical world. The map shrinks the world down to a place it can be held in the hands and entirely seen with the eye. The map connects the vastness of reality to the body in way that can be handled - both physically and mentally.</p>\n<p>This creates tension with maps on the screen - especially the internet. The screen can <em>not</em> be touched, and the internet can not be related to the body. Phones and tablets mitigate this by bringing the screen closer, and moving to the size of the hand, but the core difficulty remains – if a map exists to scale down the enormity of the world to the size of the body, the internet itself has no boundaries or edges, and way to relate the screen to the body.</p>\n<p>Why is this connection between world and body important? The map provides context for understanding world-scale systems and landscape-scale concepts in a human-scale object. The map is a typology of communication that sits half way between the book and the visual art object. Both the book and the painting – or the print – are techniques that are used to provide access to concepts and ideas beyond the scale of a single individual. The book can contain centuries of intellectual thought, the painting can expose feelings and emotions that touch any number of people. If the map exists between these two mode of communication, that means that it's goal is to use a volume of thought, of data, of measurements to expose a broad, underlying concept. This can be an environmental truth (or the supposition of one) or a societal insight.</p>\n<p>The map does this through a very specific set of visual design tools with formal qualities that lend themselves to the problem at hand. These formalities are partly defined and structured by the technologies behind the production and distribution of the map.</p>\n<p>The first maps where hand drawn, and correspondingly have attributes of other hand-made visual works. With the advent of printing, maps started to be carved into wood, and duplicated. After wood, they came to etching, and after that lithography. In each of the print techniques, certain marks are favored and made possible through the medium of the matrix itself. Shared in all the print techniques, however, is the concept of plates – individual drawn layers for different colors. Equating individual plates to individual colors to individual <em>typological concepts</em> being shown on the map is a big reason why printed maps are so good.</p>\n<p>The careful and deliberate application of the maps formal characteristics to directly address the ideas and concepts to be communicated, the address the <em>use</em> of the map is what makes a map good.</p>\n<p>On the internet, we make maps differently. GIS data sets mean that maps can be made through mathematical and analytic tools – comparing sets of data, and creating new sets of data to answer questions. A robust and open set of public data means that there are map making tools which provide ways to style and combine existing content.</p>\n<p>These techniques utilize a relatively static map that purports to usefully describe the entire geography of the planet. All of the maps made are intended to sit within larger application, itself designed to solve a problem.</p>\n<p>Most of the time, these maps fail to provide meaningful connection to the concepts provided - they lose the essential aspect of the map that join world-to-human scales, instead operating at the world-to-world level. The endless map of the internet is itself incomprehensible to the body. The maps of the internet are simultaneously too broad and too simple, providing too much and too little. The problem the map is presenting itself as a solution too is usually far too muddy, and the resulting lack of clarity of purpose leads to a map with itself a lack of clarity.</p>\n<p>Looking to the main purpose of the map — simplicity, clarity, and the miniaturization of the world to pivot around the human hand — while using the formal visual tools and design lessons of the previous several centuries of paper maps – the balance of simplification and exaggeration, clear conceptual separations, and embracing the limitations of the object to provide focus.</p>\n<p>In all, the map must be appropriate and natural for it's intended use, playing its role in the overall purpose of the design solution.</p>\n"},{"meta":{"title":"Pixels don't matter.","slug":"pixels-dont-matter","date":"2013.10.21","description":"<p>They don't.</p>\n","collection":"texts","timestamp":1382338800000},"content":"<p>Talking about mobile design today, the conversation is couched in terms of &quot;pixel perfect&quot;, or designs are made by &quot;pixel pushers&quot;. This isn't a useful way to approach layout design.</p>\n<p>In the analog world we talk about the three fundamental components of print.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-two.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-two.png\"\n          data-sizes=\"auto\"\n          alt=\"Pigment, Matrix, Substrate\" />\n      </picture>\n    </figure>\n  </p>\n<p>I know what you're thinking right now; &quot;Wait, we're not analog here.&quot; We're digital. We need pixels. And that's true, we do need pixels. Let's reframe these principles:</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-three.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-three.png\"\n          data-sizes=\"auto\"\n          alt=\"Aesthetic, Conceptual, Material\" />\n      </picture>\n    </figure>\n  </p>\n<p>Thinking about our substrate, our materials are our devices, which render with pixels.</p>\n<h2>But our materials change -</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-four.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-four.png\"\n          data-sizes=\"auto\"\n          alt=\"Aesthetic, Conceptual, Material\" />\n      </picture>\n    </figure>\n  </p>\n<p>Our devices get more and more pixel density, their proportions change, technology improves, CSS abstracts a 'pixel' of its own, Android exists, and all of a sudden our materials get away from us and focusing on the pixel gives us an aneurysm.</p>\n<p>But don't worry, because:</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-one.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-one.png\"\n          data-sizes=\"auto\"\n          alt=\"Pixels Don't Matter\" />\n      </picture>\n    </figure>\n  </p>\n<h2>We still have two other layers to work through.</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-five.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-five.png\"\n          data-sizes=\"auto\"\n          alt=\"Pixels Don't Matter\" />\n      </picture>\n    </figure>\n  \nOur materials don't dictate our aesthetics nor or concept, but materials do inform our decisions. So think about pixels, but put them in the proper place - as the substrate of our work.</p>\n<h2>Measurement systems are abstract ideas -</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-six.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-six.png\"\n          data-sizes=\"auto\"\n          alt=\"measure\" />\n      </picture>\n    </figure>\n  \nAn inch is not a thing, a foot is not a thing. The pixel is a phsyical thing, and as a physical thing we've seen that it's prone to change.</p>\n<h2>The pixel is a terrible way to measure things.</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-seven.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-seven.png\"\n          data-sizes=\"auto\"\n          alt=\"pixel\" />\n      </picture>\n    </figure>\n  \nSo use another system to measure, any other system. The ratios, the proportions, the relationships and the hierarchies are important. That's where we do our work as designers.</p>\n<p>So don't stress pixels. Spare them a thought when you get started, and know that at some point in the process they'll make themselves apparent, and will need to be addressed. But the pixels will let you know, and when you need to deal with them they'll be there.</p>\n<h2>Show Time</h2>\n<p>These are some comps for the <a href=\"/projects/mapattack\">MapAttack</a> mobile app.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-eight.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-eight.png\"\n          data-sizes=\"auto\"\n          alt=\"Mapattack Comps\" />\n      </picture>\n    </figure>\n  </p>\n<p>Every element is specified by exact pixel counts. The typefaces are defined, the margins, the padding, and the border strokes are each precisely determined and labeled.\nDon't get the wrong idea - this isn't my hypocrisy you're seeing. These designs didn't <em>start</em> life here, this is just where they ended up.</p>\n<p>Before handing off my design, I basically ran pre-press on it. Our developers do need pixels - they need these values. They need them for execution and production. So we, as their designers, need to give them pixels. But we also need to give them more than just that.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img\n          class=\"figure-image lazyload\"\n          src=\"/180x180/figure-nine.png\"\n          data-optimumx=\"1.6\"\n          data-src=\"/{width}x5000/figure-nine.png\"\n          data-sizes=\"auto\"\n          alt=\"Mapattack Comps Closeup\" />\n      </picture>\n    </figure>\n  </p>\n<p>We need to give them the blueprints for how we <em>think</em> about the design. That means showing what's proportional as proportion, showing what's fluid as fluid. This gives our static comps the life they need to work for a huge range of devices.</p>\n<h2>Love the Pixel, let it be a Pixel.</h2>\n<p>Letting Pixels be beautiful, blocky, physical little things means using them to render our designs, not dictate them. It means using actual measurement systems to measure. And more importantly, it gives us a way to understand our layout better, to arrive at more considered designs, and to understand our designs as they live on actual hardware in the actual world.</p>\n"}]