[{"meta":{"title":"Towards an Ethical Web Development","description":"<p>Thinking about what it means for an in­dus­try to de­ter­mine a morale stan­dard of prac­tice.</p>\n","date":"2020.09.01","slug":"an-ethical-web-development","collection":"texts","timestamp":1598943600000},"content":"<p>Since the be­gin­ning of this sum­mer, with every­thing that’s de­scend­ing upon us with Covid-19 and the Black Lives Matter up­ris­ing, it feels like we are liv­ing through a mo­ment of moral ac­count­ing. In Portland, an­tifa is in the street in run­ning bat­tles with se­cret po­lice, ex­ploited work­ers are speak­ing up about the re­al­i­ties of our trea­sured restau­rant in­dus­try, busi­ness own­ers are shut­ting down and pulling a dis­ap­pear­ing act in­stead of fac­ing ac­count­abil­ity for their be­hav­ior. This has me think­ing about <em>my</em> in­dus­try, which we all know has mas­sive prob­lems around racism, techno-fas­cism, and rob­ber-baron level ex­ploita­tion. We’re still deal­ing with peo­ple who read <em>Snow Crash</em> and <em>Neuromancer</em> and think those books were de­scrip­tions of Utopias.</p>\n<p>There are a lot of peo­ple do­ing hard work right now to ad­dress these is­sues in the in­dus­try, work­ing to iden­tify how we can — as busi­nesses — move to­ward a more just sys­tem of work­ing, how we need to avoid bak­ing our prej­u­dices in to the AIs we build, and how the phys­i­cal un­der­pin­ning of the in­ter­net is built on an ex­ploita­tive and ex­trac­tive logic of global cap­i­tal. This is all good and nec­es­sary work. It makes me think though, about if there are dis­tinc­tions be­tween the craft and prac­tice of web de­vel­op­ment and the busi­ness logic and drive the in­dus­try. The in­dus­try vs the prac­tice - as in the tech­ni­cal skill of paint­ing vs the eco­nomic sys­tem of pa­tron­age. Clearly they are re­lated, and clearly our con­cep­tion of paint­ing has al­ways been tied to the eco­nomic struc­tures that make it a re­al­ity as a pro­fes­sion, but is there a way to think about an Ethical Web Development? It would be tied to run­ning an eth­i­cal busi­ness, and nec­es­sar­ily need to be sup­port­ing by an eth­i­cal eco­nomic sys­tem, but how could we ar­tic­u­late what it would look like the per­form the craft and prac­tice of web de­vel­op­ment eth­i­cally? What would an an­tiracist and an­tifas­cist web de­vel­op­ment prac­tice look like?s</p>\n<p>Recently we were vis­it­ing my par­ents in Corvallis, and as it hap­pens my moms part­ner is <a href=\"https://www.michaelpnelson.com/biography\">Michal Nelson</a> - a moral philoso­pher who spe­cial­izes in eco­log­i­cal and en­vi­ron­men­tal ethics. So I asked him if there were any frame­works for de­ter­min­ing if a given in­dus­try (his dis­ci­pline fo­cuses on forestry and re­source man­age­ment for ex­am­ple) was act­ing<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>ethically”. How does an in­dus­try set its own stan­dard of eth­i­cal be­hav­ior? He ex­plained that act­ing<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>ethically” is es­sen­tially just stay­ing in­ter­nally con­sis­tent to a set of val­ues that you’ve ar­tic­u­lated — and in this way be­ing<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>ethical” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>sustainable” does­n’t in­her­ently hold any value. Many peo­ple or en­ti­ties agree on the im­por­tance of act­ing eth­i­cally, but their base­line for what the core con­cepts ac­tu­ally mean, what they are talk­ing about when they mean<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>harm” for ex­am­ple can vary wildly.</p>\n<p>An eth­i­cal frame­work is a tool to re­duce the pos­si­bil­ity space - to help de­ter­mine what choices avail­able should be taken rather than could be taken. It cre­ates a heuris­tic for de­ter­min­ing which ac­tions will cul­ti­vate an en­vi­ron­ment that sup­ports a set of de­sired val­ues. Determining eth­i­cal con­sid­er­a­tions be­comes a de­sign prob­lem — what val­ues do we want to see in the world? What out­comes do we want and why? Who are we con­sid­er­ing, who are we not con­sid­er­ing? What are the edges and the lim­i­ta­tions be­yond which we de­cide not to con­cern our­selves?</p>\n<p>There are many ethics avail­able to work from, and con­ﬂat­ing a sin­gle ethic with the en­tire range of pos­si­ble ethics can be a prob­lem. If we as­sume that a util­i­tar­ian, in­di­vid­u­al­ist ethic is the <em>only</em> pos­si­ble ethic we can work with (cough cough eco­nom­ics cough cough) it will nec­es­sar­ily pre­clude a whole range of out­comes that just aren’t pos­si­ble to ar­rive at from those start­ing con­di­tions. Another ethic based on com­pas­sion, an­i­mism, and col­lec­tivism would start with wildly dif­fer­ent ax­ioms and nat­u­rally ar­rive at dif­fer­ent out­comes. This de­bate and ten­sion is at play <em>to­day</em> among the peo­ple who study and try and out­line what a sus­tain­able fu­ture of for­est man­age­ment is - it’s an on­go­ing con­ver­sa­tion (argument?) be­tween peo­ple who don’t share the same ba­sic ax­ioms around what they are try­ing to talk about.</p>\n<p>Perhaps the core of any ethic is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>harm re­duc­tion”. We can see this in the Hippocratic oath and the med­ical ethic — ﬁrst do no harm. The is­sue is that<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>harm” is not a nat­ural, dis­cov­er­able prop­erty of the nat­ural world. Harm is nec­es­sar­ily framed as a value judg­ment, the corol­lary to the idea of<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>good in the ex­panded ﬁeld”. We can out­line the struc­tural re­quire­ments and de­f­i­n­i­tions of harm, and use those value judg­ments to iden­tify harm in the world, but it’s still a hu­man judge­ment sys­tem be­ing used to sort and or­der the world. The med­ical world to il­lus­trate this, we can look at the con­tem­po­rary pre­rog­a­tive of<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>informed con­sent”. We now de­ﬁne lack agency over med­ical de­ci­sions as a harm done to an in­di­vid­ual. This has not al­ways been the case.</p>\n<p>This starts to get at the eco­log­i­cal con­nec­tions be­tween the craft and the busi­ness and web de­vel­op­ment - we can eas­ily frame ac­ces­si­bil­ity as a fun­da­men­tal re­quire­ment of an eth­i­cal web de­vel­op­ment prac­tice in that it re­duces the harm of ex­clud­ing in­di­vid­u­als from our work. But we can ar­rive at that prin­ci­ple from the logic of many dif­fer­ent ethics, some of which could be wildly con­tra­dic­tory. From a util­i­tar­ian, ef­ﬁ­ciency and proﬁt max­i­miz­ing ethic, cre­at­ing ac­ces­si­ble web apps is eth­i­cal be­cause not do­ing so would be to leave money on the table. From a hu­man­is­tic and com­pas­sion­ate ethic, it’s ac­ces­si­ble be­cause it fos­ters in­clu­sion and eq­uity. So we see ac­ces­si­bil­ity and a clearly de­ﬁned eth­i­cal prac­tice, but that does­n’t mean that we all agree on <em>why</em> ac­ces­si­bil­ity is eth­i­cal.</p>\n<p>I think in or­der for us to de­ﬁne what we mean when we try and de­ﬁne how our in­dus­try can be eth­i­cal, we need to work through a few steps:</p>\n<ol>\n<li>What val­ues do we want to en­cour­age and fos­ter in the en­vi­ron­ment?</li>\n<li>Where do we draw the dis­tinc­tion be­tween things we are con­cerned with and things we are not?</li>\n<li>How do we de­ter­mine who is ef­fected by our ethic and who is not?</li>\n<li>How do we then de­ﬁne the rules for de­ter­mine which ac­tions we should take and which ac­tions we should not take?</li>\n</ol>\n<p>If, as an in­dus­try and as in­di­vid­u­als, we can have these con­ver­sa­tions then we can start to come to terms with what it means to work every day in a world where we are ac­tively sup­port­ing and en­rich­ing the worlds ﬁrst tril­lion­aire. Is an eth­i­cal web de­vel­op­ment one where we must boy­cott AWS? How do we feel about data cen­ters in gen­eral? What about ISPs, what about un­der­wa­ter ca­bles?</p>\n<p><a href=\"https://www.eater.com/21398969/future-co-op-worker-owned-restaurants-ethical-business\">Jaya Saxena’s re­cent piece in Eater</a> clearly iden­ti­ﬁes the prob­lems as­so­ci­ated with act­ing eth­i­cally as an in­di­vid­ual — or even an in­dus­try — while re­main­ing a part of a so­ci­ety that sys­tem­i­cally un­der­mines that ethic through struc­tural de­sign.</p>\n<blockquote>\n<p>Building an eq­ui­table restau­rant, a place where all work­ers are paid fairly, have ben­e­ﬁts, and can work in an anti-dis­crim­i­na­tory en­vi­ron­ment, is go­ing to take a near-un­do­ing of the way most restau­rants are run.</p>\n</blockquote>\n<p>Saxena ex­am­ines some cur­rent mod­els for em­ployee-owned and co­op­er­a­tive busi­nesses, and pri­vately owned busi­ness that ac­tively choose equal­ity and com­mu­nity over proﬁt. She iden­ti­ﬁes that is a com­pro­mise in these en­ter­prises, and sums up the sys­tem is­sues at hand by con­cussing that<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>… when it comes to restau­rants, it’s hard to change one thing un­less you’re chang­ing every­thing.”</p>\n<p>There are sys­temic forces at work that pre­vent any in­di­vid­ual, or even any small com­mu­nity from truly reach­ing a place of eth­i­cal be­hav­ior. This makes me think that there has to be a split be­tween<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>acting eth­i­cally” and<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>being eth­i­cal”. We can all act eth­i­cally, work­ing our way up­stream against the sys­tem forces ar­rayed against us, but that’s no guar­an­tee that we will, at the end of the day, be eth­i­cal.</p>\n<p>The es­say iden­ti­ﬁes one restau­rant and farm that solves their eth­i­cal cri­sis by char­ing $195 per per­son per meal, and frames that as a choice that <em>con­sumers</em> get to make. This is strik­ing. We live in a time of un­prece­dented ef­ﬁ­ciency, un­be­liev­able abun­dance, and mas­sive wealth but if a <em>restau­rant</em> is called to truly ac­count for its ex­ploita­tion to charge its true price, it’s im­me­di­ately un­ten­able. This feels like it must be true across many in­dus­tries&thinsp;&mdash;&thinsp;Uber would rather cease ser­vice in California than treat it’s dri­vers like em­ploy­ees. What would it take to truly un­der­stand what the net­work of costs, val­ues, debts, and the real price of things?</p>\n<p>Would an eth­i­cal web de­vel­op­ment be able to ac­count for that cost and still be able to be a busi­ness in our so­ci­ety? During my early courses in ﬁne art print­mak­ing at University, I was taught that a blank sheet of pa­per had value on its own. Not only the price at­tached to it (steep, for nice pa­per) but also the work and craft that went in to mak­ing it. One had to be sure that the im­age we we’re im­press­ing on the blank sheet of pa­per added value to it that than re­duced it. Our work had to be more valu­able than the pa­per, and if it was­n’t we did­n’t make it.</p>\n<p><a href=\"http://lifewinning.com/tag/writes/\">Ingrid Burrington</a> has writ­ten ex­ten­sively about the phys­i­cal re­al­i­ties of the in­ter­net, and what it means to turn the raw stuff of the earth into the ob­jects we need to make com­put­ers. She’s even turned com­put­ers back into <a href=\"https://twitter.com/lifewinning/status/1049653649562132482\">raw stuff</a>. It’s hard to con­front the re­al­ity of an open pit lithium mine and con­clude that needs must for bet­ter bat­ter­ies.</p>\n<p>Can web de­vel­op­ment be eth­i­cal? Maybe not. But that does­n’t mean that we don’t have an oblig­a­tion to act eth­i­cally. If we can ar­tic­u­late the ethic we want to have in our in­dus­try, and stay in­ter­nally con­sis­tent to those prin­ci­ples in an ef­fort to man­i­fest val­ues we want in the world, maybe that’s enough. Or a start any­way.</p>\n"},{"meta":{"title":"Fun With JSON-LD","slug":"fun-with-json-ld","description":"<p>Learning about JSON-LD is all about and why we should.</p>\n","date":"2020.08.25","collection":"texts","timestamp":1598338800000},"content":"<p>Working with <a href=\"https://www.adamriemer.me/\">Adam Riemer</a> on SmugMug’s <span class=\"small-caps\">SEO</span> has been a re­ally il­lu­mi­nat­ing ex­pe­ri­ence. <span class=\"small-caps\">SEO</span> con­sult­ing has al­ways been ﬂagged in my mind as<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Snake Oil Business”, but Adam re­ally is the best in the ﬁeld. Almost all of his <span class=\"small-caps\">SEO</span> sug­ges­tions fo­cus on per­for­mance and ac­ces­si­bil­ity, and he has some clear, hard met­rics to de­ﬁne<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>good”. This squares with my fun­da­men­tal un­der­stand­ing of good <span class=\"small-caps\">SEO</span> prac­tices, and has broad­ened my hori­zons and un­der­stand­ing of of the prac­tice.</p>\n<p>Something that Adam in­tro­duced me to is JSON-LD&thinsp;&mdash;&thinsp;a way of cre­at­ing struc­tured meta­data for pages that’s more ex­plicit that mi­cro­data for­mats. Here’s what I’ve learned about JSON-LD so far.</p>\n<p>JSON-LD is Google’s pre­ferred for­mat for ac­cu­rately and suc­cinctly struc­tur­ing meta­data for pages. This gives them in­sight into what’s on your page and why, and they use The Algorithm to in­ter­act and con­sume this data. Using their stan­dards gives you the <em>op­por­tu­nity</em> to get top, fancy search re­sults but there’s no guar­an­tee of that. The best thing to do is to use your struc­tured data to give the best, more ac­cu­rate, and com­plete pic­ture of what con­tent your page has for your au­di­ence. Trying to game <span class=\"small-caps\">SEO</span> here is prob­a­bly go­ing to back­ﬁre, just de­scribe things as they are as clearly as pos­si­ble.</p>\n<p>The pri­mary <em>pur­pose</em> of struc­tured data is to cre­ate a ma­chine-read­able and al­go­rithm friendly meta­data for your con­tent. This al­lows the con­tent to be con­sumed by the crawlers and the ro­bots, and join in the mesh of con­tent that Google ex­poses to users when they per­form searches or ask ques­tions of it.</p>\n<p>Clearly this is a dou­ble-edged propo­si­tion. By us­ing struc­tured data you’re ex­plic­itly buy­ing in to the ecosys­tem that Google is cre­at­ing, and al­low­ing your con­tent to be trawled and used and un­der­stood how­ever they want. You un­doubtable end up pro­vid­ing value to Google in ex­cess to what they are pro­vid­ing to you. Not to men­tion par­tic­i­pat­ing in the pro­ject of mak­ing the world ma­chine-read­able, which has it’s own philo­soph­i­cal freight.</p>\n<p><a href=\"https://schema.org/\">Schema.org</a> has a lot of data types that might be ap­pro­pri­ate for your pro­ject: Articles, Books, Breadcrumbs, Carousel, Course, Critic Review, Dataset, Event, How-to, Local Business, Movie, Podcast, Product, Software App, and Video are all ones that look in­ter­est­ing to me.</p>\n<p>For some­thing like this site, we’re us­ing pretty much en­tirely <code>Website</code> and <code>Article</code>&thinsp;&mdash;&thinsp;and con­nect them with a <code>CollectionPage</code> and a <code>Person</code> who is me! Maybe some of the art will be a <code>CreativeWork</code>.</p>\n<p>Some in­for­ma­tion on these types:</p>\n<ul>\n<li>Article: <a href=\"https://schema.org/Article\">https://​schema.org/​Ar­ti­cle</a></li>\n<li>Person: <a href=\"https://schema.org/Person\">https://​schema.org/​Per­son</a></li>\n<li>Collection Page: <a href=\"https://schema.org/CollectionPage\">https://​schema.org/​Col­lec­tion­Page</a></li>\n<li>Creative Work: <a href=\"https://schema.org/CreativeWork\">https://​schema.org/​Cre­ative­Work</a></li>\n<li>Web Site: <a href=\"https://schema.org/WebSite\">https://​schema.org/​Web­Site</a></li>\n</ul>\n<p>Lets work through <a href=\"https://developers.google.com/search/docs/data-types/article\">Google’s ex­am­ple of an ar­ti­cle</a>, maybe for this ar­ti­cle!</p>\n<p>Here’s the <code>script</code> tag that is home to our struc­tured data:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span>\n…\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>We ﬁll it with a <span class=\"small-caps\">JSON</span> ob­ject that de­scribes our data struc­ture:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>\n}\n</code></pre>\n<p>The <code>@context</code> key clues the ro­bot in to the data de­f­i­n­i­tion we’re go­ing to be us­ing, which is the <code>schema.org</code> de­f­i­n­i­tions. The <code>@type</code> tag as­so­ci­ates the fol­low­ing data with the pre-de­ﬁned struc­ture. From there on it’s rel­e­vant data! <code>headline</code>, <code>datePublished</code> and <code>dateModified</code> are all di­rectly pulled from the con­tent it­self. In out case our data looks like this:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n  <span class=\"hljs-attr\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n  <span class=\"hljs-attr\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Fun With JSON-LD&quot;</span>,\n  <span class=\"hljs-attr\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-12T08:00:00+08:00&quot;</span>\n}\n</code></pre>\n<p>Open ques­tion: <code>BlogPosting</code> or <code>Article</code>? Im go­ing to stick with <code>BlogPosting</code> since these texts are re­ally just that. I would use <code>Article</code> if I was writ­ing a news piece or a re­view, or some­thing maybe more schol­arly.</p>\n<p>The last re­quired ﬁeld is an <code>image</code>:</p>\n<blockquote>\n<p>For best re­sults, pro­vide mul­ti­ple high-res­o­lu­tion im­ages (minimum of 300,000 pix­els when mul­ti­ply­ing width and height) with the fol­low­ing as­pect ra­tios: 16x9, 4x3, and 1x1.</p>\n</blockquote>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n  ]\n}\n</code></pre>\n<p>This means that cre­at­ing thumb­nails for every Article is im­por­tant, and those im­ages need to ex­ist on the page in a way that user can see.</p>\n<p>For this site, the main use of these im­ages is go­ing to be for shar­ing thumb­nails. The fact that the im­age needs to be on the pages is in­ter­est­ing, since that re­ally in­ﬂu­ences the de­sign of the page. I’ve found that cre­at­ing the ne­ces­sity for a promi­nent thumb­nail or hero im­age that ac­com­pa­nies each ar­ti­cle is a recipe for a) not writ­ing ar­ti­cles and b) bland stock pho­tog­ra­phy. I want to avoid both. That means for this site I’m go­ing to do il­lus­trated im­ages, small sketches and mo­tif ex­plo­rations that may or may not il­lus­trate the ar­ti­cle, and at­tach it to the <em>bot­tom</em> of the ar­ti­cle.</p>\n<p>There are two other sec­tions I want to look at, even though they are not re­quire­ments ac­cord­ing to Google. These are the <code>author</code> and the <code>publisher</code> ﬁelds. The goal of us­ing these ﬁelds is to cre­ate an as­so­ci­a­tion be­tween you and your work; or in the case of the <code>publisher</code> ﬁeld be­tween an im­print en­tity and the cre­ative works they’ve pub­lished. In our use case for this site, my goal is to cre­ate a ma­chine-read­able en­tity that is<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>Nikolas Wise’ and at­tach my ar­ti­cles and my work to that, in or­der to cre­ate a co­her­ent en­tity that is ex­posed to the broader web.</p>\n<p>The <code>author</code> ﬁeld is a <code>Person</code> or an <code>Organization</code>, the <code>publisher</code> ﬁeld is an <code>Organization</code>. Lets start with <code>Person</code>:</p>\n<blockquote>\n<p>A per­son (alive, dead, un­dead, or ﬁc­tional).\n<a href=\"https://schema.org/Person\">https://​schema.org/​Per­son</a></p>\n</blockquote>\n<p>It gets added to our LSON-LD like this:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t  …\n  }\n}\n</code></pre>\n<p>There are a lot of prop­er­ties in this schema, like <code>deathPlace</code> and <code>knows</code>. One could re­ally get into this and make it a very ro­bust and com­plete data ob­ject, but I’m not sure how much value that would bring at the end of the day. There’s a ﬁne line be­tween fol­low­ing specs and best prac­tices to achieve a goal and tick­ing boxes to struc­ture our lives solely in or­der to make them leg­i­ble to the al­go­rithm. I guess we each de­cide where that line is for our­selves.</p>\n<p>For me, I’m go­ing to stick with <code>name</code>, <code>url</code>, <code>image</code>, <code>jobTitle</code>, <code>knowsLanguage</code>, and <code>sameAs</code>. Although <code>publishingPrinciples</code> seems in­ter­est­ing, and I might write one of those.</p>\n<p>Most of the ﬁelds are sim­ple text strings, and can get ﬁlled out like so:</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: …,\n  }\n}\n</code></pre>\n<p>The lan­guage codes are from the <a href=\"https://tools.ietf.org/html/bcp47\">lan­guage code spec</a>, and could also be <a href=\"https://schema.org/Language\">lan­guage</a> schema ob­jects. The job ti­tle could be a <a href=\"https://schema.org/DefinedTerm\">Deﬁned Term</a> schema ob­ject.</p>\n<p>The <code>sameAs</code> key is an in­ter­est­ing one, it’s ei­ther a <span class=\"small-caps\">URL</span> or an ar­ray of URLs that con­nect this <code>@person</code> with other parts of the web that are <em>also</em> that <code>@person</code>.</p>\n<pre><code>{\n\t…\n  <span class=\"hljs-string\">&quot;@person&quot;</span>: {\n\t  …\n\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t],\n  }\n}\n</code></pre>\n<p>This will con­nect<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>me” with this site and my twit­ter, github, in­sta­gram, and linkedin pro­ﬁles. Those are the pages that I want to the al­go­rithm to as­so­ci­ate with<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>me”.</p>\n<p><code>@organization</code> is sim­i­lar to <code>@person</code> in a lot of ways, and the fun­da­men­tal idea is the same. The goal is to cre­ate a sin­gle en­tity that the al­go­rithm can con­nect dis­parate pages and items too. I’m not go­ing to set of an <code>@organization</code> here, but the the <a href=\"https://schema.org/Organization\"><code>@organization</code> schema type</a> has the spec for the ob­ject.</p>\n<p>So that’s it! That means the en­tire JSON-LD for this ar­ti­cle&thinsp;&mdash;&thinsp;and there­for the rest of the texts as well, looks like this:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;application/ld+json&quot;</span>&gt;</span><span class=\"javascript\">\n\t{\n\t  <span class=\"hljs-string\">&quot;@context&quot;</span>: <span class=\"hljs-string\">&quot;https://schema.org&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Article&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;headline&quot;</span>: <span class=\"hljs-string\">&quot;Article headline&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;datePublished&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;dateModified&quot;</span>: <span class=\"hljs-string\">&quot;2020-08-25T16:42:53.786Z&quot;</span>,\n\t  <span class=\"hljs-string\">&quot;image&quot;</span>: [\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/1x1/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/4x3/photo.jpg&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;https://example.com/photos/16x9/photo.jpg&quot;</span>\n\t  ],\n\t  <span class=\"hljs-string\">&quot;author&quot;</span>: {\n\t\t  <span class=\"hljs-string\">&quot;@type&quot;</span>: <span class=\"hljs-string\">&quot;Person&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Nikolas Wise&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://nikolas.ws&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;image&quot;</span>: <span class=\"hljs-string\">&quot;https://photos.smugmug.com/Portraits/i-ThnJCF5/0/f9013fdc/X4/wise-X4.jpg&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;jobTitle&quot;</span>: <span class=\"hljs-string\">&quot;Web Developer&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;knowsLanguage&quot;</span>: <span class=\"hljs-string\">&quot;en, fr&quot;</span>,\n\t\t\t<span class=\"hljs-string\">&quot;sameAs&quot;</span>: [\n\t\t\t\t<span class=\"hljs-string\">&quot;https://twitter.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://github.com/nikolaswise&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.instagram.com/nikolaswise/&quot;</span>,\n\t\t\t\t<span class=\"hljs-string\">&quot;https://www.linkedin.com/in/nikolas-wise-6b170265/&quot;</span>,\n\t\t\t],\n\t  }\n\t}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n"},{"meta":{"title":"Pressing Words, With Your Friend, Wordpress","slug":"wordpress-but-not-terrible","date":"2018.10.24","description":"<p>A con­tem­po­rary de­vel­op­ers guide to build­ing things on Wordpress 4.x and not hav­ing it be ter­ri­ble.</p>\n","collection":"texts","timestamp":1540364400000},"content":"<p>TL:DR; <a href=\"https://github.com/nikolaswise/nanobox-wordpress-1\">Start here</a>. Install <a href=\"https://nanobox.io/\">this thing</a> and con­nect it to your ac­count on <a href=\"https://www.digitalocean.com/\">here</a>. Buy a li­cense of <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">this (it’s worth it)</a>. Read some docs for <a href=\"https://www.upstatement.com/timber/\">this</a> and start build­ing. Wordpress 5 and Gutenberg will prob­a­bly break all of this ex­cept the en­vi­ron­ments.</p>\n<p>When I ﬁrst started work­ing as a de­vel­oper, Wordpress was <em>the</em> preva­lent plat­form for pretty much any pro­ject. Ten years later and … Wordpress is still pretty much most of the in­ter­net. In gen­eral, Wordpress will be my last choice of a plat­form. I pre­fer to build sta­tic sites, use a head­less <span class=\"small-caps\">CMS</span>, or al­most any­thing else at all.</p>\n<p>That said, as the Technical Director at Fuzzco — a de­sign stu­dio that re­lies al­most ex­clu­sively on Wordpress for their web­sites — Wordpress was hap­pen­ing. Fuzzco is rare among stu­dios in that we man­age and host pro­jects for our clients, and of­ten have main­te­nance rid­ers that can last for years. This means that in the course of a year, not only did we build a half dozen new pro­jects on Wordpress, but we main­tained and triaged is­sues on over 100 legacy pro­jects.</p>\n<p>Very quickly I re­al­ized I had one op­tion: <em>make Wordpress not ter­ri­ble.</em></p>\n<h2>Terrible is pretty harsh</h2>\n<p>If you’re com­fort­able with Wordpress, you might ﬁnd some ﬁght­in’ words here. What’s my prob­lem with Wordpress and what am I try­ing to solve for? My biggest is­sue with Wordpress de­vel­op­ment as I’ve en­coun­tered it in the past is a lack of clar­ity around the re­quire­ments of the en­tire sys­tem. What does the pro­ject need to run in an en­vi­ron­ment, and why? How do we move from a repos­i­tory to a lo­cal en­vi­ron­ment and start work­ing on a code­base? How does that code­base get de­ployed to a server?</p>\n<p>I’ve seen Wordpress sys­tems that are frozen in time in 2006 — <span class=\"small-caps\">FTP</span> to the server and edit a <span class=\"small-caps\">CSS</span> ﬁle on pro­duc­tion, or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>deploy” your theme by up­load­ing a <code>.zip</code>. I’m in­ter­ested in how we can lower the cog­ni­tive over­head for get­ting a Wordpress pro­ject up and run­ning, and join in with pre-pro­cess­ing, com­pil­ing, con­tainer­iz­ing, test­ing, and all the re­ally ex­cel­lent things that we’ve come to ex­pect from our web stacks over the past few years.</p>\n<p>Another is­sue I have with Wordpress is its com­mit­ment to auto-mag­i­cal routes and ren­der­ing tem­plates with ob­scure and com­pli­cated <code>.php</code> pat­terns that ba­si­cally con­cate­nate strings. I’m in­ter­ested in ex­plicit routes — ei­ther hard-coded or pa­ra­me­ter­ized — and sep­a­rat­ing con­cerns be­tween logic and tem­plate.</p>\n<p>A lot of this boils down to a dis­agree­ment be­tween what Wordpress thinks a site should be and what I end up us­ing it for. Wordpress as de­signed dis­tin­guishes be­tween your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>site” and your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>theme”. Your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>site” is the con­tent in the data­base, the op­tions you’ve saved, and the menus and wid­gets you’ve in­stalled. It ex­pects<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>themes” to be pre­sen­ta­tions of this real web­site stuff. This model of web­sites per­pet­u­ates that<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>design” is some­thing that can be ap­plied over a web­site, a kind of dress­ing up of the real things. This is the in­verse, and per­haps a corol­lary to, the con­cept that de­sign­ing a web­site is just de­cid­ing what it looks like. It’s an idea that lives within the sys­tem of si­los be­tween de­sign and de­vel­op­ment, and that we can<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>design” a web­site in Photoshop or Sketch and hand off the comps to a de­vel­oper to build it. Which is how a lot of Wordpress pro­jects are built.</p>\n<p>In short, <a href=\"/texts/how-to-design-while-developing/\">I dis­agree</a> with this con­cept of web­sites. My po­si­tion is that de­sign­ing a web­site is both how it looks, how it works, and how the data and struc­tures are com­posed. Taking this ap­proach, con­trol­ling the ob­ject mod­els, the in­for­ma­tion ar­chi­tec­tures, and the tem­plates are all of equal im­por­tance. In my line of work, a Wordpress theme can not be ap­plied to any other site than the one that it was de­signed for, a site where the struc­ture was de­signed for the theme.</p>\n<h2>So why use Wordpress?</h2>\n<p>There are still a num­ber of re­ally good, com­pelling rea­sons to use Wordpress as a plat­form for build­ing web­sites. It’s got a ro­bust built-in com­ment­ing sys­tem with user ac­counts. It’s re­ally good for things that are shaped like blogs. It’s got a huge, well-main­tained ecosys­tem of plu­g­ins. It’s free. And since it’s most of the Internet, clients are re­ally, re­ally com­fort­able with it.</p>\n<p>There are a cou­ple of rea­sons <em>not</em> to use Wordpress right now. Mostly these cen­ter around the im­pend­ing re­lease of Wordpress 5.0 and the Gutenberg ed­i­tor, which has a num­ber of con­cerns around plu­gin com­pat­i­bil­ity and ac­ces­si­bil­ity for au­thors.</p>\n<p>But that’s okay, since we’ve de­cided to use Wordpress 4.x. As we all know, pick­ing a ver­sion of Wordpress and then never up­grad­ing it is one of the time hon­ored tra­di­tions of Wordpress de­vel­op­ment.</p>\n<h2>How does this work even</h2>\n<p>Let’s start at the end.</p>\n<p>We’re go­ing to be host­ing our pro­duc­tion Wordpress site on a <a href=\"https://www.digitalocean.com/\">Digital Ocean</a> droplet — the <a href=\"https://www.digitalocean.com/pricing/\">small­est</a> one they have — for $5 per month. Depending on the pro­ject life­cy­cle, we can set up more droplets for a stag­ing server and a de­vel­op­ment server. At Fuzzco we used dev servers to show sites to the in­ter­nal team, stag­ing servers to show sites to the client, and pro­duc­tion servers to show sites to the pub­lic.</p>\n<p>I don’t know about you, but I per­son­ally don’t su­per love man­ag­ing my vir­tual pri­vate servers man­u­ally. In or­der to de­ploy our code­bases to Digital Ocean we’ll use the phe­nom­e­nal tool <a href=\"https://nanobox.io/\">Nanobox</a>. Nanobox is an op­er­a­tions layer that han­dles con­tainer­iz­ing ap­pli­ca­tions and de­ploy­ing them ag­nos­ti­cally to a cloud ser­vice provider. Nanobox will de­ploy our code from the com­mand line to any one of our droplets.</p>\n<p>Nanobox will also con­tainer­ize and run an ap­pli­ca­tion in a vir­tual ma­chine <em>lo­cally</em>. This means we’ll use it to run our de­vel­op­ment en­vi­ron­ment, and en­sure that all of our en­vi­ron­ments are iden­ti­cal. No more wor­ry­ing about <span class=\"small-caps\">PHP</span> ver­sions and ex­ten­sions and plu­g­ins. No more run­ning <span class=\"small-caps\">MAMP</span> or MySQL or Apache or what­ever on your lo­cal ma­chine be­fore any­thing works. Nanobox de­ﬁnes the server in a <code>.yaml</code> ﬁle, and it will al­ways be the same. It also han­dles all the sync­ing be­tween our lo­cal disk and our vir­tual en­vi­ron­ment.</p>\n<p>So now that we know how our code is go­ing from lo­cal to pro­duc­tion, we can think for a sec­ond about <em>how</em> it’s go­ing to do that, and how we’re go­ing to man­age our data.</p>\n<p>The data­base on the pro­duc­tion server is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>canonical”. That means that the data­base the client in­ter­acts with is the one true data­base, and we must treat it with care and at­ten­tion. We’ll never change that data­base our­selves, and we’ll move that data­base <em>down­stream</em> from pro­duc­tion to stag­ing to dev to lo­cal in or­der to de­velop against our real data. Importantly, we don’t want to mi­grate the data­base man­u­ally ei­ther. It’s a lit­tle ex­pen­sive but us­ing <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/pricing/\">Migrate <span class=\"small-caps\">DB</span> Pro</a> is an in­cred­i­ble re­source for this part. I guess one could also look into <a href=\"https://github.com/wp-sync-db/wp-sync-db\">al­ter­na­tives</a> for per­sonal pro­jects.</p>\n<p>The canon­i­cal <em>code­base</em> lives in ver­sion con­trol, and moves the other di­rec­tion. From Github to lo­cal to dev to stag­ing to pro­duc­tion, amen. The only things we need to track in ver­sion con­trol are what makes our pro­ject unique. Practically, this means we need to track our theme and our plu­g­ins. Wordpress core ﬁles are not spe­cial, and we should not ﬁll our repos­i­to­ries with them.</p>\n<h2>Getting started</h2>\n<p>At this point it’s worth <a href=\"https://docs.nanobox.io/install/\">get­ting started with Nanobox</a>. I back the con­tain­ers with <a href=\"https://docs.nanobox.io/install/#lightweight-vm-virtualbox\">VirtualBox</a>, since at the time I started this it was slightly more sta­ble than Docker on MacOS High Sierra. Once Nanobox &amp; Virtualbox/Docker is in­stalled, set up <a href=\"https://docs.nanobox.io/providers/hosting-accounts/digitalocean/\">Digital Ocean as your provider</a>. Once that’s done, we have every­thing we need to get started!</p>\n<p>I’ll be talk­ing through a pro­ject I built in or­der to fa­cil­i­tate build­ing other pro­jects. This will be more in­tense than you might need for a sin­gle build, but this was de­signed a tool that any­one can use to get started quickly. Here’s the ba­sic struc­ture of our repo:</p>\n<pre><code>📁 <span class=\"hljs-string\">/project-name</span>\n⮑ 📄 <span class=\"hljs-string\">.gitignore</span>    <span class=\"hljs-comment\"># includes /wp</span>\n⮑ 📄 package.json  <span class=\"hljs-comment\"># tooling lives here</span>\n⮑ 📄 readme.md     <span class=\"hljs-comment\"># be nice, write docs    </span>\n⮑ 📁 theme         <span class=\"hljs-comment\"># our theme codebase</span>\n⮑ 📁 plugins       <span class=\"hljs-comment\"># vendor plugins</span>\n⮑ 📁 scripts       <span class=\"hljs-comment\"># some helpers</span>\n</code></pre>\n<p>The crux of the pro­ject is our <code>boxfile.yml</code> con­ﬁg­u­ra­tion ﬁle. This is what Nanobox uses to cre­ate our con­tain­ers. It looks like this!</p>\n<pre><code><span class=\"hljs-comment\"># /boxfile.yml                </span>\n<span class=\"hljs-attr\">run.config:</span>                    <span class=\"hljs-comment\"># </span>\n  <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">php</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">engine.config:</span>               <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-string\">php-7.0</span>           <span class=\"hljs-comment\"># Defines PHP version</span>\n    <span class=\"hljs-attr\">document_root:</span> <span class=\"hljs-string\">&#x27;wp/&#x27;</span>       <span class=\"hljs-comment\"># Dir to serve app from</span>\n    <span class=\"hljs-attr\">extensions:</span>                <span class=\"hljs-comment\"># PHP extensions we need</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gd</span>                     <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mysqli</span>                 <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">curl</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zlib</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ctype</span>                  <span class=\"hljs-comment\">#</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">web.wp:</span>                        <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">start:</span> <span class=\"hljs-string\">php-server</span>            <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">network_dirs:</span>                <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">data.storage:</span>              <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wp/wp-content/uploads/</span> <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.db:</span>                       <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/mysql:5.6</span>     <span class=\"hljs-comment\"># Nanobox DB magic</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.storage:</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/unfs:0.9</span>      <span class=\"hljs-comment\">#</span>\n</code></pre>\n<p>As noted above, we’ll be serv­ing our en­tire in­stal­la­tion of Wordpress in the <code>/wp</code> di­rec­tory. This will hold all the Wordpress core ﬁles and com­piled theme code, none of of which we need or want in ver­sion con­trol. As such, make sure this is listed along­side <code>node_modules</code> in the <code>.gitignore</code>.</p>\n<p>Since we’ve de­cided that we don’t want to track these ﬁles, but we need them to ac­tu­ally have a pro­ject, we can write a helper script to take care of the gap be­tween those two ideas.</p>\n<p>Here are the scripts we’re go­ing to write to help us han­dle this process:</p>\n<pre><code>📁 /<span class=\"hljs-keyword\">project</span>-name\n⮑ 📁 scripts\n   ⮑ 📄 check-<span class=\"hljs-keyword\">install</span>.sh <span class=\"hljs-comment\"># Installs Wordpress core files.</span>\n   ⮑ 📄 init.sh          <span class=\"hljs-comment\"># Runs our setup helper.</span>\n   ⮑ 📄 prestart.sh      <span class=\"hljs-comment\"># Checks if we need to init.</span>\n   ⮑ 📄 setup.js         <span class=\"hljs-comment\"># Cute lil&#x27; CLI helper.</span>\n</code></pre>\n<p>The ﬁrst thing we’ll do is write a script that checks if <code>/wp</code> ex­ists. If it does­n’t, throw an er­ror that we need to ini­tial­ize the pro­ject since we don’t have any of the core ﬁles we need.</p>\n<pre><code><span class=\"hljs-comment\"># prestart.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;Project not initialized: Run `$ npm run init`&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span>\nfi\n</code></pre>\n<p>I’m call­ing this <code>prestart</code> be­cause I want to run it be­fore <code>npm start</code>. Many times I’ll be on au­topi­lot, and af­ter cloning a repo sim­ply run <code>npm install</code> and <code>npm start</code>. This in­ter­rupts that process and lets me know I need a third step, <code>npm run init</code>. Let’s put this in our <code>package.json</code> scripts:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;init&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/init.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;prestart&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/prestart.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;npm run dev&quot;</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>We’ll get to our dev tool­ing later. Lets take a look at what our <code>init.sh</code> script does:</p>\n<pre><code><span class=\"hljs-comment\"># init.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">./scripts</span>/setup.js  \n</code></pre>\n<p>Not much! This just runs our setup <span class=\"small-caps\">CLI</span> helper. You might not need all this, but since I built this sys­tem to help a team of de­vel­op­ers work on <em>many many</em> pro­jects you’re gonna get it any­way.</p>\n<pre><code><span class=\"hljs-comment\">// setup.js</span>\n\n<span class=\"hljs-comment\">// some nice deps for making a CLI.</span>\n<span class=\"hljs-keyword\">const</span> prompt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;prompt&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> exec = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;child_process&#x27;</span>).exec\n<span class=\"hljs-keyword\">const</span> colors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;colors/safe&quot;</span>)\n\n<span class=\"hljs-comment\">// Run and log a bash command</span>\n<span class=\"hljs-keyword\">const</span> bash = <span class=\"hljs-function\"><span class=\"hljs-params\">cmd</span> =&gt;</span> {\n  msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Running: <span class=\"hljs-subst\">${cmd}</span>`</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n    exec(cmd, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) reject(err)\n      resolve(stdout, stderr)\n    })\n  });\n}\n\n<span class=\"hljs-comment\">// Log a message</span>\n<span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-function\">(<span class=\"hljs-params\">color, text</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(colors[color](text))\n}\n\n<span class=\"hljs-comment\">// do the magic</span>\n<span class=\"hljs-keyword\">const</span> setup = <span class=\"hljs-function\">(<span class=\"hljs-params\">err, result</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) msg(<span class=\"hljs-string\">`red`</span>, err)\n\n  msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">&#x27;WordPress configuration values ☟&#x27;</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> result) {\n    msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${key}</span>: <span class=\"hljs-subst\">${result[key]}</span>;`</span>)\n  }\n  <span class=\"hljs-comment\">// run our check-install script.</span>\n  bash(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.cwd()}</span>/scripts/check-install.sh`</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// add our project to hostfile</span>\n    bash(<span class=\"hljs-string\">`nanobox dns add local <span class=\"hljs-subst\">${result.name}</span>.local`</span>)\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// explain the next step</span>\n    msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Run npm start, then finish setting up WordPress at <span class=\"hljs-subst\">${result.name}</span>.local/wp-admin`</span>)\n  })\n}\n\nmsg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">&#x27;Making Progress!&#x27;</span>)\nprompt.start();\nprompt.get({\n  <span class=\"hljs-attr\">properties</span>: {\n    <span class=\"hljs-attr\">name</span>: {\n      <span class=\"hljs-attr\">description</span>: colors.magenta(<span class=\"hljs-string\">&quot;Project name:&quot;</span>)\n    }\n  }\n}, setup);\n</code></pre>\n<p>This will open a <span class=\"small-caps\">CLI</span> ask­ing for the name of the pro­ject, run the <code>check-install.sh</code> script, cre­ate the host­ﬁle line for our lo­cal <span class=\"small-caps\">DNS</span> at <code>&lt;project-name&gt;.local</code>, and log the next ac­tion that you need to take to ﬁn­ish in­stalling Wordpress.</p>\n<p>Lets take a peek at our <code>check-install.sh</code> ﬁle:</p>\n<pre><code><span class=\"hljs-comment\"># check-install.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;nope we need that&#x27;</span>\n  degit git@github.com:nanobox-quickstarts/nanobox-wordpress.git wp\nfi\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/plugins/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/plugins/</span>\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/theme/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/themes/my</span>-theme\n</code></pre>\n<p>Very sim­i­lar to <code>prestart</code>! The biggest dif­fer­ence is the bit where we use <code>degit</code> to clone Nanobox’s of­ﬁ­cial Wordpress repo into our un­tracked <code>/wp</code> di­rec­tory. Degit will only get the head ﬁles, and none of the git his­tory. Nor will it keep the <code>.git</code> ﬁle, ba­si­cally mak­ing this a su­per clean, su­per fast way to down­load a di­rec­tory of ﬁles. It’s great. The last thing this does is wipe out any themes or plu­g­ins that we don’t want our need in the core ﬁles and syncs out own tracked di­rec­to­ries to the cor­rect places in the Wordpress core ﬁle struc­ture.</p>\n<p>Now would be a time to talk about plu­g­ins.</p>\n<h2>What’s up with plu­g­ins?</h2>\n<p>Wordpress has a mil­lion plu­g­ins. We’re go­ing to fo­cus on some of the ba­sic ones that al­most every Wordpress pro­ject ever needs, and should hon­estly be part of Wordpress. Building sites with­out these is a pain. Here they are:</p>\n<pre><code>📁 /project-name\n⮑ 📁 plugins\n  ⮑ 📁 advanced-custom-fields-<span class=\"hljs-keyword\">pro</span>\n  ⮑ 📁 custom-<span class=\"hljs-keyword\">post</span>-types-ui\n  ⮑ 📁 timber-library\n  ⮑ 📁 wp-migrate-<span class=\"hljs-keyword\">db</span>-<span class=\"hljs-keyword\">pro</span>\n</code></pre>\n<p>There are a cou­ple more in my repo to do things like or­der posts in the <span class=\"small-caps\">CMS</span> and im­port CSVs. Not su­per nec­es­sary, so we won’t talk about theme here.</p>\n<h3>Advanced Custom Fields</h3>\n<p><a href=\"https://www.advancedcustomfields.com/\"><span class=\"small-caps\">ACF</span></a> is a sta­ple of Wordpress de­vel­op­ment. It lets us de­ﬁne new key/​value pairs to ex­tend the data model of things like posts and pages, and al­lows us to cre­ate a set of global vari­able avail­able from any­where. Sounds sim­ple, sur­pris­ing it’s not part of Wordpress.</p>\n<h3>Custom Post Types <span class=\"small-caps\">UI</span></h3>\n<p><a href=\"https://wordpress.org/plugins/custom-post-type-ui/\">CPT-UI</a> cre­ates an in­ter­face in the ad­min panel for cre­at­ing new post types. Out of the box, Wordpress comes with <code>Posts</code> and <code>Pages</code>. CPT-UI lets us build new types like <code>Projects</code> or <code>Case Studies</code> or what­ever need for our data model. Again, sur­pris­ing that this  is­n’t just part of Wordpress. C’est la vivre.</p>\n<h3><span class=\"small-caps\">WP</span> Migrate <span class=\"small-caps\">DB</span></h3>\n<p><a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">Migrate <span class=\"small-caps\">DB</span></a> lets us … mi­grate … our … <span class=\"small-caps\">DB</span>. This gives us the abil­ity to sync our data­bases across en­vi­ron­ments and get me­dia up­loads and things with­out need­ing to write magic MySQL queries while tun­neled into open data­base ports on vir­tual ma­chines. This is bet­ter. Believe me.</p>\n<h3>Timber</h3>\n<p>The <a href=\"https://www.upstatement.com/timber/\">Timber</a> li­brary from Upstatement is the great­est thing to hap­pen to Wordpress de­vel­op­ment, af­ter those plu­g­ins that should just be part of Wordpress. Timber in­tro­duces the con­cept of <em>lay­out tem­plates</em> to Wordpress. This lets us write <span class=\"small-caps\">PHP</span> to ma­nip­u­late data, and pass that data to a tem­plate ﬁle where we can write <a href=\"https://twig.symfony.com/\">Twig tem­plates</a> rather than com­pos­ing strings in <span class=\"small-caps\">PHP</span>. Basically …</p>\n<pre><code><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> $myvar <span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>Turns in to:</p>\n<p>{% raw %}</p>\n<pre><code><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">myvar</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p>{% en­draw %}</p>\n<p>This lets us write tem­plates with a tem­plat­ing lan­guage, and write server-side busi­ness logic in a server-side pro­gram­ming lan­guage. Truly rev­o­lu­tion­ary.</p>\n<h2>What we talk about when we talk about Wordpress de­vel­op­ment: or, The Theme.</h2>\n<p>With all this ini­tial work around Wordpress core, de­vel­op­ment en­vi­ron­ments, and a ba­sic plu­gin ecosys­tem in place we can start talk­ing about the good stuff: the theme!</p>\n<pre><code>📁 /project-name\n⮑ 📁 theme\n   ⮑ 📁 es6              # Source JS\n   ⮑ 📁 scss             # Source SCSS\n   ⮑ 📁 routes           # PHP<span class=\"hljs-built_in\"> route </span>logic files\n      ⮑ 📄 index.php\n      ⮑ 📄 page.php\n      ⮑ 📄 post.php\n   ⮑ 📁 views            # Twig templates\n      ⮑ 📁 layouts\n      ⮑ 📁 pages\n      ⮑ 📁 partials\n   ⮑ 📄 functions.php    # This includes routing.\n   ⮑ 📄 screenshot.png   # Theme preview image.\n   ⮑ 📄 index.php        # Need this, but it<span class=\"hljs-string\">&#x27;s empty.¯\\_(ツ)_/¯\n</span></code></pre>\n<p>We won’t get too deep into this, since we’re get­ting into more con­ven­tional ter­ri­tory here. Basically our <code>es6</code> di­rec­tory holds source <span class=\"small-caps\">JS</span> that will get com­piled into a bun­dle. Same with the <code>scss</code> di­rec­tory, which gets com­piled into css. We han­dle that with npm scripts in the <code>package.json</code>.</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;css&quot;</span>: <span class=\"hljs-string\">&quot;node-sass ./theme/scss/style.scss theme/style.css --watch&quot;</span>,\n    <span class=\"hljs-string\">&quot;js&quot;</span>: <span class=\"hljs-string\">&quot;rollup -c -w&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>Hopefully none of this is to un­usual — if it’s is I rec­om­mend read­ing Paul Pederson’s <a href=\"http://paulcpederson.com/articles/npm-run/\">ex­cel­lent ar­ti­cle on npm scripts</a>.</p>\n<p>There is one part of this I want to touch on be­fore mov­ing on:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./plugins/ ./wp/wp-content/plugins/&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./theme/ ./wp/wp-content/themes/fuzzco&quot;</span>,    \n    <span class=\"hljs-string\">&quot;watch&quot;</span>: <span class=\"hljs-string\">&quot;rerun-script&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  },\n  <span class=\"hljs-string\">&quot;watches&quot;</span>: {\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;plugins/**/*.*&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;theme/**/*.*&quot;</span>\n  },\n  <span class=\"hljs-string\">...</span> \n</code></pre>\n<p>This bit sets up a watcher on our <code>theme</code> and <code>plugins</code> di­rec­tory, which sync our tracked work­ing ﬁles to the cor­rect place in our Wordpress core ﬁle struc­ture.</p>\n<h2>Functions, Routes, and Views</h2>\n<p>The last thing I want to touch on is the ba­sic struc­ture of us­ing Timber to match routes with views.</p>\n<pre><code><span class=\"hljs-comment\">/** functions.php */</span>\nRoutes::map(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$params</span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/:page&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$params</span>) </span>{\n  $page = get_page_by_path($params[<span class=\"hljs-string\">&#x27;page&#x27;</span>]);\n  <span class=\"hljs-keyword\">if</span> ($page) {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/404.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">404</span>);\n  }\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/blog/:post&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$params</span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/post.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\n</code></pre>\n<p>These are Timber routes de­ﬁned in the <code>functions.php</code> ﬁle. This re­places the stan­dard rout­ing of Wordpress, and we have change the struc­ture of the Wordpress perma­links to any­thing other than the de­fault to have it work. This is doc­u­mented in Timber.</p>\n<p>When our server gets a re­quest at a route of <code>/page-name</code>, it will call the <code>page.php</code> ﬁle and pass it the params as­so­ci­ated with the route.</p>\n<pre><code><span class=\"hljs-comment\">/** page.php */</span>\n<span class=\"hljs-meta\">&lt;?php</span>\n  $context = Timber::get_context();\n  $post = <span class=\"hljs-keyword\">new</span> TimberPost();\n  $context[<span class=\"hljs-string\">&#x27;page&#x27;</span>] = $post;\n  \n  Timber::render( <span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">&#x27;views/pages/page-&#x27;</span> . $post-&gt;post_name . <span class=\"hljs-string\">&#x27;.twig&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;views/pages/page.twig&#x27;</span>\n  ), $context );\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>The <code>page.php</code> ﬁle as­signs some vari­ables, in­ter­acts with Wordpress to get and shape our data, and then ren­ders the twig ﬁle as­so­ci­ated with the page. In this case, it’s go­ing to see if there’s a tem­plate that matches the name of our page, oth­er­wise it will ren­der the de­fault page tem­plate.</p>\n<h2>Back to the be­gin­ning</h2>\n<p>You’ve built your theme! Maybe it’s a sim­ple hello world, maybe it’s a heavy duty big ol’ thing. Either way, it’s time to de­ploy.</p>\n<p>You can use Nanobox to cre­ate a droplet for your server. Nanobox will give your pro­ject a name in their sys­tem, and ex­pose the <span class=\"small-caps\">URL</span> for the server at <code>&lt;your-project&gt;.nanoapp.io</code>. I like to use the con­ven­tion <code>project-dev</code>, <code>project-stage</code>, and <code>project-prod</code>. Once you cre­ate your pro­ject in Nanobox, the hard part is over and you can let them do the heavy lift­ing:</p>\n<pre><code>$ nanobox deploy <span class=\"hljs-keyword\">project</span>-dev\n</code></pre>\n<p>Or we can map this to our <span class=\"small-caps\">NPM</span> script:</p>\n<pre><code>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> deploy:dev  </span>\n</code></pre>\n<p>This will con­tainer­ize our ap­pli­ca­tion, push it to our droplet, hy­drate the en­tire thing, and serve! Now we can use Migrate <span class=\"small-caps\">DB</span> to move our data­base around, and we’re in busi­ness.</p>\n<h2>Putting it all to­gether</h2>\n<p><a href=\"https://github.com/nikolaswise/nanobox-sapper-1\">The pro­ject repo</a> is a turnkey, ready to roll ver­sion of all the above. It con­tains all the tool­ing needed to get started, and if you’ve fol­lowed along with this guide, you should be able to get started in no time.</p>\n<p>As al­ways, feel free to reach out to me in your venue of choice to talk about any of this — I would be happy to help you set this up for your own Wordpress pro­ject!</p>\n"},{"meta":{"title":"Soft Proof","slug":"soft-proof","date":"2017.10.29","description":"<p>Translations and com­pro­mises in im­age mak­ing or; the Image Cult Society.</p>\n","collection":"texts","timestamp":1509260400000},"content":"<p>There’s an in­ter­est­ing thing that hap­pens when a new idea or tech­nol­ogy gets in­tro­duced then quickly as­sim­i­lated into the back­ground hum of our daily lives. It starts out with a dis­creet name — a clear iden­ti­ﬁer of what this thing is and means. Than this name just sort of … slips away. It be­comes so nor­mal that to name it would seem strange. Its orig­i­nal name does­n’t seem to ﬁt any more, as the name ex­isted in the ﬁrst place to de­mar­cate the new thought from the or­di­nary. And now the new thing is just or­di­nary. Think about Google Maps. It’s just … a map. In 2005, when Google Maps was ﬁrst re­leased, it’s par­tic­u­lar ap­proach to the in­ter­face of a dig­i­tal map was called a<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>slippy map’. Weird, right?</p>\n<p>This is an in­ter­est­ing phe­nom­e­non around cul­tural ap­proaches to tech­nol­ogy, but not ac­tu­ally what I want to talk about. I want to talk about soft proofs. Soft proofs are an ex­am­ple of this taken to an ex­treme — you use them every day but you have prob­a­bly never heard of them. There is no need for the soft proof to be some­thing other than nor­mal, the soft proof just <em>is</em> nor­mal. But what is a soft proof, and why is it so nor­mal? And why do I want to ex­plore a topic so quo­tid­ian that the word used to mark it as in­ter­est­ing is so faded and worn?</p>\n<p>A soft proof is a way of view­ing an im­age be­fore the im­age has been re­pro­duced me­chan­i­cally. In con­trast to the soft proof is the hard proof: a way of view­ing an im­age im­me­di­ately af­ter it’s been re­pro­duced me­chan­i­cally. Basically, a soft proof is an im­age on a screen that will be sent to a printer. Otherwise known as an im­age. It’s need for a dis­creet name seems so un­nec­es­sary that it seems bizarre to re­fer to all im­ages - even this text as I write it&thinsp;&mdash;&thinsp;as soft proofs. But that is, in essence, what they are. We see im­ages on our screens that an be re­li­ably turned into im­ages on other peo­ples screens, and even into phys­i­cal im­ages on pa­per.</p>\n<p>The rea­son why this needed a name to de­mar­cate it as spe­cial — dur­ing the ad­vent of the dig­i­tal  — is that this is a re­ally hard prob­lem to solve. There are a range of math­e­mat­i­cal mod­els for ap­proach­ing a rel­a­tively uni­ﬁed the­ory of color and vi­sion, and a wide range of phys­i­cal pieces of ma­chin­ery that are tasked with pro­duc­ing those im­ages — from print­ing presses to mon­i­tors. The act of en­sur­ing an im­age can be pre­dictably re­pro­duced is nec­es­sar­ily an act of trans­la­tion. Translating from this color space to that; from an ad­di­tive color model of a screen to the sub­trac­tive color model of ink and pa­per; ap­prox­i­mat­ing the color of a pa­per stock to be printed on.</p>\n<p>This trans­lat­ing process is done us­ing some­thing called a Color Proﬁle. A Color Proﬁle is a set of rules for en­sur­ing that an im­age cre­ated with red, green, and blue light can be repli­cated on off-white pa­per us­ing cyan, ma­genta, yel­low, or­ange, and green inks. The cur­rent work­ﬂow of dig­i­tal to print is so smooth, so ubiq­ui­tous and mun­dane, as to oc­clude the mas­sive tech­no­log­i­cal feat that it sup­ports it.</p>\n<p>This feat was un­der­taken by a small group of tech­nol­ogy com­pa­nies I the early 90s, and they col­lab­o­rated to de­ﬁne a uni­ver­sal stan­dard of how this would work.</p>\n<blockquote>\n<p>The International Color Consortium was formed in 1993 by eight in­dus­try ven­dors in or­der to cre­ate an open, ven­dor-neu­tral color man­age­ment sys­tem which would func­tion trans­par­ently across all op­er­at­ing sys­tems and soft­ware pack­ages.&nbsp;.&nbsp;.&nbsp;. The eight found­ing mem­bers of the <span class=\"small-caps\">ICC</span> were Adobe, Agfa, Apple, Kodak, Microsoft, Silicon Graphics, Sun Microsystems, and Taligent.</p>\n</blockquote>\n<p><a href=\"https://ninedegreesbelow.com/photography/icc-profile-negative-tristimulus.html#luther\">- Color Science History and the <span class=\"small-caps\">ICC</span> Proﬁle Speciﬁcations, Elle Stone</a></p>\n<p>The cur­rent, base­line pro­ﬁles built around <span class=\"small-caps\">RGB</span> and <span class=\"small-caps\">CMYK</span> came about with the rise of dig­i­tal im­age-mak­ing, which is the ba­sis of the the cur­rent world around us, a world built on and pred­i­cated by im­ages.</p>\n<p>The dom­i­nant trans­la­tion <em>is</em> dom­i­nant be­cause it — to a large de­gree — works. Creating color pro­ﬁle is re­ally hard, mathy, ph­sysicsy stuff. It’s hard to do your­self. But CMYK/RGB cuts the cor­ners off the world to make it ﬁt into a gamut that can be han­dled. But by ne­ces­sity it’s a com­pro­mise: what col­ors are we not han­dling in or­der to han­dle the max­i­mum num­ber of col­ors? What parts of the color space get left be­hind?</p>\n<blockquote>\n<p>Many of these is­sues give me the feel­ing at times of re­luc­tant rather than open co-op­er­a­tion be­tween some of the com­pa­nies that cre­ated this stan­dard. Having said that, there does seem enough in­for­ma­tion in the pub­lic stan­dard (when com­bined with ex­am­in­ing avail­able ex­ist­ing  pro­ﬁles) to ef­fec­tively and ac­cu­rately char­ac­ter­ize color pro­ﬁles of de­vices and color spaces. I could imag­ine there be­ing some poor re­sults at times though, due to some loose­ness in the spec.</p>\n</blockquote>\n<p><a href=\"https://argyllcms.com/icc_problems.html\">—  What’s wrong with the <span class=\"small-caps\">ICC</span> pro­ﬁle for­mat any­way?, Graeme Gill</a></p>\n<p>Its im­por­tant to un­der­stand this com­pro­mise; un­der­stand how it works and what ex­change we’re mak­ing in the process. What are we giv­ing up, and what are we get­ting in re­turn?</p>\n<p>What are we leav­ing on the table? For ex­am­ple, pho­tog­ra­phy (up un­til the 80′s) cal­i­brated for white peo­ple. African Americans and other dark skinned peo­ple pho­tographed poorly. They were out­side the color space. The story goes that school pho­tos of in­ter­ra­cial class­rooms would have rows of per­fectly ex­posed white kids, and voids where the black chil­dren should have been (<a href=\"http://www.broombergchanarin.com/text-racism-of-early-colour/\">Adamn Broomberg</a>). More than this, the stan­dards only changed with in­dus­try pres­sure from choco­late and fur­ni­ture man­u­fac­tur­ers — a realm of cap­i­tal where the browns and blacks mat­ter (<a href=\"https://priceonomics.com/how-photography-was-optimized-for-white-skin/\">Rosie Cima</a>).</p>\n<blockquote>\n<p>Film chem­istry, photo lab pro­ce­dures, video screen colour bal­anc­ing prac­tices, and dig­i­tal cam­eras in gen­eral were orig­i­nally de­vel­oped with a global as­sump­tion of<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>Whiteness.’”</p>\n</blockquote>\n<p><a href=\"http://www.cjc-online.ca/index.php/journal/article/view/2196\">— Looking at Shirley, the Ultimate Norm: Colour Balance, Image Technologies, and Cognitive Equity, Lorna Roth</a></p>\n<p>With the cre­ation of the <span class=\"small-caps\">RGB</span> color space, with the cre­ation of the <span class=\"small-caps\">ICC</span>, we ceded the vi­sual world to su­per­mas­sive tech in­ter­ests, much like we’ve ceded our pri­vacy and per­sonal data. In do­ing so we’ve in­her­ently made the cre­ation and dis­sem­i­na­tion of im­ages into a tool for cap­i­tal — one that sup­ports dom­i­nant power struc­tures.</p>\n<p>How do we un­der­stand the im­plicit, in­vis­i­ble, baked in as­sump­tions of the soft proof? We can start by op­er­at­ing out­side the pa­ra­me­ters of the soft proof, rec­og­nize it as a tool to use or not use. The gap be­tween the soft proof &amp; the hard copy is mea­sured in the gap be­tween the tools used to plan &amp; pre­pare ver­sus the tools used to pro­duce, and we can move in to this gap and in­habit it. We can cre­ate work here, and in do­ing so re­claim some of the space that we’ve given away.</p>\n<p>The Risograph, for ex­am­ple, has a tool­chain for soft proof­ing, but the ma­chine— through its high speed &amp; low cost — also opens up the pos­si­bil­ity of de­sign­ing im­ages through it­er­a­tive hard proofs; blend­ing the tech­niques go the mod­ern dig­i­tal print process with the clas­si­cal ana­log ones.</p>\n<p>The web is a strange medium&thinsp;&mdash;&thinsp;a blend­ing of soft and hard spaces. A plas­tique space, with plas­tic proofs and plas­tic copies. The same process of trans­la­tion is at work — be­tween the still &amp; the in­ter­ac­tive, ﬂow­ing im­age. This is why show­ing comps &amp; wire­frames of web­sites to clients can be so tricky: our cul­ture of im­age cult and tech­no­log­i­cal process can elide the crit­i­cal dif­fer­ences we sense as agents of these sys­tems.</p>\n<p>This is a call for a Marxism of im­age mak­ing — to seize the means of pro­duc­tion. To cre­ate rad­i­cal im­ages &amp; tools that ex­ist in the cor­ners of the gamut and color spaces dis­carded by the soft proof. To un­der­stand that plan­ning is not do­ing, and take con­trol of our own vi­sual lan­guages.</p>\n"},{"meta":{"title":"How to Design While Developing","slug":"how-to-design-while-developing","date":"2016.5.15","description":"<p>Moving be­yond the idea that the de­signer and the de­vel­oper on a web pro­ject are dif­fer­ent peo­ple, and that some­how those are dif­fer­ent things.</p>\n","collection":"texts","timestamp":1463295600000},"content":"<p>For a long time, web­sites got made with one per­son de­sign­ing how it should look and one per­son de­vel­op­ing the code that made it look that way.</p>\n<p>A lot of times, this is still how things get done - one team makes sta­tic Photoshop comps, and hands them off to a team of de­vel­op­ers who know stuff like whether React or Ember or Node or Ruby is the best thing. This can some­times cause fric­tion. The de­signer ex­pects the web­site to look ex­actly like the comp, the de­vel­oper writes a bunch of cus­tom <span class=\"small-caps\">CSS</span> and <span class=\"small-caps\">HTML</span> to ﬁt the de­sign, and who­ever needs to make sure the whole thing is <span class=\"small-caps\">WCAAG</span> com­pli­ant spends weeks hat­ing both of them. When the next comp comes down the line, it all hap­pens again. For a big site, this leads to de­sign drift, and a hugely tan­gled code­base that’s a <a href=\"http://paulcpederson.com/articles/css-for-people-who-hate-css/\">night­mare to try and un­tan­gle</a>.</p>\n<p>This split­ting of sys­tems is an ar­ti­ﬁ­cial one that’s sus­tained by or­ga­ni­za­tional as­sump­tions: we need de­sign­ers, and we need de­vel­op­ers. The thing about Design though - cap­i­tal D <em>de­sign</em> - is that it’s sim­ply a method of de­cid­ing on a struc­ture to ac­com­plish a pur­pose. The de­sign tools and meth­ods one uses to ac­com­plish good de­sign is al­ways in tune with the thing be­ing made. A build­ing does­n’t go from paint­ing to con­struc­tion draw­ings, nor does a car go from mod­el­ing clay to race­track. The clay and the paint are very use­ful steps to <em>start</em> the process of de­sign. They help us to be cre­ative and loose and ex­plore new so­lu­tions to the prob­lems at hand. This ex­ploratory work helps us to un­der­stand how a thing will <em>feel</em> in the world.</p>\n<p>These ini­tial draw­ings and sketches get trans­lated into their ﬁ­nal struc­tures, and trans­la­tion is a process that can en­rich both what is be­ing trans­lated <em>to</em> as well as what is be­ing trans­lated <em>from</em>. Every pre­cise mo­ment may not align di­rectly, since dif­fer­ences in con­text can have deep im­pli­ca­tions for mean­ing.</p>\n<p>We turn our draw­ings into ob­jects with all the con­sid­er­a­tions of the ﬁ­nal ma­te­ri­al­ity pre­sent. We can’t ig­nore the shape of the en­gine or struc­tural code re­quire­ments, al­though our mod­els and paint­ings cer­tainly can. Design is pro­vi­sional un­til the point at which it ex­ists in the world, and when talk­ing about the web even this is­n’t any sort of end­ing. A web­site is its own sort of thing, with its own struc­ture and re­quire­ments that need to be pre­sent and known through­out the en­tire process of de­sign.</p>\n<p>A draw­ing and a web­site will never look the same. This is mostly be­cause a web­site is­n’t sta­tic. Because of this, what a web­site <em>looks like</em> is just a small piece of what a web­site <em>is</em>. A web­site is what it en­ables its users to ac­com­plish, what its de­vel­op­ers have to do to keep it sta­ble and mov­ing for­ward.</p>\n<p>The best way to meet our goals as peo­ple who make good web­sites is to fo­cus less on those draw­ings right away. Instead we should think more about sim­plic­ity and el­e­gance than the de­tail ori­ented per­fec­tion of a jpeg.</p>\n<p>Don’t get me wrong - the jpeg can be im­por­tant. It shows us how we think we can solve our prob­lems, a glimpse of how we want our web­site to looks and feel, and the tone we want to com­mu­ni­cate. Through all this it needs to have to room to change and breath as it comes to life and be­come a real thing. Our draw­ings should not be on the level of<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>what does this look like” but<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>what prob­lem does this solve and how”. At every step in the process we can work to make the real thing bet­ter, to solve new ques­tions that arise as we move through the process of de­sign / de­vel­op­ment&thinsp;&mdash;&thinsp;a process where there is no gap be­tween those two ideas.</p>\n<p>To de­sign a web­site is to de­velop it - and as we de­velop a web­site we are con­stantly mak­ing de­sign de­ci­sions. A de­signer can­not ab­di­cate their re­spon­si­bil­ity to de­sign by say­ing<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>well, my jpeg looked great.” A de­vel­oper can­not ab­di­cate their re­spon­si­bil­ity to a code­base by say­ing<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>well that’s what they wanted in the comp.”</p>\n"},{"meta":{"title":"Building a Client Library for ArcGIS","slug":"building-a-client-library","date":"2015.3.09","description":"<p>Writing a wrap­per client li­brary to smooth out de­sign weird­ness at the <span class=\"small-caps\">API</span> level leads to plenty of de­sign think­ing on the way things should be.</p>\n","collection":"texts","timestamp":1425884400000},"content":"<p>This year I built a JavaScript wrap­per for Node and the Browser around the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> to sim­plify work­ing with that plat­form as a de­vel­oper. This was as an ex­er­cise in <span class=\"small-caps\">API</span> de­sign, as well as mak­ing a tool that I wanted to use but did­n’t ex­ist yet. The pro­ject is a bare-bones li­brary to ease in­ter­ac­tions with the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> in JavaScript and Node apps.</p>\n<p>Sometimes&thinsp;&mdash;&thinsp;and for sure in this case&thinsp;&mdash;&thinsp;an <span class=\"small-caps\">API</span> can be rough, built over time, and not pro­vide the sort of log­i­cal mod­els that work well with spe­ciﬁc lan­guage en­vi­ron­ments. This was the case with the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> that I was run­ning in to. A lot of the de­ci­sions had been made over the course of years, and did­n’t trans­late very smoothly a lan­guage as young as Node.js.</p>\n<p>The ﬁrst step was to ﬁg­ure out what prob­lems I wanted to solve. A lot of my work with Esri <span class=\"small-caps\">PDX</span> has been about con­tent han­dling, and so this is where I started. Reading <em>all</em> the doc to get a big pic­ture of what’s go­ing on with the <span class=\"small-caps\">API</span>, and talk to every­one who’s done work like this be­fore to ﬁg­ure out what prob­lems <em>they</em> needed to solve was the ﬁrst step. From there I felt I had enough con­text and in­for­ma­tion to make the thing use­ful for more peo­ple than just me, and make sure that it was co­her­ent with the un­der­ly­ing goals of the orig­i­nal <span class=\"small-caps\">API</span>.</p>\n<p>This pro­ject works to sim­plify and unify the gap be­tween the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> and a con­tem­po­rary Node ap­pli­ca­tion. This li­brary is a <span class=\"small-caps\">UI</span> in the most ba­sic sense of the term — it pro­vides an in­ter­face be­tween the de­vel­oper and the servers. That in­ter­face needs to be well de­signed and thought­ful in or­der to make the process as smooth, in­tu­itive, and plea­sur­able as pos­si­ble.</p>\n<p>One of the most im­por­tant parts of the pro­ject is to pro­vide de­vel­op­ers with a way to ac­cess the ArcGIS plat­form with­out need­ing to ar­chi­tect their en­tire ap­pli­ca­tion around opin­ion­ated frame­works (like Dojo, for ex­am­ple). Though the li­brary it­self is writ­ten in <span class=\"small-caps\">ES6</span>, it’s dis­trib­uted as plain, nor­mal <span class=\"small-caps\">ES5</span>&thinsp;&mdash;&thinsp;both as a node pack­age and a pack­aged bun­dle. This means it works both in Node and the browser, and has very few opin­ions on how it in­te­grates with the rest of your app.</p>\n<p>Right now, the li­brary wraps most of the ba­sic plat­form con­tent man­age­ment and in­ter­ac­tions - get­ting and edit­ing users, or­ga­ni­za­tions, and items. The Node ArcGIS Client Library is an open source pro­ject — so it’s scope will in­crease as the com­mu­nity works to ac­com­plish more goals and work­ﬂows.</p>\n<h2>Setting up the client</h2>\n<p>The ﬁrst step in us­ing the li­brary is ini­tial­iz­ing the client with your tar­get por­tal.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">ArcGIS</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">require</span>(<span class=\"hljs-string\">&#x27;arcgis&#x27;</span>)</span>\n<span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">ArcGIS</span>()</span>\n</code></pre>\n<p>This sets up a de­fault ob­ject for in­ter­act­ing with the <span class=\"small-caps\">API</span>. This de­fault is go­ing to talk to ArcGIS Online as an anony­mous, unau­then­ti­cated user. One can au­then­ti­cate this client ses­sion as a named user by pass­ing in a user to­ken ob­tained from a suc­cess­ful OAuth lo­gin process.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">Arcgis</span>({\n  <span class=\"hljs-variable\">token</span>: <span class=\"hljs-variable\">namedUserToken</span>\n})</span>\n</code></pre>\n<p>This is­n’t ex­clu­sive to ArcGIS Online. The <span class=\"small-caps\">API</span> for in­ter­act­ing with your or­ga­ni­za­tion’s in­stal­la­tion of Portal or Server is the same. Setting up the client ses­sion with your in­stance is done by spec­i­fy­ing your <span class=\"small-caps\">API</span> do­main.</p>\n<pre><code><span class=\"hljs-attr\">var</span> <span class=\"hljs-string\">arcgis = Arcgis({</span>\n  <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">&#x27;ago.my-server.com&#x27;,</span>\n  <span class=\"hljs-attr\">token</span>: <span class=\"hljs-string\">namedUserToken</span>\n<span class=\"hljs-attr\">})</span>\n</code></pre>\n<p>Beyond the ini­tial­iza­tion of the client, the li­brary is ex­clu­sively async. All the func­tions re­turn promises by de­fault.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> (<span class=\"hljs-params\">m</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(m)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ohNo</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(err)\n}\narcgis.request()\n.then(log)\n.catch(ohNo)\n</code></pre>\n<p>You can also pass in a node-style call­back, if you’d pre­fer.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">log</span> (<span class=\"hljs-built_in\">err</span>, results) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">err</span>) {\n    return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Error</span>(<span class=\"hljs-built_in\">err</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    console.<span class=\"hljs-built_in\">log</span>(results)\n  }\n}\narcgis.<span class=\"hljs-built_in\">request</span>({}, <span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>Both meth­ods work just as well, and use all the same busi­ness logic. I like promises, but maybe you don’t. This is one of the main rea­sons the li­brary does its best to avoid in­ﬂict­ing my opin­ions on your code­base.</p>\n<p>Once we have an au­then­ti­cated ses­sion, we can do all sorts of stuff — like ﬁg­ure out who we are:</p>\n<pre><code><span class=\"hljs-keyword\">function</span> hello (<span class=\"hljs-keyword\">user</span>) {\n  console.log(<span class=\"hljs-string\">&#x27;Hello, &#x27;</span> + <span class=\"hljs-keyword\">user</span>.firstName)\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(hello)\n</code></pre>\n<p>We can get all of the items that user has in the plat­form:</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getContent</span> (<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> user.content()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logContent</span> (<span class=\"hljs-params\">content</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(content)\n}\narcgis.user(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>)\n.then(getContent)\n.then(logContent)\n</code></pre>\n<p>Or a list of all the groups that a user is a mem­ber of.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> logGroups (item) {\n  item.<span class=\"hljs-keyword\">groups</span>.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-keyword\">group</span>) {\n    console.log(<span class=\"hljs-keyword\">group</span>.title)\n  })\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(logGroups)\n</code></pre>\n<p>The li­brary also can in­ter­act with the user’s or­ga­ni­za­tion, re­turn­ing in­for­ma­tion, mem­bers, or all the con­tent as­so­ci­ated with the or­ga­ni­za­tion.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logOrg</span> <span class=\"hljs-params\">(org)</span> <span class=\"hljs-comment\">{\n  console.log(org)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">organization</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&#x27;esripdx&#x27;</span>)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logOrg)</span>\n</span></code></pre>\n<p>The or­ga­ni­za­tion call de­faults to<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>self’ — what­ever or­ga­ni­za­tion the cur­rent user is a mem­ber of.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMembers</span> <span class=\"hljs-params\">(org)</span></span> {\n  <span class=\"hljs-keyword\">return</span> org.members()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(members)</span></span> {\n  console.<span class=\"hljs-built_in\">log</span>(members)\n}\narcgis.organization().<span class=\"hljs-keyword\">then</span>(getMembers).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>Many of the con­tent calls are ab­strac­tions or helper meth­ods for longer, more com­pli­cated calls to the <code>search</code> end­point.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getContent</span> <span class=\"hljs-params\">(org)</span></span> {\n  <span class=\"hljs-keyword\">return</span> org.content()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(items)</span></span> {\n  console.<span class=\"hljs-built_in\">log</span>(items)\n}\narcgis.organization().<span class=\"hljs-keyword\">then</span>(getContent).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>In this way we are able to cre­ate a tran­si­tional layer be­tween the <span class=\"small-caps\">API</span> it­self (a su­per com­pli­cated call to the search end­point) and what ap­pli­ca­tion de­vel­op­ers need (all my or­ga­ni­za­tion’s con­tent).</p>\n<h2>Working with con­tent</h2>\n<p>Platform con­tent is the weak­est link in the li­brary as of to­day. ArcGIS sup­ports a huge range of item types, and quite a num­ber of so­phis­ti­cated things you can do with those item types. For now the ba­sics are more or less in place — like get­ting an item’s de­tails:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> layerID = <span class=\"hljs-string\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logItem</span> <span class=\"hljs-params\">(item)</span> <span class=\"hljs-comment\">{\n  console.log(item)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">item</span><span class=\"hljs-params\">(layerID)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logItem)</span>\n</span></code></pre>\n<p>Or up­dat­ing the those de­tails and edit­ing the per­mis­sions:</p>\n<pre><code>var layerId = <span class=\"hljs-symbol\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb</span>&#x27;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateItem</span> (item) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.update({</span>\n    snippet: <span class=\"hljs-symbol\">&#x27;Building</span> footprints <span class=\"hljs-keyword\">in</span> my neighborhood <span class=\"hljs-keyword\">in</span> Portland, Oregon&#x27;\n  })\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shareItem</span> (item) {\n  console.log(item)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.permissions({</span>\n    <span class=\"hljs-keyword\">access</span>: <span class=\"hljs-symbol\">&#x27;public</span>&#x27;\n  })\n}\narcgis.item(layerId)\n.<span class=\"hljs-keyword\">then</span>(updateItem)\n.<span class=\"hljs-keyword\">then</span>(shareItem)\n</code></pre>\n<p>So far, there’s some sup­port for item-type-spe­ciﬁc meth­ods that are start­ing to open up the pos­si­bil­i­ties of ma­nip­u­lat­ing your con­tent from Node — like get­ting all the data in a layer.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> layerID = <span class=\"hljs-string\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getData</span> (<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> item.data()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logData</span> (<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(data)\n}\narcgis.item(layerId)\n.then(getData)\n.then(logData)\n</code></pre>\n<p>There is a lot more of the plat­form that we could cover than this - ser­vices, analy­sis, layer cre­ation and tile pub­lish­ing all are ac­tions that this li­brary or ones like it could cover.</p>\n"},{"meta":{"title":"Map as Context","slug":"map-as-context","date":"2015.2.19","description":"<p>Understanding maps as de­signed ob­jects and at­tempt­ing to de­ﬁne a the­ory for mak­ing dig­i­tal maps on the in­ter­net as good as old pa­per maps.</p>\n","collection":"texts","timestamp":1424332800000},"content":"<p>Looking at maps as they ex­ist to­day on the in­ter­net, we have a pretty solid idea of what that means. It means they look like Google Maps. This is a pretty re­cent de­sign so­lu­tion to the<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>what is a map on the in­ter­net’ prob­lem, only about 10 years old. Which is old for in­ter­net, but pretty young for maps. The Google Maps model is a good one, too! It’s a very ef­fec­tive way to pre­sent what is es­sen­tially a road map - a dri­vers at­las for nav­i­gat­ing a city or a coun­try. Google Maps re­places the <span class=\"small-caps\">AAA</span> State Highway map re­ally ef­fec­tively, but per­haps there are some weak links with how it ap­plies to other, less nav­i­ga­tion-ori­ented maps.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/01-amt2_akershus-amt-57-vi_1887.jpg\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/01-amt2_akershus-amt-57-vi_1887.jpg\" data-sizes=\"auto\" alt>\n      </picture>\n    </figure>\n  </p>\n<p>There a large num­ber of re­ally beau­ti­ful maps that ex­ist only on pa­per, and a large num­ber of re­ally ugly maps that ex­ist on screens. How can we start to think about maps in a way that bridges this gap? Is there a way we can ap­proach these other, not-a-roadmap-map maps more ef­fec­tively to make them as good as their pa­per-bound cousins?</p>\n<p>To ap­proach this ques­tion from an an­gle, it’s worth tak­ing a mo­ment to think about what a map <em>is</em>. The map is a minia­ture that piv­ots around the body to rep­re­sent the gi­gan­tic enor­mity of the phys­i­cal world. The map shrinks the world down to a place it can be held in the hands and en­tirely seen with the eye. The map con­nects the vast­ness of re­al­ity to the body in way that can be han­dled - both phys­i­cally and men­tally.</p>\n<p>This cre­ates ten­sion with maps on the screen - es­pe­cially the in­ter­net. The screen can <em>not</em> be touched, and the in­ter­net can not be re­lated to the body. Phones and tablets mit­i­gate this by bring­ing the screen closer, and mov­ing to the size of the hand, but the core dif­ﬁ­culty re­mains&thinsp;&mdash;&thinsp;if a map ex­ists to scale down the enor­mity of the world to the size of the body, the in­ter­net it­self has no bound­aries or edges, and way to re­late the screen to the body.</p>\n<p>Why is this con­nec­tion be­tween world and body im­por­tant? The map pro­vides con­text for un­der­stand­ing world-scale sys­tems and land­scape-scale con­cepts in a hu­man-scale ob­ject. The map is a ty­pol­ogy of com­mu­ni­ca­tion that sits half way be­tween the book and the vi­sual art ob­ject. Both the book and the paint­ing&thinsp;&mdash;&thinsp;or the print&thinsp;&mdash;&thinsp;are tech­niques that are used to pro­vide ac­cess to con­cepts and ideas be­yond the scale of a sin­gle in­di­vid­ual. The book can con­tain cen­turies of in­tel­lec­tual thought, the paint­ing can ex­pose feel­ings and emo­tions that touch any num­ber of peo­ple. If the map ex­ists be­tween these two mode of com­mu­ni­ca­tion, that means that it’s goal is to use a vol­ume of thought, of data, of mea­sure­ments to ex­pose a broad, un­der­ly­ing con­cept. This can be an en­vi­ron­men­tal truth (or the sup­po­si­tion of one) or a so­ci­etal in­sight.</p>\n<p>The map does this through a very spe­ciﬁc set of vi­sual de­sign tools with for­mal qual­i­ties that lend them­selves to the prob­lem at hand. These for­mal­i­ties are partly de­ﬁned and struc­tured by the tech­nolo­gies be­hind the pro­duc­tion and dis­tri­b­u­tion of the map.</p>\n<p>The ﬁrst maps where hand drawn, and cor­re­spond­ingly have at­trib­utes of other hand-made vi­sual works. With the ad­vent of print­ing, maps started to be carved into wood, and du­pli­cated. After wood, they came to etch­ing, and af­ter that lith­o­g­ra­phy. In each of the print tech­niques, cer­tain marks are fa­vored and made pos­si­ble through the medium of the ma­trix it­self. Shared in all the print tech­niques, how­ever, is the con­cept of plates&thinsp;&mdash;&thinsp;in­di­vid­ual drawn lay­ers for dif­fer­ent col­ors. Equating in­di­vid­ual plates to in­di­vid­ual col­ors to in­di­vid­ual <em>ty­po­log­i­cal con­cepts</em> be­ing shown on the map is a big rea­son why printed maps are so good.</p>\n<p>The care­ful and de­lib­er­ate ap­pli­ca­tion of the maps for­mal char­ac­ter­is­tics to di­rectly ad­dress the ideas and con­cepts to be com­mu­ni­cated, the ad­dress the <em>use</em> of the map is what makes a map good.</p>\n<p>On the in­ter­net, we make maps dif­fer­ently. <span class=\"small-caps\">GIS</span> data sets mean that maps can be made through math­e­mat­i­cal and an­a­lytic tools&thinsp;&mdash;&thinsp;com­par­ing sets of data, and cre­at­ing new sets of data to an­swer ques­tions. A ro­bust and open set of pub­lic data means that there are map mak­ing tools which pro­vide ways to style and com­bine ex­ist­ing con­tent.</p>\n<p>These tech­niques uti­lize a rel­a­tively sta­tic map that pur­ports to use­fully de­scribe the en­tire ge­og­ra­phy of the planet. All of the maps made are in­tended to sit within larger ap­pli­ca­tion, it­self de­signed to solve a prob­lem.</p>\n<p>Most of the time, these maps fail to pro­vide mean­ing­ful con­nec­tion to the con­cepts pro­vided - they lose the es­sen­tial as­pect of the map that join world-to-hu­man scales, in­stead op­er­at­ing at the world-to-world level. The end­less map of the in­ter­net is it­self in­com­pre­hen­si­ble to the body. The maps of the in­ter­net are si­mul­ta­ne­ously too broad and too sim­ple, pro­vid­ing too much and too lit­tle. The prob­lem the map is pre­sent­ing it­self as a so­lu­tion too is usu­ally far too muddy, and the re­sult­ing lack of clar­ity of pur­pose leads to a map with it­self a lack of clar­ity.</p>\n<p>Looking to the main pur­pose of the map — sim­plic­ity, clar­ity, and the minia­tur­iza­tion of the world to pivot around the hu­man hand — while us­ing the for­mal vi­sual tools and de­sign lessons of the pre­vi­ous sev­eral cen­turies of pa­per maps&thinsp;&mdash;&thinsp;the bal­ance of sim­pli­ﬁ­ca­tion and ex­ag­ger­a­tion, clear con­cep­tual sep­a­ra­tions, and em­brac­ing the lim­i­ta­tions of the ob­ject to pro­vide fo­cus.</p>\n<p>In all, the map must be ap­pro­pri­ate and nat­ural for it’s in­tended use, play­ing its role in the over­all pur­pose of the de­sign so­lu­tion.</p>\n"},{"meta":{"title":"Pixels don't matter.","slug":"pixels-dont-matter","date":"2013.10.21","description":"<p>They don’t.</p>\n","collection":"texts","timestamp":1382338800000},"content":"<p>Talking about mo­bile de­sign to­day, the con­ver­sa­tion is couched in terms of<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>pixel per­fect”, or de­signs are made by<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>pixel push­ers”. This is­n’t a use­ful way to ap­proach lay­out de­sign.</p>\n<p>In the ana­log world we talk about the three fun­da­men­tal com­po­nents of print.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-two.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-two.png\" data-sizes=\"auto\" alt=\"Pigment, Matrix, Substrate\">\n      </picture>\n    </figure>\n  </p>\n<p>I know what you’re think­ing right now;<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Wait, we’re not ana­log here.” We’re dig­i­tal. We need pix­els. And that’s true, we do need pix­els. Let’s re­frame these prin­ci­ples:</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-three.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-three.png\" data-sizes=\"auto\" alt=\"Aesthetic, Conceptual, Material\">\n      </picture>\n    </figure>\n  </p>\n<p>Thinking about our sub­strate, our ma­te­ri­als are our de­vices, which ren­der with pix­els.</p>\n<h2>But our ma­te­ri­als change -</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-four.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-four.png\" data-sizes=\"auto\" alt=\"Aesthetic, Conceptual, Material\">\n      </picture>\n    </figure>\n  </p>\n<p>Our de­vices get more and more pixel den­sity, their pro­por­tions change, tech­nol­ogy im­proves, <span class=\"small-caps\">CSS</span> ab­stracts a<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>pixel’ of its own, Android ex­ists, and all of a sud­den our ma­te­ri­als get away from us and fo­cus­ing on the pixel gives us an aneurysm.</p>\n<p>But don’t worry, be­cause:</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-one.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-one.png\" data-sizes=\"auto\" alt=\"Pixels Don't Matter\">\n      </picture>\n    </figure>\n  </p>\n<h2>We still have two other lay­ers to work through.</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-five.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-five.png\" data-sizes=\"auto\" alt=\"Pixels Don't Matter\">\n      </picture>\n    </figure>\n  \nOur ma­te­ri­als don’t dic­tate our aes­thet­ics nor or con­cept, but ma­te­ri­als do in­form our de­ci­sions. So think about pix­els, but put them in the proper place - as the sub­strate of our work.</p>\n<h2>Measurement sys­tems are ab­stract ideas -</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-six.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-six.png\" data-sizes=\"auto\" alt=\"measure\">\n      </picture>\n    </figure>\n  \nAn inch is not a thing, a foot is not a thing. The pixel is a ph­sy­i­cal thing, and as a phys­i­cal thing we’ve seen that it’s prone to change.</p>\n<h2>The pixel is a ter­ri­ble way to mea­sure things.</h2>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-seven.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-seven.png\" data-sizes=\"auto\" alt=\"pixel\">\n      </picture>\n    </figure>\n  \nSo use an­other sys­tem to mea­sure, any other sys­tem. The ra­tios, the pro­por­tions, the re­la­tion­ships and the hi­er­ar­chies are im­por­tant. That’s where we do our work as de­sign­ers.</p>\n<p>So don’t stress pix­els. Spare them a thought when you get started, and know that at some point in the process they’ll make them­selves ap­par­ent, and will need to be ad­dressed. But the pix­els will let you know, and when you need to deal with them they’ll be there.</p>\n<h2>Show Time</h2>\n<p>These are some comps for the <a href=\"/projects/mapattack\">MapAttack</a> mo­bile app.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-eight.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-eight.png\" data-sizes=\"auto\" alt=\"Mapattack Comps\">\n      </picture>\n    </figure>\n  </p>\n<p>Every el­e­ment is spec­i­ﬁed by ex­act pixel counts. The type­faces are de­ﬁned, the mar­gins, the padding, and the bor­der strokes are each pre­cisely de­ter­mined and la­beled.\nDon’t get the wrong idea - this is­n’t my hypocrisy you’re see­ing. These de­signs did­n’t <em>start</em> life here, this is just where they ended up.</p>\n<p>Before hand­ing off my de­sign, I ba­si­cally ran pre-press on it. Our de­vel­op­ers do need pix­els - they need these val­ues. They need them for ex­e­cu­tion and pro­duc­tion. So we, as their de­sign­ers, need to give them pix­els. But we also need to give them more than just that.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"/180x180/figure-nine.png\" data-optimumx=\"1.6\" data-src=\"/{width}x5000/figure-nine.png\" data-sizes=\"auto\" alt=\"Mapattack Comps Closeup\">\n      </picture>\n    </figure>\n  </p>\n<p>We need to give them the blue­prints for how we <em>think</em> about the de­sign. That means show­ing what’s pro­por­tional as pro­por­tion, show­ing what’s ﬂuid as ﬂuid. This gives our sta­tic comps the life they need to work for a huge range of de­vices.</p>\n<h2>Love the Pixel, let it be a Pixel.</h2>\n<p>Letting Pixels be beau­ti­ful, blocky, phys­i­cal lit­tle things means us­ing them to ren­der our de­signs, not dic­tate them. It means us­ing ac­tual mea­sure­ment sys­tems to mea­sure. And more im­por­tantly, it gives us a way to un­der­stand our lay­out bet­ter, to ar­rive at more con­sid­ered de­signs, and to un­der­stand our de­signs as they live on ac­tual hard­ware in the ac­tual world.</p>\n"}]