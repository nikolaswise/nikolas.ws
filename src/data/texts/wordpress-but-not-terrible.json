{"meta":{"title":"Pressing Words, With Your Friend, Wordpress","slug":"wordpress-but-not-terrible","date":"2018.10.24","description":"<p>A con­tem­po­rary de­vel­op­ers guide to build­ing things on Wordpress 4.x and not hav­ing it be ter­ri­ble.</p>\n","collection":"texts","timestamp":1540364400000},"content":"<p>TL:DR; <a href=\"https://github.com/nikolaswise/nanobox-wordpress-1\">Start here</a>. Install <a href=\"https://nanobox.io/\">this thing</a> and con­nect it to your ac­count on <a href=\"https://www.digitalocean.com/\">here</a>. Buy a li­cense of <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">this (it’s worth it)</a>. Read some docs for <a href=\"https://www.upstatement.com/timber/\">this</a> and start build­ing. Wordpress 5 and Gutenberg will prob­a­bly break all of this ex­cept the en­vi­ron­ments.</p>\n<p>When I ﬁrst started work­ing as a de­vel­oper, Wordpress was <em>the</em> preva­lent plat­form for pretty much any pro­ject. Ten years later and … Wordpress is still pretty much most of the in­ter­net. In gen­eral, Wordpress will be my last choice of a plat­form. I pre­fer to build sta­tic sites, use a head­less <span class=\"small-caps\">CMS</span>, or al­most any­thing else at all.</p>\n<p>That said, as the Technical Director at Fuzzco — a de­sign stu­dio that re­lies al­most ex­clu­sively on Wordpress for their web­sites — Wordpress was hap­pen­ing. Fuzzco is rare among stu­dios in that we man­age and host pro­jects for our clients, and of­ten have main­te­nance rid­ers that can last for years. This means that in the course of a year, not only did we build a half dozen new pro­jects on Wordpress, but we main­tained and triaged is­sues on over 100 legacy pro­jects.</p>\n<p>Very quickly I re­al­ized I had one op­tion: <em>make Wordpress not ter­ri­ble.</em></p>\n<h2>Terrible is pretty harsh</h2>\n<p>If you’re com­fort­able with Wordpress, you might ﬁnd some ﬁght­in’ words here. What’s my prob­lem with Wordpress and what am I try­ing to solve for? My biggest is­sue with Wordpress de­vel­op­ment as I’ve en­coun­tered it in the past is a lack of clar­ity around the re­quire­ments of the en­tire sys­tem. What does the pro­ject need to run in an en­vi­ron­ment, and why? How do we move from a repos­i­tory to a lo­cal en­vi­ron­ment and start work­ing on a code­base? How does that code­base get de­ployed to a server?</p>\n<p>I’ve seen Wordpress sys­tems that are frozen in time in 2006 — <span class=\"small-caps\">FTP</span> to the server and edit a <span class=\"small-caps\">CSS</span> ﬁle on pro­duc­tion, or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>deploy” your theme by up­load­ing a <code>.zip</code>. I’m in­ter­ested in how we can lower the cog­ni­tive over­head for get­ting a Wordpress pro­ject up and run­ning, and join in with pre-pro­cess­ing, com­pil­ing, con­tainer­iz­ing, test­ing, and all the re­ally ex­cel­lent things that we’ve come to ex­pect from our web stacks over the past few years.</p>\n<p>Another is­sue I have with Wordpress is its com­mit­ment to auto-mag­i­cal routes and ren­der­ing tem­plates with ob­scure and com­pli­cated <code>.php</code> pat­terns that ba­si­cally con­cate­nate strings. I’m in­ter­ested in ex­plicit routes — ei­ther hard-coded or pa­ra­me­ter­ized — and sep­a­rat­ing con­cerns be­tween logic and tem­plate.</p>\n<p>A lot of this boils down to a dis­agree­ment be­tween what Wordpress thinks a site should be and what I end up us­ing it for. Wordpress as de­signed dis­tin­guishes be­tween your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>site” and your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>theme”. Your<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>site” is the con­tent in the data­base, the op­tions you’ve saved, and the menus and wid­gets you’ve in­stalled. It ex­pects<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>themes” to be pre­sen­ta­tions of this real web­site stuff. This model of web­sites per­pet­u­ates that<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>design” is some­thing that can be ap­plied over a web­site, a kind of dress­ing up of the real things. This is the in­verse, and per­haps a corol­lary to, the con­cept that de­sign­ing a web­site is just de­cid­ing what it looks like. It’s an idea that lives within the sys­tem of si­los be­tween de­sign and de­vel­op­ment, and that we can<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>design” a web­site in Photoshop or Sketch and hand off the comps to a de­vel­oper to build it. Which is how a lot of Wordpress pro­jects are built.</p>\n<p>In short, <a href=\"/texts/how-to-design-while-developing/\">I dis­agree</a> with this con­cept of web­sites. My po­si­tion is that de­sign­ing a web­site is both how it looks, how it works, and how the data and struc­tures are com­posed. Taking this ap­proach, con­trol­ling the ob­ject mod­els, the in­for­ma­tion ar­chi­tec­tures, and the tem­plates are all of equal im­por­tance. In my line of work, a Wordpress theme can not be ap­plied to any other site than the one that it was de­signed for, a site where the struc­ture was de­signed for the theme.</p>\n<h2>So why use Wordpress?</h2>\n<p>There are still a num­ber of re­ally good, com­pelling rea­sons to use Wordpress as a plat­form for build­ing web­sites. It’s got a ro­bust built-in com­ment­ing sys­tem with user ac­counts. It’s re­ally good for things that are shaped like blogs. It’s got a huge, well-main­tained ecosys­tem of plu­g­ins. It’s free. And since it’s most of the Internet, clients are re­ally, re­ally com­fort­able with it.</p>\n<p>There are a cou­ple of rea­sons <em>not</em> to use Wordpress right now. Mostly these cen­ter around the im­pend­ing re­lease of Wordpress 5.0 and the Gutenberg ed­i­tor, which has a num­ber of con­cerns around plu­gin com­pat­i­bil­ity and ac­ces­si­bil­ity for au­thors.</p>\n<p>But that’s okay, since we’ve de­cided to use Wordpress 4.x. As we all know, pick­ing a ver­sion of Wordpress and then never up­grad­ing it is one of the time hon­ored tra­di­tions of Wordpress de­vel­op­ment.</p>\n<h2>How does this work even</h2>\n<p>Let’s start at the end.</p>\n<p>We’re go­ing to be host­ing our pro­duc­tion Wordpress site on a <a href=\"https://www.digitalocean.com/\">Digital Ocean</a> droplet — the <a href=\"https://www.digitalocean.com/pricing/\">small­est</a> one they have — for $5 per month. Depending on the pro­ject life­cy­cle, we can set up more droplets for a stag­ing server and a de­vel­op­ment server. At Fuzzco we used dev servers to show sites to the in­ter­nal team, stag­ing servers to show sites to the client, and pro­duc­tion servers to show sites to the pub­lic.</p>\n<p>I don’t know about you, but I per­son­ally don’t su­per love man­ag­ing my vir­tual pri­vate servers man­u­ally. In or­der to de­ploy our code­bases to Digital Ocean we’ll use the phe­nom­e­nal tool <a href=\"https://nanobox.io/\">Nanobox</a>. Nanobox is an op­er­a­tions layer that han­dles con­tainer­iz­ing ap­pli­ca­tions and de­ploy­ing them ag­nos­ti­cally to a cloud ser­vice provider. Nanobox will de­ploy our code from the com­mand line to any one of our droplets.</p>\n<p>Nanobox will also con­tainer­ize and run an ap­pli­ca­tion in a vir­tual ma­chine <em>lo­cally</em>. This means we’ll use it to run our de­vel­op­ment en­vi­ron­ment, and en­sure that all of our en­vi­ron­ments are iden­ti­cal. No more wor­ry­ing about <span class=\"small-caps\">PHP</span> ver­sions and ex­ten­sions and plu­g­ins. No more run­ning <span class=\"small-caps\">MAMP</span> or MySQL or Apache or what­ever on your lo­cal ma­chine be­fore any­thing works. Nanobox de­ﬁnes the server in a <code>.yaml</code> ﬁle, and it will al­ways be the same. It also han­dles all the sync­ing be­tween our lo­cal disk and our vir­tual en­vi­ron­ment.</p>\n<p>So now that we know how our code is go­ing from lo­cal to pro­duc­tion, we can think for a sec­ond about <em>how</em> it’s go­ing to do that, and how we’re go­ing to man­age our data.</p>\n<p>The data­base on the pro­duc­tion server is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>canonical”. That means that the data­base the client in­ter­acts with is the one true data­base, and we must treat it with care and at­ten­tion. We’ll never change that data­base our­selves, and we’ll move that data­base <em>down­stream</em> from pro­duc­tion to stag­ing to dev to lo­cal in or­der to de­velop against our real data. Importantly, we don’t want to mi­grate the data­base man­u­ally ei­ther. It’s a lit­tle ex­pen­sive but us­ing <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/pricing/\">Migrate <span class=\"small-caps\">DB</span> Pro</a> is an in­cred­i­ble re­source for this part. I guess one could also look into <a href=\"https://github.com/wp-sync-db/wp-sync-db\">al­ter­na­tives</a> for per­sonal pro­jects.</p>\n<p>The canon­i­cal <em>code­base</em> lives in ver­sion con­trol, and moves the other di­rec­tion. From Github to lo­cal to dev to stag­ing to pro­duc­tion, amen. The only things we need to track in ver­sion con­trol are what makes our pro­ject unique. Practically, this means we need to track our theme and our plu­g­ins. Wordpress core ﬁles are not spe­cial, and we should not ﬁll our repos­i­to­ries with them.</p>\n<h2>Getting started</h2>\n<p>At this point it’s worth <a href=\"https://docs.nanobox.io/install/\">get­ting started with Nanobox</a>. I back the con­tain­ers with <a href=\"https://docs.nanobox.io/install/#lightweight-vm-virtualbox\">VirtualBox</a>, since at the time I started this it was slightly more sta­ble than Docker on MacOS High Sierra. Once Nanobox &amp; Virtualbox/Docker is in­stalled, set up <a href=\"https://docs.nanobox.io/providers/hosting-accounts/digitalocean/\">Digital Ocean as your provider</a>. Once that’s done, we have every­thing we need to get started!</p>\n<p>I’ll be talk­ing through a pro­ject I built in or­der to fa­cil­i­tate build­ing other pro­jects. This will be more in­tense than you might need for a sin­gle build, but this was de­signed a tool that any­one can use to get started quickly. Here’s the ba­sic struc­ture of our repo:</p>\n<pre><code>📁 <span class=\"hljs-string\">/project-name</span>\n⮑ 📄 <span class=\"hljs-string\">.gitignore</span>    <span class=\"hljs-comment\"># includes /wp</span>\n⮑ 📄 package.json  <span class=\"hljs-comment\"># tooling lives here</span>\n⮑ 📄 readme.md     <span class=\"hljs-comment\"># be nice, write docs    </span>\n⮑ 📁 theme         <span class=\"hljs-comment\"># our theme codebase</span>\n⮑ 📁 plugins       <span class=\"hljs-comment\"># vendor plugins</span>\n⮑ 📁 scripts       <span class=\"hljs-comment\"># some helpers</span>\n</code></pre>\n<p>The crux of the pro­ject is our <code>boxfile.yml</code> con­ﬁg­u­ra­tion ﬁle. This is what Nanobox uses to cre­ate our con­tain­ers. It looks like this!</p>\n<pre><code><span class=\"hljs-comment\"># /boxfile.yml                </span>\n<span class=\"hljs-attr\">run.config:</span>                    <span class=\"hljs-comment\"># </span>\n  <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">php</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">engine.config:</span>               <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-string\">php-7.0</span>           <span class=\"hljs-comment\"># Defines PHP version</span>\n    <span class=\"hljs-attr\">document_root:</span> <span class=\"hljs-string\">&#x27;wp/&#x27;</span>       <span class=\"hljs-comment\"># Dir to serve app from</span>\n    <span class=\"hljs-attr\">extensions:</span>                <span class=\"hljs-comment\"># PHP extensions we need</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gd</span>                     <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mysqli</span>                 <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">curl</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zlib</span>                   <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ctype</span>                  <span class=\"hljs-comment\">#</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">web.wp:</span>                        <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">start:</span> <span class=\"hljs-string\">php-server</span>            <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">network_dirs:</span>                <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-attr\">data.storage:</span>              <span class=\"hljs-comment\">#</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wp/wp-content/uploads/</span> <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.db:</span>                       <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/mysql:5.6</span>     <span class=\"hljs-comment\"># Nanobox DB magic</span>\n                               <span class=\"hljs-comment\">#</span>\n<span class=\"hljs-attr\">data.storage:</span>                  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">nanobox/unfs:0.9</span>      <span class=\"hljs-comment\">#</span>\n</code></pre>\n<p>As noted above, we’ll be serv­ing our en­tire in­stal­la­tion of Wordpress in the <code>/wp</code> di­rec­tory. This will hold all the Wordpress core ﬁles and com­piled theme code, none of of which we need or want in ver­sion con­trol. As such, make sure this is listed along­side <code>node_modules</code> in the <code>.gitignore</code>.</p>\n<p>Since we’ve de­cided that we don’t want to track these ﬁles, but we need them to ac­tu­ally have a pro­ject, we can write a helper script to take care of the gap be­tween those two ideas.</p>\n<p>Here are the scripts we’re go­ing to write to help us han­dle this process:</p>\n<pre><code>📁 /<span class=\"hljs-keyword\">project</span>-name\n⮑ 📁 scripts\n   ⮑ 📄 check-<span class=\"hljs-keyword\">install</span>.sh <span class=\"hljs-comment\"># Installs Wordpress core files.</span>\n   ⮑ 📄 init.sh          <span class=\"hljs-comment\"># Runs our setup helper.</span>\n   ⮑ 📄 prestart.sh      <span class=\"hljs-comment\"># Checks if we need to init.</span>\n   ⮑ 📄 setup.js         <span class=\"hljs-comment\"># Cute lil&#x27; CLI helper.</span>\n</code></pre>\n<p>The ﬁrst thing we’ll do is write a script that checks if <code>/wp</code> ex­ists. If it does­n’t, throw an er­ror that we need to ini­tial­ize the pro­ject since we don’t have any of the core ﬁles we need.</p>\n<pre><code><span class=\"hljs-comment\"># prestart.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;Project not initialized: Run `$ npm run init`&#x27;</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span>\nfi\n</code></pre>\n<p>I’m call­ing this <code>prestart</code> be­cause I want to run it be­fore <code>npm start</code>. Many times I’ll be on au­topi­lot, and af­ter cloning a repo sim­ply run <code>npm install</code> and <code>npm start</code>. This in­ter­rupts that process and lets me know I need a third step, <code>npm run init</code>. Let’s put this in our <code>package.json</code> scripts:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;init&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/init.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;prestart&quot;</span>: <span class=\"hljs-string\">&quot;./scripts/prestart.sh&quot;</span>,\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;npm run dev&quot;</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>We’ll get to our dev tool­ing later. Lets take a look at what our <code>init.sh</code> script does:</p>\n<pre><code><span class=\"hljs-comment\"># init.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">./scripts</span>/setup.js  \n</code></pre>\n<p>Not much! This just runs our setup <span class=\"small-caps\">CLI</span> helper. You might not need all this, but since I built this sys­tem to help a team of de­vel­op­ers work on <em>many many</em> pro­jects you’re gonna get it any­way.</p>\n<pre><code><span class=\"hljs-comment\">// setup.js</span>\n\n<span class=\"hljs-comment\">// some nice deps for making a CLI.</span>\n<span class=\"hljs-keyword\">const</span> prompt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;prompt&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> exec = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;child_process&#x27;</span>).exec\n<span class=\"hljs-keyword\">const</span> colors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;colors/safe&quot;</span>)\n\n<span class=\"hljs-comment\">// Run and log a bash command</span>\n<span class=\"hljs-keyword\">const</span> bash = <span class=\"hljs-function\"><span class=\"hljs-params\">cmd</span> =&gt;</span> {\n  msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Running: <span class=\"hljs-subst\">${cmd}</span>`</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n    exec(cmd, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, stdout, stderr</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) reject(err)\n      resolve(stdout, stderr)\n    })\n  });\n}\n\n<span class=\"hljs-comment\">// Log a message</span>\n<span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-function\">(<span class=\"hljs-params\">color, text</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(colors[color](text))\n}\n\n<span class=\"hljs-comment\">// do the magic</span>\n<span class=\"hljs-keyword\">const</span> setup = <span class=\"hljs-function\">(<span class=\"hljs-params\">err, result</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) msg(<span class=\"hljs-string\">`red`</span>, err)\n\n  msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">&#x27;WordPress configuration values ☟&#x27;</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> result) {\n    msg(<span class=\"hljs-string\">&#x27;yellow&#x27;</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${key}</span>: <span class=\"hljs-subst\">${result[key]}</span>;`</span>)\n  }\n  <span class=\"hljs-comment\">// run our check-install script.</span>\n  bash(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.cwd()}</span>/scripts/check-install.sh`</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// add our project to hostfile</span>\n    bash(<span class=\"hljs-string\">`nanobox dns add local <span class=\"hljs-subst\">${result.name}</span>.local`</span>)\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">ok</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// explain the next step</span>\n    msg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">`Run npm start, then finish setting up WordPress at <span class=\"hljs-subst\">${result.name}</span>.local/wp-admin`</span>)\n  })\n}\n\nmsg(<span class=\"hljs-string\">&#x27;green&#x27;</span>, <span class=\"hljs-string\">&#x27;Making Progress!&#x27;</span>)\nprompt.start();\nprompt.get({\n  <span class=\"hljs-attr\">properties</span>: {\n    <span class=\"hljs-attr\">name</span>: {\n      <span class=\"hljs-attr\">description</span>: colors.magenta(<span class=\"hljs-string\">&quot;Project name:&quot;</span>)\n    }\n  }\n}, setup);\n</code></pre>\n<p>This will open a <span class=\"small-caps\">CLI</span> ask­ing for the name of the pro­ject, run the <code>check-install.sh</code> script, cre­ate the host­ﬁle line for our lo­cal <span class=\"small-caps\">DNS</span> at <code>&lt;project-name&gt;.local</code>, and log the next ac­tion that you need to take to ﬁn­ish in­stalling Wordpress.</p>\n<p>Lets take a peek at our <code>check-install.sh</code> ﬁle:</p>\n<pre><code><span class=\"hljs-comment\"># check-install.sh</span>\n<span class=\"hljs-comment\">#!/bin/bash</span>\necho <span class=\"hljs-string\">&#x27;Check to make sure wordpress is here at all&#x27;</span>\n<span class=\"hljs-keyword\">if</span> test -d .<span class=\"hljs-regexp\">/wp/</span>\nthen\n  echo <span class=\"hljs-string\">&#x27;yup we good&#x27;</span>\n<span class=\"hljs-keyword\">else</span>\n  echo <span class=\"hljs-string\">&#x27;nope we need that&#x27;</span>\n  degit git@github.com:nanobox-quickstarts/nanobox-wordpress.git wp\nfi\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/plugins/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/plugins/</span>\nrsync -va --<span class=\"hljs-keyword\">delete</span> .<span class=\"hljs-regexp\">/theme/</span> .<span class=\"hljs-regexp\">/wp/</span>wp-content<span class=\"hljs-regexp\">/themes/my</span>-theme\n</code></pre>\n<p>Very sim­i­lar to <code>prestart</code>! The biggest dif­fer­ence is the bit where we use <code>degit</code> to clone Nanobox’s of­ﬁ­cial Wordpress repo into our un­tracked <code>/wp</code> di­rec­tory. Degit will only get the head ﬁles, and none of the git his­tory. Nor will it keep the <code>.git</code> ﬁle, ba­si­cally mak­ing this a su­per clean, su­per fast way to down­load a di­rec­tory of ﬁles. It’s great. The last thing this does is wipe out any themes or plu­g­ins that we don’t want our need in the core ﬁles and syncs out own tracked di­rec­to­ries to the cor­rect places in the Wordpress core ﬁle struc­ture.</p>\n<p>Now would be a time to talk about plu­g­ins.</p>\n<h2>What’s up with plu­g­ins?</h2>\n<p>Wordpress has a mil­lion plu­g­ins. We’re go­ing to fo­cus on some of the ba­sic ones that al­most every Wordpress pro­ject ever needs, and should hon­estly be part of Wordpress. Building sites with­out these is a pain. Here they are:</p>\n<pre><code>📁 /project-name\n⮑ 📁 plugins\n  ⮑ 📁 advanced-custom-fields-<span class=\"hljs-keyword\">pro</span>\n  ⮑ 📁 custom-<span class=\"hljs-keyword\">post</span>-types-ui\n  ⮑ 📁 timber-library\n  ⮑ 📁 wp-migrate-<span class=\"hljs-keyword\">db</span>-<span class=\"hljs-keyword\">pro</span>\n</code></pre>\n<p>There are a cou­ple more in my repo to do things like or­der posts in the <span class=\"small-caps\">CMS</span> and im­port CSVs. Not su­per nec­es­sary, so we won’t talk about theme here.</p>\n<h3>Advanced Custom Fields</h3>\n<p><a href=\"https://www.advancedcustomfields.com/\"><span class=\"small-caps\">ACF</span></a> is a sta­ple of Wordpress de­vel­op­ment. It lets us de­ﬁne new key/​value pairs to ex­tend the data model of things like posts and pages, and al­lows us to cre­ate a set of global vari­able avail­able from any­where. Sounds sim­ple, sur­pris­ing it’s not part of Wordpress.</p>\n<h3>Custom Post Types <span class=\"small-caps\">UI</span></h3>\n<p><a href=\"https://wordpress.org/plugins/custom-post-type-ui/\">CPT-UI</a> cre­ates an in­ter­face in the ad­min panel for cre­at­ing new post types. Out of the box, Wordpress comes with <code>Posts</code> and <code>Pages</code>. CPT-UI lets us build new types like <code>Projects</code> or <code>Case Studies</code> or what­ever need for our data model. Again, sur­pris­ing that this  is­n’t just part of Wordpress. C’est la vivre.</p>\n<h3><span class=\"small-caps\">WP</span> Migrate <span class=\"small-caps\">DB</span></h3>\n<p><a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">Migrate <span class=\"small-caps\">DB</span></a> lets us … mi­grate … our … <span class=\"small-caps\">DB</span>. This gives us the abil­ity to sync our data­bases across en­vi­ron­ments and get me­dia up­loads and things with­out need­ing to write magic MySQL queries while tun­neled into open data­base ports on vir­tual ma­chines. This is bet­ter. Believe me.</p>\n<h3>Timber</h3>\n<p>The <a href=\"https://www.upstatement.com/timber/\">Timber</a> li­brary from Upstatement is the great­est thing to hap­pen to Wordpress de­vel­op­ment, af­ter those plu­g­ins that should just be part of Wordpress. Timber in­tro­duces the con­cept of <em>lay­out tem­plates</em> to Wordpress. This lets us write <span class=\"small-caps\">PHP</span> to ma­nip­u­late data, and pass that data to a tem­plate ﬁle where we can write <a href=\"https://twig.symfony.com/\">Twig tem­plates</a> rather than com­pos­ing strings in <span class=\"small-caps\">PHP</span>. Basically …</p>\n<pre><code><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> $myvar <span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>Turns in to:</p>\n<p>{% raw %}</p>\n<pre><code><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">myvar</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p>{% en­draw %}</p>\n<p>This lets us write tem­plates with a tem­plat­ing lan­guage, and write server-side busi­ness logic in a server-side pro­gram­ming lan­guage. Truly rev­o­lu­tion­ary.</p>\n<h2>What we talk about when we talk about Wordpress de­vel­op­ment: or, The Theme.</h2>\n<p>With all this ini­tial work around Wordpress core, de­vel­op­ment en­vi­ron­ments, and a ba­sic plu­gin ecosys­tem in place we can start talk­ing about the good stuff: the theme!</p>\n<pre><code>📁 /project-name\n⮑ 📁 theme\n   ⮑ 📁 es6              # Source JS\n   ⮑ 📁 scss             # Source SCSS\n   ⮑ 📁 routes           # PHP<span class=\"hljs-built_in\"> route </span>logic files\n      ⮑ 📄 index.php\n      ⮑ 📄 page.php\n      ⮑ 📄 post.php\n   ⮑ 📁 views            # Twig templates\n      ⮑ 📁 layouts\n      ⮑ 📁 pages\n      ⮑ 📁 partials\n   ⮑ 📄 functions.php    # This includes routing.\n   ⮑ 📄 screenshot.png   # Theme preview image.\n   ⮑ 📄 index.php        # Need this, but it<span class=\"hljs-string\">&#x27;s empty.¯\\_(ツ)_/¯\n</span></code></pre>\n<p>We won’t get too deep into this, since we’re get­ting into more con­ven­tional ter­ri­tory here. Basically our <code>es6</code> di­rec­tory holds source <span class=\"small-caps\">JS</span> that will get com­piled into a bun­dle. Same with the <code>scss</code> di­rec­tory, which gets com­piled into css. We han­dle that with npm scripts in the <code>package.json</code>.</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;css&quot;</span>: <span class=\"hljs-string\">&quot;node-sass ./theme/scss/style.scss theme/style.css --watch&quot;</span>,\n    <span class=\"hljs-string\">&quot;js&quot;</span>: <span class=\"hljs-string\">&quot;rollup -c -w&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>Hopefully none of this is to un­usual — if it’s is I rec­om­mend read­ing Paul Pederson’s <a href=\"http://paulcpederson.com/articles/npm-run/\">ex­cel­lent ar­ti­cle on npm scripts</a>.</p>\n<p>There is one part of this I want to touch on be­fore mov­ing on:</p>\n<pre><code><span class=\"hljs-comment\"># package.json</span>\n{\n  <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./plugins/ ./wp/wp-content/plugins/&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;rsync -va --delete ./theme/ ./wp/wp-content/themes/fuzzco&quot;</span>,    \n    <span class=\"hljs-string\">&quot;watch&quot;</span>: <span class=\"hljs-string\">&quot;rerun-script&quot;</span>,\n    <span class=\"hljs-string\">...</span>\n  },\n  <span class=\"hljs-string\">&quot;watches&quot;</span>: {\n    <span class=\"hljs-string\">&quot;sync:plugins&quot;</span>: <span class=\"hljs-string\">&quot;plugins/**/*.*&quot;</span>,\n    <span class=\"hljs-string\">&quot;sync:theme&quot;</span>: <span class=\"hljs-string\">&quot;theme/**/*.*&quot;</span>\n  },\n  <span class=\"hljs-string\">...</span> \n</code></pre>\n<p>This bit sets up a watcher on our <code>theme</code> and <code>plugins</code> di­rec­tory, which sync our tracked work­ing ﬁles to the cor­rect place in our Wordpress core ﬁle struc­ture.</p>\n<h2>Functions, Routes, and Views</h2>\n<p>The last thing I want to touch on is the ba­sic struc­ture of us­ing Timber to match routes with views.</p>\n<pre><code><span class=\"hljs-comment\">/** functions.php */</span>\nRoutes::map(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$params</span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/:page&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$params</span>) </span>{\n  $page = get_page_by_path($params[<span class=\"hljs-string\">&#x27;page&#x27;</span>]);\n  <span class=\"hljs-keyword\">if</span> ($page) {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/page.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n      Routes::load(<span class=\"hljs-string\">&#x27;routes/404.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">404</span>);\n  }\n});\nRoutes::map(<span class=\"hljs-string\">&#x27;/blog/:post&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$params</span>)</span>{\n  Routes::load(<span class=\"hljs-string\">&#x27;routes/post.php&#x27;</span>, $params, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">200</span>);\n});\n</code></pre>\n<p>These are Timber routes de­ﬁned in the <code>functions.php</code> ﬁle. This re­places the stan­dard rout­ing of Wordpress, and we have change the struc­ture of the Wordpress perma­links to any­thing other than the de­fault to have it work. This is doc­u­mented in Timber.</p>\n<p>When our server gets a re­quest at a route of <code>/page-name</code>, it will call the <code>page.php</code> ﬁle and pass it the params as­so­ci­ated with the route.</p>\n<pre><code><span class=\"hljs-comment\">/** page.php */</span>\n<span class=\"hljs-meta\">&lt;?php</span>\n  $context = Timber::get_context();\n  $post = <span class=\"hljs-keyword\">new</span> TimberPost();\n  $context[<span class=\"hljs-string\">&#x27;page&#x27;</span>] = $post;\n  \n  Timber::render( <span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">&#x27;views/pages/page-&#x27;</span> . $post-&gt;post_name . <span class=\"hljs-string\">&#x27;.twig&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;views/pages/page.twig&#x27;</span>\n  ), $context );\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>The <code>page.php</code> ﬁle as­signs some vari­ables, in­ter­acts with Wordpress to get and shape our data, and then ren­ders the twig ﬁle as­so­ci­ated with the page. In this case, it’s go­ing to see if there’s a tem­plate that matches the name of our page, oth­er­wise it will ren­der the de­fault page tem­plate.</p>\n<h2>Back to the be­gin­ning</h2>\n<p>You’ve built your theme! Maybe it’s a sim­ple hello world, maybe it’s a heavy duty big ol’ thing. Either way, it’s time to de­ploy.</p>\n<p>You can use Nanobox to cre­ate a droplet for your server. Nanobox will give your pro­ject a name in their sys­tem, and ex­pose the <span class=\"small-caps\">URL</span> for the server at <code>&lt;your-project&gt;.nanoapp.io</code>. I like to use the con­ven­tion <code>project-dev</code>, <code>project-stage</code>, and <code>project-prod</code>. Once you cre­ate your pro­ject in Nanobox, the hard part is over and you can let them do the heavy lift­ing:</p>\n<pre><code>$ nanobox deploy <span class=\"hljs-keyword\">project</span>-dev\n</code></pre>\n<p>Or we can map this to our <span class=\"small-caps\">NPM</span> script:</p>\n<pre><code>$ npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> deploy:dev  </span>\n</code></pre>\n<p>This will con­tainer­ize our ap­pli­ca­tion, push it to our droplet, hy­drate the en­tire thing, and serve! Now we can use Migrate <span class=\"small-caps\">DB</span> to move our data­base around, and we’re in busi­ness.</p>\n<h2>Putting it all to­gether</h2>\n<p><a href=\"https://github.com/nikolaswise/nanobox-sapper-1\">The pro­ject repo</a> is a turnkey, ready to roll ver­sion of all the above. It con­tains all the tool­ing needed to get started, and if you’ve fol­lowed along with this guide, you should be able to get started in no time.</p>\n<p>As al­ways, feel free to reach out to me in your venue of choice to talk about any of this — I would be happy to help you set this up for your own Wordpress pro­ject!</p>\n"}