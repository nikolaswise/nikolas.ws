{"meta":{"title":"Building a Client Library for ArcGIS","slug":"building-a-client-library","date":"2015.3.09","description":"<p>Writing a wrap­per client li­brary to smooth out de­sign weird­ness at the <span class=\"small-caps\">API</span> level leads to plenty of de­sign think­ing on the way things should be.</p>\n","collection":"texts","timestamp":1425884400000},"content":"<p>This year I built a JavaScript wrap­per for Node and the Browser around the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> to sim­plify work­ing with that plat­form as a de­vel­oper. This was as an ex­er­cise in <span class=\"small-caps\">API</span> de­sign, as well as mak­ing a tool that I wanted to use but did­n’t ex­ist yet. The pro­ject is a bare-bones li­brary to ease in­ter­ac­tions with the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> in JavaScript and Node apps.</p>\n<p>Sometimes&thinsp;&mdash;&thinsp;and for sure in this case&thinsp;&mdash;&thinsp;an <span class=\"small-caps\">API</span> can be rough, built over time, and not pro­vide the sort of log­i­cal mod­els that work well with spe­ciﬁc lan­guage en­vi­ron­ments. This was the case with the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> that I was run­ning in to. A lot of the de­ci­sions had been made over the course of years, and did­n’t trans­late very smoothly a lan­guage as young as Node.js.</p>\n<p>The ﬁrst step was to ﬁg­ure out what prob­lems I wanted to solve. A lot of my work with Esri <span class=\"small-caps\">PDX</span> has been about con­tent han­dling, and so this is where I started. Reading <em>all</em> the doc to get a big pic­ture of what’s go­ing on with the <span class=\"small-caps\">API</span>, and talk to every­one who’s done work like this be­fore to ﬁg­ure out what prob­lems <em>they</em> needed to solve was the ﬁrst step. From there I felt I had enough con­text and in­for­ma­tion to make the thing use­ful for more peo­ple than just me, and make sure that it was co­her­ent with the un­der­ly­ing goals of the orig­i­nal <span class=\"small-caps\">API</span>.</p>\n<p>This pro­ject works to sim­plify and unify the gap be­tween the ArcGIS <span class=\"small-caps\">REST</span> <span class=\"small-caps\">API</span> and a con­tem­po­rary Node ap­pli­ca­tion. This li­brary is a <span class=\"small-caps\">UI</span> in the most ba­sic sense of the term — it pro­vides an in­ter­face be­tween the de­vel­oper and the servers. That in­ter­face needs to be well de­signed and thought­ful in or­der to make the process as smooth, in­tu­itive, and plea­sur­able as pos­si­ble.</p>\n<p>One of the most im­por­tant parts of the pro­ject is to pro­vide de­vel­op­ers with a way to ac­cess the ArcGIS plat­form with­out need­ing to ar­chi­tect their en­tire ap­pli­ca­tion around opin­ion­ated frame­works (like Dojo, for ex­am­ple). Though the li­brary it­self is writ­ten in <span class=\"small-caps\">ES6</span>, it’s dis­trib­uted as plain, nor­mal <span class=\"small-caps\">ES5</span>&thinsp;&mdash;&thinsp;both as a node pack­age and a pack­aged bun­dle. This means it works both in Node and the browser, and has very few opin­ions on how it in­te­grates with the rest of your app.</p>\n<p>Right now, the li­brary wraps most of the ba­sic plat­form con­tent man­age­ment and in­ter­ac­tions - get­ting and edit­ing users, or­ga­ni­za­tions, and items. The Node ArcGIS Client Library is an open source pro­ject — so it’s scope will in­crease as the com­mu­nity works to ac­com­plish more goals and work­ﬂows.</p>\n<h2>Setting up the client</h2>\n<p>The ﬁrst step in us­ing the li­brary is ini­tial­iz­ing the client with your tar­get por­tal.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">ArcGIS</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">require</span>(<span class=\"hljs-string\">&#x27;arcgis&#x27;</span>)</span>\n<span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">ArcGIS</span>()</span>\n</code></pre>\n<p>This sets up a de­fault ob­ject for in­ter­act­ing with the <span class=\"small-caps\">API</span>. This de­fault is go­ing to talk to ArcGIS Online as an anony­mous, unau­then­ti­cated user. One can au­then­ti­cate this client ses­sion as a named user by pass­ing in a user to­ken ob­tained from a suc­cess­ful OAuth lo­gin process.</p>\n<pre><code><span class=\"hljs-variable\">var</span> <span class=\"hljs-variable\">arcgis</span> = <span class=\"hljs-function\"><span class=\"hljs-title\">Arcgis</span>({\n  <span class=\"hljs-variable\">token</span>: <span class=\"hljs-variable\">namedUserToken</span>\n})</span>\n</code></pre>\n<p>This is­n’t ex­clu­sive to ArcGIS Online. The <span class=\"small-caps\">API</span> for in­ter­act­ing with your or­ga­ni­za­tion’s in­stal­la­tion of Portal or Server is the same. Setting up the client ses­sion with your in­stance is done by spec­i­fy­ing your <span class=\"small-caps\">API</span> do­main.</p>\n<pre><code><span class=\"hljs-attr\">var</span> <span class=\"hljs-string\">arcgis = Arcgis({</span>\n  <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">&#x27;ago.my-server.com&#x27;,</span>\n  <span class=\"hljs-attr\">token</span>: <span class=\"hljs-string\">namedUserToken</span>\n<span class=\"hljs-attr\">})</span>\n</code></pre>\n<p>Beyond the ini­tial­iza­tion of the client, the li­brary is ex­clu­sively async. All the func­tions re­turn promises by de­fault.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> (<span class=\"hljs-params\">m</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(m)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ohNo</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(err)\n}\narcgis.request()\n.then(log)\n.catch(ohNo)\n</code></pre>\n<p>You can also pass in a node-style call­back, if you’d pre­fer.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">log</span> (<span class=\"hljs-built_in\">err</span>, results) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">err</span>) {\n    return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Error</span>(<span class=\"hljs-built_in\">err</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    console.<span class=\"hljs-built_in\">log</span>(results)\n  }\n}\narcgis.<span class=\"hljs-built_in\">request</span>({}, <span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>Both meth­ods work just as well, and use all the same busi­ness logic. I like promises, but maybe you don’t. This is one of the main rea­sons the li­brary does its best to avoid in­ﬂict­ing my opin­ions on your code­base.</p>\n<p>Once we have an au­then­ti­cated ses­sion, we can do all sorts of stuff — like ﬁg­ure out who we are:</p>\n<pre><code><span class=\"hljs-keyword\">function</span> hello (<span class=\"hljs-keyword\">user</span>) {\n  console.log(<span class=\"hljs-string\">&#x27;Hello, &#x27;</span> + <span class=\"hljs-keyword\">user</span>.firstName)\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(hello)\n</code></pre>\n<p>We can get all of the items that user has in the plat­form:</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getContent</span> (<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> user.content()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logContent</span> (<span class=\"hljs-params\">content</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(content)\n}\narcgis.user(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>)\n.then(getContent)\n.then(logContent)\n</code></pre>\n<p>Or a list of all the groups that a user is a mem­ber of.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> logGroups (item) {\n  item.<span class=\"hljs-keyword\">groups</span>.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-keyword\">group</span>) {\n    console.log(<span class=\"hljs-keyword\">group</span>.title)\n  })\n}\narcgis.<span class=\"hljs-keyword\">user</span>(<span class=\"hljs-string\">&#x27;NikolasWise&#x27;</span>).<span class=\"hljs-keyword\">then</span>(logGroups)\n</code></pre>\n<p>The li­brary also can in­ter­act with the user’s or­ga­ni­za­tion, re­turn­ing in­for­ma­tion, mem­bers, or all the con­tent as­so­ci­ated with the or­ga­ni­za­tion.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logOrg</span> <span class=\"hljs-params\">(org)</span> <span class=\"hljs-comment\">{\n  console.log(org)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">organization</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&#x27;esripdx&#x27;</span>)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logOrg)</span>\n</span></code></pre>\n<p>The or­ga­ni­za­tion call de­faults to<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>self’ — what­ever or­ga­ni­za­tion the cur­rent user is a mem­ber of.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMembers</span> <span class=\"hljs-params\">(org)</span></span> {\n  <span class=\"hljs-keyword\">return</span> org.members()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(members)</span></span> {\n  console.<span class=\"hljs-built_in\">log</span>(members)\n}\narcgis.organization().<span class=\"hljs-keyword\">then</span>(getMembers).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>Many of the con­tent calls are ab­strac­tions or helper meth­ods for longer, more com­pli­cated calls to the <code>search</code> end­point.</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getContent</span> <span class=\"hljs-params\">(org)</span></span> {\n  <span class=\"hljs-keyword\">return</span> org.content()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span> <span class=\"hljs-params\">(items)</span></span> {\n  console.<span class=\"hljs-built_in\">log</span>(items)\n}\narcgis.organization().<span class=\"hljs-keyword\">then</span>(getContent).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-built_in\">log</span>)\n</code></pre>\n<p>In this way we are able to cre­ate a tran­si­tional layer be­tween the <span class=\"small-caps\">API</span> it­self (a su­per com­pli­cated call to the search end­point) and what ap­pli­ca­tion de­vel­op­ers need (all my or­ga­ni­za­tion’s con­tent).</p>\n<h2>Working with con­tent</h2>\n<p>Platform con­tent is the weak­est link in the li­brary as of to­day. ArcGIS sup­ports a huge range of item types, and quite a num­ber of so­phis­ti­cated things you can do with those item types. For now the ba­sics are more or less in place — like get­ting an item’s de­tails:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> layerID = <span class=\"hljs-string\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logItem</span> <span class=\"hljs-params\">(item)</span> <span class=\"hljs-comment\">{\n  console.log(item)\n}</span>\n<span class=\"hljs-title\">arcgis</span>.<span class=\"hljs-title\">item</span><span class=\"hljs-params\">(layerID)</span>.<span class=\"hljs-title\">then</span><span class=\"hljs-params\">(logItem)</span>\n</span></code></pre>\n<p>Or up­dat­ing the those de­tails and edit­ing the per­mis­sions:</p>\n<pre><code>var layerId = <span class=\"hljs-symbol\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb</span>&#x27;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateItem</span> (item) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.update({</span>\n    snippet: <span class=\"hljs-symbol\">&#x27;Building</span> footprints <span class=\"hljs-keyword\">in</span> my neighborhood <span class=\"hljs-keyword\">in</span> Portland, Oregon&#x27;\n  })\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shareItem</span> (item) {\n  console.log(item)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item.permissions({</span>\n    <span class=\"hljs-keyword\">access</span>: <span class=\"hljs-symbol\">&#x27;public</span>&#x27;\n  })\n}\narcgis.item(layerId)\n.<span class=\"hljs-keyword\">then</span>(updateItem)\n.<span class=\"hljs-keyword\">then</span>(shareItem)\n</code></pre>\n<p>So far, there’s some sup­port for item-type-spe­ciﬁc meth­ods that are start­ing to open up the pos­si­bil­i­ties of ma­nip­u­lat­ing your con­tent from Node — like get­ting all the data in a layer.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> layerID = <span class=\"hljs-string\">&#x27;a5e5e5ac3cfc44dfa8e90b92cd7289fb&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getData</span> (<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> item.data()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logData</span> (<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(data)\n}\narcgis.item(layerId)\n.then(getData)\n.then(logData)\n</code></pre>\n<p>There is a lot more of the plat­form that we could cover than this - ser­vices, analy­sis, layer cre­ation and tile pub­lish­ing all are ac­tions that this li­brary or ones like it could cover.</p>\n"}