{"meta":{"title":"Joseki Party","slug":"joseki-party","date":"2016.08.31","site":"http://joseki.party/","description":"<p>The sim­plest game of <em>Baduk</em>, <em>Weiqi</em>, or <em>Go</em> this side of the in­ter­net. Start a game of Go, and play with a friend sim­ply by send­ing them a link. Invite peo­ple to wit­ness your vic­tory&thinsp;&mdash;&thinsp;or hu­mil­i­at­ing de­feat de­pend­ing on how good your friend is.</p>\n","template":"_templates/project.html","block":"text","collection":"projects","timestamp":1472626800000},"content":"<h3>Concept</h3>\n<p>I’ve been play­ing Go (poorly) for the past 10 years or so ( on and off), so when <a href=\"http://paulcpederson.com/\">Paul</a> asked me if I knew how to play af­ter the re­cent <a href>tri­umph of AlphaGo</a> over Lee Sedol, 9 Dan, I was pretty ex­cited to have an op­po­nent. Paul learned the game quick and soon was play­ing at my level (and slightly above!). We played over lunch, and one day when we were both work­ing from home rather than the of­ﬁce, we de­cided to see what was out there for play­ing on­line.</p>\n<p>While there are some amaz­ing servers out there for play­ing Go like <a href=\"https://online-go.com/\">Online Go</a>, <a href=\"https://www.gokgs.com/\"><span class=\"small-caps\">KGS</span></a>, and <a href=\"http://www.tygembaduk.com/\">Tygem Baduk</a>, they all re­quired a sig­nif­i­cant amount of set up, in­vest­ment, and it was tricky for us to just pick up a game with each other right away. What we needed was a Go server where one player could send a <span class=\"small-caps\">URL</span> to the other and start play­ing.</p>\n<p>So we built that!</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"https://photos.smugmug.com/Projects/Joseki-party/i-StZmkMS/0/4fb63fac/180x180/title-X3.png\" data-optimumx=\"1.6\" data-src=\"https://photos.smugmug.com/Projects/Joseki-party/i-StZmkMS/0/4fb63fac/{width}x5000/title-X3.png\" data-sizes=\"auto\" alt=\"Title Screen for Joseki Party\">\n      </picture>\n    </figure>\n  </p>\n<h3>The Big Idea</h3>\n<p>We had a cou­ple of hard re­quire­ments for the pro­ject, which shaped a lot of our de­sign de­ci­sions.</p>\n<p><strong>No Auth:</strong> We wanted to avoid any sort of user ac­count man­age­ment — no cre­at­ing ac­counts, no sign­ing in, no OAuth with Twitter or Facebook so you can share post your game points. This was go­ing to be about zero-fric­tion Go. Any set up where a user has to do any­thing be­yond start play­ing when they got a link was off the table.</p>\n<p><strong>No Server:</strong> Paul and I are front-end types — we both know plenty of NodeJS but dis­like writ­ing servers. This was go­ing to be pure client-side.</p>\n<p><strong>No Framework:</strong> There’s been a <em>lot</em> of dis­course about the state of JavaScript frame­works in 2016. And af­ter us­ing any num­ber of dif­fer­ent frame­works for any num­ber of pro­jects (and one no­table ex­am­ple of 4 frame­works in <em>one</em> pro­ject) I thought we could ex­per­i­ment with <a href=\"http://vanilla-js.com/\">Vanills <span class=\"small-caps\">JS</span></a> and see where that landed us.</p>\n<p><strong>Live:</strong> It’s a game, so we de­cided it should feel as close as pos­si­ble to sit­ting down and play­ing a game. We wanted to avoid browser re­freshes, no­ti­ﬁ­ca­tions, and things of that na­ture. When you play, your op­po­nent sees the move. When your op­po­nent plays, you see the move.</p>\n<p><strong><span class=\"small-caps\">MVI</span> Loops:</strong> A ma­jor part of the pro­ject was get­ting deep into the prac­ti­cal­i­ties of writ­ing <a href=\"http://staltz.com/unidirectional-user-interface-architectures.html\">uni­di­rec­tional ap­pli­ca­tions</a> with a Model → View → Intent sys­tem.</p>\n<p><strong>A New Visual Language:</strong> One of my ma­jor de­sign in­ter­ests is in the trans­la­tion be­tween the ana­log and the dig­i­tal. I wanted to take the same ap­proach to the aes­thet­ics of Go — at­tempt the keep the strik­ing na­ture of the game it­self but ditch any at­tempt at skeuo­mor­phism that per­vades prac­ti­cally <em>all</em> of the com­puter Go pro­grams I’ve ever played on.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"https://photos.smugmug.com/Projects/Joseki-party/i-dwf5h8p/0/ca9e4700/180x180/new-game-X3.png\" data-optimumx=\"1.6\" data-src=\"https://photos.smugmug.com/Projects/Joseki-party/i-dwf5h8p/0/ca9e4700/{width}x5000/new-game-X3.png\" data-sizes=\"auto\" alt=\"Starting a New Game\">\n      </picture>\n    </figure>\n  </p>\n<h3>Solutions</h3>\n<p><strong><a href=\"https://firebase.google.com/\">Firebase</a></strong> solved a lot of our prob­lems with the prac­ti­cal­i­ties of a shared, live game state with­out us­ing a server. We de­cided on gen­er­at­ing ran­dom names for games, and sav­ing the model of the game state un­der those keys in a sin­gle Firebase pro­ject. The <span class=\"small-caps\">NPM</span> pro­ject <strong><a href=\"https://www.npmjs.com/package/weiqi\">Weiqi by cjlarose</a></strong> pro­vided the es­sen­tial client-side tools for ma­nip­u­lat­ing the game, with a small ad­di­tion in a <strong><a href=\"https://github.com/nikolaswise/weiqi.js\">fork of the pro­ject</a></strong> to add a method for re­mov­ing dead stones from the board be­fore scor­ing. <strong><a href=\"https://surge.sh/\">Surge</a></strong> pro­vides the host­ing, and their ex­cel­lent <strong><a href=\"https://surge.sh/help/adding-a-200-page-for-client-side-routing\">client side rout­ing</a></strong> al­lowed us to make the whole thing a sin­gle page app.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"https://photos.smugmug.com/Projects/Joseki-party/i-N2Lk3cW/0/f7eece08/180x180/opening-X3.png\" data-optimumx=\"1.6\" data-src=\"https://photos.smugmug.com/Projects/Joseki-party/i-N2Lk3cW/0/f7eece08/{width}x5000/opening-X3.png\" data-sizes=\"auto\" alt=\"Opening State\">\n      </picture>\n    </figure>\n  </p>\n<p>The client side rout­ing lets us pro­vide a sin­gle link to Black, White, or a neu­tral ob­server who just wants to watch the game un­fold.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"https://photos.smugmug.com/Projects/Joseki-party/i-DzVDfMH/0/b867008a/180x180/gameplay-X3.png\" data-optimumx=\"1.6\" data-src=\"https://photos.smugmug.com/Projects/Joseki-party/i-DzVDfMH/0/b867008a/{width}x5000/gameplay-X3.png\" data-sizes=\"auto\" alt=\"Playing the Game\">\n      </picture>\n    </figure>\n  </p>\n<h3>The Fun Parts</h3>\n<p>Exploring dif­fer­ent aes­thet­ics that our game board could take was a real in­ter­est­ing un­der­tak­ing — one that is still on­go­ing. With the per­pet­u­ally ﬂuid na­ture of the web, we can cre­ate any num­ber of wildly un­ortho­dox color schemes.</p>\n<p>\n    <figure class=\"figure\">\n      <picture>\n        <img class=\"figure-image lazyload\" src=\"https://photos.smugmug.com/Projects/Joseki-party/i-C8sbxnC/0/180x180/changing-scheme-XL.jpg\" data-optimumx=\"1.6\" data-src=\"https://photos.smugmug.com/Projects/Joseki-party/i-C8sbxnC/0/{width}x5000/changing-scheme-XL.jpg\" data-sizes=\"auto\" alt=\"Changing the Color Scheme\">\n      </picture>\n    </figure>\n  </p>\n<p>So send me a link if you want to play! I’ve been play­ing noth­ing but 13x13 lately, so start a big­ger game and I’ll prob­a­bly be toast.</p>\n"}