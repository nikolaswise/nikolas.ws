/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_fragment(ctx) {
	let p0;
	let t1;
	let p1;
	let t3;
	let p2;
	let t4;
	let p3;
	let t6;
	let p4;
	let t7;
	let p5;
	let t9;
	let p6;
	let t10;
	let p7;
	let t12;
	let p8;
	let t13;
	let p9;
	let t15;
	let p10;
	let t17;
	let p11;
	let t19;
	let p12;
	let t20;
	let p13;
	let t22;
	let p14;
	let t24;
	let p15;
	let t26;
	let p16;
	let t27;
	let p17;

	return {
		c() {
			p0 = element("p");
			p0.textContent = "Alex & Connie Mattisse run Eastfork Pottery out of Asheville, NC. They both have a strong design sense, and a clear understanding of their brands identity and point of view.";
			t1 = space();
			p1 = element("p");
			p1.textContent = "This meant that the challenges of this project centered around pushing Shopify towards a more contemporary client-side user experience, including lazy-loading grid items and smooth client-side page transitions.";
			t3 = space();
			p2 = element("p");
			p2.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-cP8LrmX/0/ddeae95c/X5/home-X5.png" alt="home">`;
			t4 = space();
			p3 = element("p");
			p3.textContent = "The project had a strong editorial design aspect, simple layout with strong typography and photography.";
			t6 = space();
			p4 = element("p");
			p4.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-vQ7T4bm/0/d731ecea/X5/pottery-X5.png" alt="pottery">`;
			t7 = space();
			p5 = element("p");
			p5.textContent = "The catalog view used a staggered grid that repeated every 15 items. This meant I needed to request paginated sets of items in multiples of 15, then repeat the layout within the pages.";
			t9 = space();
			p6 = element("p");
			p6.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-hCHnw2C/0/2caa267e/X5/modal-X5.png" alt="modal">`;
			t10 = space();
			p7 = element("p");
			p7.textContent = "A quick shopping modal from the catalog view allows for browsing and adding items to the cart without going back and forth to individual item pages. The color option swatches swap the active image for quickly previewing the many colorways.";
			t12 = space();
			p8 = element("p");
			p8.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-zQQcHhf/0/e406a0b6/X5/description-X5.png" alt="description">`;
			t13 = space();
			p9 = element("p");
			p9.textContent = "The product detail pages needed to carry the editorial feel, and allow for the voice to exist for products.";
			t15 = space();
			p10 = element("p");
			p10.textContent = "[TK] The registry";
			t17 = space();
			p11 = element("p");
			p11.textContent = "[TK] The animated logo goodness.";
			t19 = space();
			p12 = element("p");
			p12.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-GFMq4LN/0/7f9fd3c9/X3/cart-X3.png" alt="cart">`;
			t20 = space();
			p13 = element("p");
			p13.textContent = "The UX for the cart needed to avoid the standard form submission for updating the cart contents. Abstracting the cart interactions into an API that can be called by use actions on the DOM was critical – and allowed us to have natural update methods tied directly to input interactions.";
			t22 = space();
			p14 = element("p");
			p14.textContent = "[TK] The quiz thingy, and the need to add arbitrary data to the cart that gets carried through to the packing manager.";
			t24 = space();
			p15 = element("p");
			p15.textContent = "[TK] The add a gift card bit";
			t26 = space();
			p16 = element("p");
			p16.innerHTML = `<img src="https://photos.smugmug.com/Projects/Eastfork/i-BwfNf2t/0/a59a20e1/X5/about-X5.png" alt="about">`;
			t27 = space();
			p17 = element("p");
			p17.innerHTML = `Another interesting design moment was the image treatment on the long-form content pages. Each page as a unique colorway in reference to the season glazes (configurable for each section from the Shopify Admin interface), and the images are a gray-scaled and multiplied over the background color. On hover, the image transitions to a full-color treatment. Animating the transition between these sates is tricky – CSS blend modes cannot be transitioned as they are binary states. The effect is achieved by having <em>two</em> images, one with the multiply &amp; grayscale, and one full-color but transparent positioned above it. On hover, the opacity of the top image is transitioned, providing the desired effect.`;
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			insert(target, t1, anchor);
			insert(target, p1, anchor);
			insert(target, t3, anchor);
			insert(target, p2, anchor);
			insert(target, t4, anchor);
			insert(target, p3, anchor);
			insert(target, t6, anchor);
			insert(target, p4, anchor);
			insert(target, t7, anchor);
			insert(target, p5, anchor);
			insert(target, t9, anchor);
			insert(target, p6, anchor);
			insert(target, t10, anchor);
			insert(target, p7, anchor);
			insert(target, t12, anchor);
			insert(target, p8, anchor);
			insert(target, t13, anchor);
			insert(target, p9, anchor);
			insert(target, t15, anchor);
			insert(target, p10, anchor);
			insert(target, t17, anchor);
			insert(target, p11, anchor);
			insert(target, t19, anchor);
			insert(target, p12, anchor);
			insert(target, t20, anchor);
			insert(target, p13, anchor);
			insert(target, t22, anchor);
			insert(target, p14, anchor);
			insert(target, t24, anchor);
			insert(target, p15, anchor);
			insert(target, t26, anchor);
			insert(target, p16, anchor);
			insert(target, t27, anchor);
			insert(target, p17, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t1);
			if (detaching) detach(p1);
			if (detaching) detach(t3);
			if (detaching) detach(p2);
			if (detaching) detach(t4);
			if (detaching) detach(p3);
			if (detaching) detach(t6);
			if (detaching) detach(p4);
			if (detaching) detach(t7);
			if (detaching) detach(p5);
			if (detaching) detach(t9);
			if (detaching) detach(p6);
			if (detaching) detach(t10);
			if (detaching) detach(p7);
			if (detaching) detach(t12);
			if (detaching) detach(p8);
			if (detaching) detach(t13);
			if (detaching) detach(p9);
			if (detaching) detach(t15);
			if (detaching) detach(p10);
			if (detaching) detach(t17);
			if (detaching) detach(p11);
			if (detaching) detach(t19);
			if (detaching) detach(p12);
			if (detaching) detach(t20);
			if (detaching) detach(p13);
			if (detaching) detach(t22);
			if (detaching) detach(p14);
			if (detaching) detach(t24);
			if (detaching) detach(p15);
			if (detaching) detach(t26);
			if (detaching) detach(p16);
			if (detaching) detach(t27);
			if (detaching) detach(p17);
		}
	};
}

const metadata = {
	"title": "East Fork Pottery",
	"slug": "eastfork-pottery",
	"date": "2018.06.25",
	"site": "https://eastforkpottery.com",
	"description": "Pushing the Shopify platform to its limits to create a smooth and playful experience.",
	"type": "projects, fuzzco"
};

const { title, slug, date, site, description, type } = metadata;

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;
export { metadata };