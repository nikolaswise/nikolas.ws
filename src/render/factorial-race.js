/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import EffeciencyCalculator from "../components/EffeciencyCalculator.svelte";

function create_fragment(ctx) {
	let effeciencycalculator;
	let t0;
	let p0;
	let t4;
	let p1;
	let t6;
	let p2;
	let t14;
	let p3;
	let t24;
	let p4;
	let t30;
	let pre0;

	let raw0_value = `<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">factorial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> x <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span>
<span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">)</span> <span class="token comment">// 7.257415615307994e+306</span>
<span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">171</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span></code>` + "";

	let t31;
	let p5;
	let t39;
	let pre1;

	let raw1_value = `<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">big_factorial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> x <span class="token operator">*</span> <span class="token function">big_factorial</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">big_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">171</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1241018070217667823424840524103103992616605577501693185388951803611996075221691752992751978120487585576464959501670387052809889858690710767331242032218484364310473577889968548278290754541561964852153468318044293239598173696899657235903947616152278558180061176365108428800000000000000000000000000000000000000000n</span></code>` + "";

	let t40;
	let p6;
	let t48;
	let pre2;

	let raw2_value = `<code class="language-js"><span class="token function">big_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 402387260…0n</span>
<span class="token function">big_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// RangeError: Maximum call stack size exceeded</span></code>` + "";

	let t49;
	let p7;
	let t63;
	let p8;
	let t67;
	let pre3;

	let raw3_value = `<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">big_fast_factorial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> r <span class="token operator">*</span> i<span class="token punctuation">;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">big_fast_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 284625…0n in about 70ms</span></code>` + "";

	let t68;
	let p9;
	let t71;
	let pre4;

	let raw4_value = `<code class="language-js"><span class="token function">big_fast_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ~300ms</span>
<span class="token function">big_fast_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ~650ms</span>
<span class="token comment">// …</span>
<span class="token function">big_fast_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">90000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ~7238ms</span>
<span class="token function">big_fast_factorial</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ~9266ms</span></code>` + "";

	let t72;
	let p10;
	let t78;
	let p11;
	let t82;
	let pre5;

	let raw5_value = `<code class="language-undefined">𝑒ln(𝑛!) = 𝑛!
where
ln(𝑛!) = ∑𝑛𝑘=1(ln𝑛)</code>` + "";

	let t83;
	let p12;
	let t85;
	let pre6;

	let raw6_value = `<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">new_arr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">></span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Σ</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">new_arr</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> acc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code>` + "";

	let t86;
	let p13;
	let t88;
	let pre7;

	let raw7_value = `<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token function">Σ</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span></code>` + "";

	let t89;
	let p14;
	let t109;
	let p15;
	let t111;
	let p16;
	let t119;
	let p17;
	let current;
	effeciencycalculator = new EffeciencyCalculator({});

	return {
		c() {
			create_component(effeciencycalculator.$$.fragment);
			t0 = space();
			p0 = element("p");
			p0.innerHTML = `For the past while now, I’ve been tinkering on <a href="https://www.dicegraph.com/" rel="nofollow">a side project</a> that builds and graphs arbitrary probability distributions created by dice rolling outcomes. It’s extremely niche and dorky, but it’s a been a really fun way to explore both product design development and new concepts in math and programming that have otherwise never presented themselves during my career.`;
			t4 = space();
			p1 = element("p");
			p1.textContent = "This is an article about the second bit.";
			t6 = space();
			p2 = element("p");
			p2.innerHTML = `One of the interesting things that I discovered early on was that when adding the ability to <em>multiply and reduce</em> dice rather than just <em>multiply or reduce</em> dice (ie; roll 1d6, roll the resulting number of dice, on a 4 or higher roll again, sum the total results. Complicated!) the distributions are <a href="https://en.wikipedia.org/wiki/Normal_distribution" rel="nofollow">not normal</a>, which means in order to actually graph the distribution we need to calculate every possible outcome. Not a big deal, since computers are good at this sort of stuff!`;
			t14 = space();
			p3 = element("p");
			p3.innerHTML = `However, I quickly discovered an upper bound: the calculation requires working with <a href="https://en.wikipedia.org/wiki/Factorial" rel="nofollow">factorials</a>. When the factorials get big, JavaScript gives up and returns <code>Infinity</code>. This is because there is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" rel="nofollow">a maximum limit</a> to the size of a double-precision floating-point number that JS uses for the <code>Number</code> type. Wow, this got both mathy and programmery really quickly.`;
			t24 = space();
			p4 = element("p");
			p4.innerHTML = `This gave us an upper bound of <code>170!</code>, since the rest of the distribution calculations don’t like it when you pass them <code>Infinity</code>.`;
			t30 = space();
			pre0 = element("pre");
			t31 = space();
			p5 = element("p");
			p5.innerHTML = `Lucky for us, JavaScript has implemented a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" rel="nofollow">Big Integer</a> type for integers that are … well … big! I was able to refactor my <code>factorial</code> function to use <code>BigInt</code>s.`;
			t39 = space();
			pre1 = element("pre");
			t40 = space();
			p6 = element("p");
			p6.innerHTML = `So what’s our new upper bound? We can handle <code>170!</code> easily, how high can we go? <code>1,000!</code>? <code>10,000!</code>?`;
			t48 = space();
			pre2 = element("pre");
			t49 = space();
			p7 = element("p");
			p7.innerHTML = `Turns out <code>1,000!</code> is a walk in the park. <code>10,000!</code> gets a little more interesting! The error that returns on the function is about <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion" rel="nofollow">too much recursion</a>. We’re calling <code>big_factorial</code>  <em>from</em>  <code>big_factorial</code> ten thousand times and the browser thinks this means something is wrong, so it bails out on the process.`;
			t63 = space();
			p8 = element("p");
			p8.innerHTML = `So, what if we refactor our recursive <code>big_factorial</code> to use a loop?`;
			t67 = space();
			pre3 = element("pre");
			t68 = space();
			p9 = element("p");
			p9.innerHTML = `<code>10,000!</code> is fast! We can get reliably get the result of that in less than 100ms. And since our loop will run as long as it needs to, our upper bound should now be based on compute and return time, rather than type errors or browser guardrails. Lets see what we can do now:`;
			t71 = space();
			pre4 = element("pre");
			t72 = space();
			p10 = element("p");
			p10.innerHTML = `Things … start to get slow above 30 or 40 thousand factorial. Every additional ten thousand to our initial number adds more and more time to the compute function. Im sure theres some fancy <code>O(n)</code> complexity notation to express this, but I don’t really want to figure that out. It’s too slow to use an in a UI above say, <code>50,000!</code>.`;
			t78 = space();
			p11 = element("p");
			p11.innerHTML = `Turns out tho, even mathematicians don’t really calculate factorials this big. They use <a href="https://en.wikipedia.org/wiki/Stirling%27s_approximation" rel="nofollow">Stirlings’ Approximation</a> instead, since it’s faster and “good enough”. It looks sort of like this:`;
			t82 = space();
			pre5 = element("pre");
			t83 = space();
			p12 = element("p");
			p12.textContent = "It would be pretty cool to do this in JavaScript! And personally, I love “good enough”. I’ve already got a handy function for running Big Sigma calculations:";
			t85 = space();
			pre6 = element("pre");
			t86 = space();
			p13 = element("p");
			p13.textContent = "So lets try this out:";
			t88 = space();
			pre7 = element("pre");
			t89 = space();
			p14 = element("p");
			p14.innerHTML = `Oh no! The end result of our <code>1,000,000!</code> function <em>is still Infinity</em>. Thats because one million factorial is … very big. It could still fit into a <code>BigInt</code>, but then we have another problem: we cant run <code>Math</code> functions on the <code>BigInt</code> type. And we can’t rewrite the functions to use <code>BigInt</code>s because the type is, by definition, <em>only for integers</em>. and <code>𝑒</code> is definitely not an integer. Even a math library like <a href="https://mathjs.org/" rel="nofollow">math.js</a> has the same issues around typing, despite trying to account for it.`;
			t109 = space();
			p15 = element("p");
			p15.textContent = "Naturally, this leads to a simple proposal: FaaStorials! Fast Factorials as a Service! Since factorials are immutable, it should be possible to store the first 1,000,000 or so in a database, and provide an API for querying and returning them. Even a slow network request would be faster than computing the factorial locally. It should be possible to crunch (slowly) all the factorials, and write them to a database for retrieval on demand. I wrote this function and got about 7,000 rows written before I realized it would probably be expensive.";
			t111 = space();
			p16 = element("p");
			p16.innerHTML = `According to my rough estimating, <code>1,000,000!</code> would send a response that weights about <code>700kb</code>, and the whole database would be in the neighborhood of <code>350gb</code>. This would cost me about \$80 a month to store, maybe \$100 a month to pay for the requests as well. I pulled the plug on the script.`;
			t119 = space();
			p17 = element("p");
			p17.textContent = "As with many problems, the upper bound ends up being defined by time and money, the end!";
			attr(pre0, "class", "language-js");
			attr(pre1, "class", "language-js");
			attr(pre2, "class", "language-js");
			attr(pre3, "class", "language-js");
			attr(pre4, "class", "language-js");
			attr(pre5, "class", "language-undefined");
			attr(pre6, "class", "language-js");
			attr(pre7, "class", "language-js");
		},
		m(target, anchor) {
			mount_component(effeciencycalculator, target, anchor);
			insert(target, t0, anchor);
			insert(target, p0, anchor);
			insert(target, t4, anchor);
			insert(target, p1, anchor);
			insert(target, t6, anchor);
			insert(target, p2, anchor);
			insert(target, t14, anchor);
			insert(target, p3, anchor);
			insert(target, t24, anchor);
			insert(target, p4, anchor);
			insert(target, t30, anchor);
			insert(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert(target, t31, anchor);
			insert(target, p5, anchor);
			insert(target, t39, anchor);
			insert(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			insert(target, t40, anchor);
			insert(target, p6, anchor);
			insert(target, t48, anchor);
			insert(target, pre2, anchor);
			pre2.innerHTML = raw2_value;
			insert(target, t49, anchor);
			insert(target, p7, anchor);
			insert(target, t63, anchor);
			insert(target, p8, anchor);
			insert(target, t67, anchor);
			insert(target, pre3, anchor);
			pre3.innerHTML = raw3_value;
			insert(target, t68, anchor);
			insert(target, p9, anchor);
			insert(target, t71, anchor);
			insert(target, pre4, anchor);
			pre4.innerHTML = raw4_value;
			insert(target, t72, anchor);
			insert(target, p10, anchor);
			insert(target, t78, anchor);
			insert(target, p11, anchor);
			insert(target, t82, anchor);
			insert(target, pre5, anchor);
			pre5.innerHTML = raw5_value;
			insert(target, t83, anchor);
			insert(target, p12, anchor);
			insert(target, t85, anchor);
			insert(target, pre6, anchor);
			pre6.innerHTML = raw6_value;
			insert(target, t86, anchor);
			insert(target, p13, anchor);
			insert(target, t88, anchor);
			insert(target, pre7, anchor);
			pre7.innerHTML = raw7_value;
			insert(target, t89, anchor);
			insert(target, p14, anchor);
			insert(target, t109, anchor);
			insert(target, p15, anchor);
			insert(target, t111, anchor);
			insert(target, p16, anchor);
			insert(target, t119, anchor);
			insert(target, p17, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(effeciencycalculator.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(effeciencycalculator.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(effeciencycalculator, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(p0);
			if (detaching) detach(t4);
			if (detaching) detach(p1);
			if (detaching) detach(t6);
			if (detaching) detach(p2);
			if (detaching) detach(t14);
			if (detaching) detach(p3);
			if (detaching) detach(t24);
			if (detaching) detach(p4);
			if (detaching) detach(t30);
			if (detaching) detach(pre0);
			if (detaching) detach(t31);
			if (detaching) detach(p5);
			if (detaching) detach(t39);
			if (detaching) detach(pre1);
			if (detaching) detach(t40);
			if (detaching) detach(p6);
			if (detaching) detach(t48);
			if (detaching) detach(pre2);
			if (detaching) detach(t49);
			if (detaching) detach(p7);
			if (detaching) detach(t63);
			if (detaching) detach(p8);
			if (detaching) detach(t67);
			if (detaching) detach(pre3);
			if (detaching) detach(t68);
			if (detaching) detach(p9);
			if (detaching) detach(t71);
			if (detaching) detach(pre4);
			if (detaching) detach(t72);
			if (detaching) detach(p10);
			if (detaching) detach(t78);
			if (detaching) detach(p11);
			if (detaching) detach(t82);
			if (detaching) detach(pre5);
			if (detaching) detach(t83);
			if (detaching) detach(p12);
			if (detaching) detach(t85);
			if (detaching) detach(pre6);
			if (detaching) detach(t86);
			if (detaching) detach(p13);
			if (detaching) detach(t88);
			if (detaching) detach(pre7);
			if (detaching) detach(t89);
			if (detaching) detach(p14);
			if (detaching) detach(t109);
			if (detaching) detach(p15);
			if (detaching) detach(t111);
			if (detaching) detach(p16);
			if (detaching) detach(t119);
			if (detaching) detach(p17);
		}
	};
}

const metadata = {
	"title": "Factorial! Race!",
	"description": "Finding an upper limit on factorials in JavaScript",
	"date": "2021.06.07",
	"slug": "factorial-race",
	"type": "text, texts"
};

const { title, description, date, slug, type } = metadata;

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;
export { metadata };