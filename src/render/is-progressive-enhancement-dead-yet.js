/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_fragment(ctx) {
	let p0;
	let t1;
	let p1;
	let t3;
	let p2;
	let t5;
	let ul;
	let t15;
	let p3;
	let t19;
	let blockquote0;
	let t21;
	let p5;
	let t25;
	let blockquote1;
	let t27;
	let p7;
	let t29;
	let pre0;

	let raw0_value = `<code class="language-undefined">.grid &#123;
	display: grid;
	grid-template-columns: repeat(4, 1fr);
&#125;

@supports (grid-template-rows: masonry) &#123;
	.grid &#123;
		.grid-template-rows: masonry;
	&#125;
&#125;</code>` + "";

	let t30;
	let p8;
	let t38;
	let p9;
	let t41;
	let pre1;

	let raw1_value = `<code class="language-undefined">// use web component
&lt;watched-box
	widthBreaks=&quot;320px, 60ch&quot;
	heightBreaks=&quot;100vh, 2014px&quot; 
/&gt;
	&lt;!-- children --&gt;
&lt;/watched-box&gt;

// progressive enhancement logic 
if (&#39;ResizeObserver&#39; in window &amp;&amp; &#39;customElements&#39; in window) &#123;
	customElemeents.define(&#39;watched-box&#39;, WatchedBox);
&#125;	

// load custom element as module
&lt;script type=&quot;module&quot; src=&quot;watched-box.js&quot;&gt;&lt;/script</code>` + "";

	let t42;
	let p10;
	let t46;
	let p11;
	let t48;
	let pre2;

	let raw2_value = `<code class="language-undefined">// ignored by old browsers, used by modern browsers
&lt;script type=&quot;module&quot; serc=&quot;new.js&quot;&gt;&lt;/script&gt;


// ignored by modern browsers, used by old browsers
&lt;script nomodule src=&quot;old.js&quot;&gt;&lt;/script&gt;</code>` + "";

	let t49;
	let p12;
	let t51;
	let p13;
	let t53;
	let p14;
	let t55;
	let blockquote2;

	return {
		c() {
			p0 = element("p");
			p0.textContent = "Pickering wants to talk about Progressive Enhancement, but apparently a lot of people are over it and want to be done with it. Pickering thinks that putting progressive enhancement to bed – and worrying about it no more would be a “grave” mistake.";
			t1 = space();
			p1 = element("p");
			p1.textContent = "Pickering addresses some common misconceptions.";
			t3 = space();
			p2 = element("p");
			p2.textContent = "Progressive Enhancement is Not:";
			t5 = space();
			ul = element("ul");

			ul.innerHTML = `<li>Something you install using a package manager.</li> 
<li>Progressive enhancement is not a <code>&lt;noscript&gt;</code> tag with the text “Please turn on Javascript”.</li> 
<li>Progressive enhancement is not rendering HTML on the server, then having the browser re-render that HTML via hydration (<em>React</em>)</li>`;

			t15 = space();
			p3 = element("p");
			p3.innerHTML = `Pickering uses an metaphor of the skateboard to explain what progressive enhancement <em>is</em>.`;
			t19 = space();
			blockquote0 = element("blockquote");
			blockquote0.innerHTML = `<p>Imagine two skateboards. One is the old fashioned kind, it’s just a board with wheels. The other has a screw hole near the front, allowing you to attach some handlebars and make the skateboard a scooter. Just because the handlebars don’t attach to the older skateboard doesn’t mean it’s broken. It still works as a skateboard.</p>`;
			t21 = space();
			p5 = element("p");
			p5.innerHTML = `In Pickerings example, the handlebars are a feature that the browser may or may not support. Importantly, if there is no support for the feature, things <em>still work fine.</em> Great emphasis is placed on this point.`;
			t25 = space();
			blockquote1 = element("blockquote");
			blockquote1.innerHTML = `<p>The basic layout is not a broken layout.</p>`;
			t27 = space();
			p7 = element("p");
			p7.textContent = "Here’s a provide example of a progressively enhanced masonry layout:";
			t29 = space();
			pre0 = element("pre");
			t30 = space();
			p8 = element("p");
			p8.innerHTML = `If a browser supports <code>@supports</code> and <code>grid-template-rows:masonry</code>, the layout engine applied the layout. The key here is that out layout tools are handling out layout, and Javascript is not relied on <em>at all</em> for functions that Javascript is not intended for.`;
			t38 = space();
			p9 = element("p");
			p9.innerHTML = `Another example, using <a href="https://github.com/Heydon/watched-box" rel="nofollow"><watched-box></watched-box></a> is provided:`;
			t41 = space();
			pre1 = element("pre");
			t42 = space();
			p10 = element("p");
			p10.innerHTML = `The module import self-selects for modern browsers, the custom element code itself checks for browser feature support, and if none of these things exist the children of the <code>&lt;watched-box&gt;</code> tag render normally.`;
			t46 = space();
			p11 = element("p");
			p11.textContent = "Another example of conditionally importing Javascript:";
			t48 = space();
			pre2 = element("pre");
			t49 = space();
			p12 = element("p");
			p12.textContent = "This is all predicated on respecting the separation of concerns for HTML, CSS, and JS, and it’s important that we don’t do thing in JS that could and should be done with CSS.";
			t51 = space();
			p13 = element("p");
			p13.textContent = "Pickering closes with a counter-example of regressive enhancement with a tab pattern. This pattern is better handled in a traditional HTML structure, as adding large amount of Javascript to collapse the pattern into tabs create both an accessibility and user experience nightmare that can be hugely difficult to untangle. Pickering identified the important of letting the browser technologies do their thing.";
			t53 = space();
			p14 = element("p");
			p14.textContent = "The final note is as follows:";
			t55 = space();
			blockquote2 = element("blockquote");
			blockquote2.innerHTML = `<p>Use Javascript to do Javascript things. And not Javascript to do like … not Javascript things.</p>`;
			attr(pre0, "class", "language-undefined");
			attr(pre1, "class", "language-undefined");
			attr(pre2, "class", "language-undefined");
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			insert(target, t1, anchor);
			insert(target, p1, anchor);
			insert(target, t3, anchor);
			insert(target, p2, anchor);
			insert(target, t5, anchor);
			insert(target, ul, anchor);
			insert(target, t15, anchor);
			insert(target, p3, anchor);
			insert(target, t19, anchor);
			insert(target, blockquote0, anchor);
			insert(target, t21, anchor);
			insert(target, p5, anchor);
			insert(target, t25, anchor);
			insert(target, blockquote1, anchor);
			insert(target, t27, anchor);
			insert(target, p7, anchor);
			insert(target, t29, anchor);
			insert(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert(target, t30, anchor);
			insert(target, p8, anchor);
			insert(target, t38, anchor);
			insert(target, p9, anchor);
			insert(target, t41, anchor);
			insert(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			insert(target, t42, anchor);
			insert(target, p10, anchor);
			insert(target, t46, anchor);
			insert(target, p11, anchor);
			insert(target, t48, anchor);
			insert(target, pre2, anchor);
			pre2.innerHTML = raw2_value;
			insert(target, t49, anchor);
			insert(target, p12, anchor);
			insert(target, t51, anchor);
			insert(target, p13, anchor);
			insert(target, t53, anchor);
			insert(target, p14, anchor);
			insert(target, t55, anchor);
			insert(target, blockquote2, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t1);
			if (detaching) detach(p1);
			if (detaching) detach(t3);
			if (detaching) detach(p2);
			if (detaching) detach(t5);
			if (detaching) detach(ul);
			if (detaching) detach(t15);
			if (detaching) detach(p3);
			if (detaching) detach(t19);
			if (detaching) detach(blockquote0);
			if (detaching) detach(t21);
			if (detaching) detach(p5);
			if (detaching) detach(t25);
			if (detaching) detach(blockquote1);
			if (detaching) detach(t27);
			if (detaching) detach(p7);
			if (detaching) detach(t29);
			if (detaching) detach(pre0);
			if (detaching) detach(t30);
			if (detaching) detach(p8);
			if (detaching) detach(t38);
			if (detaching) detach(p9);
			if (detaching) detach(t41);
			if (detaching) detach(pre1);
			if (detaching) detach(t42);
			if (detaching) detach(p10);
			if (detaching) detach(t46);
			if (detaching) detach(p11);
			if (detaching) detach(t48);
			if (detaching) detach(pre2);
			if (detaching) detach(t49);
			if (detaching) detach(p12);
			if (detaching) detach(t51);
			if (detaching) detach(p13);
			if (detaching) detach(t53);
			if (detaching) detach(p14);
			if (detaching) detach(t55);
			if (detaching) detach(blockquote2);
		}
	};
}

const metadata = {
	"title": "Is Progressive Enhancement Dead Yet?",
	"slug": "is-progressive-enhancement-dead-yet",
	"author": "Heydon Pickering",
	"year": 2021,
	"source": "https://briefs.video/videos/is-progressive-enhancement-dead-yet/",
	"tags": "design, development, javascript, js",
	"thesis": "Progressively enhancing web applications is not only an essential practice for accessibility, but it provides a framework to respect separation of concerns in technology _and_ reduce boilerplate, polyfills, and otherwise kludgy code.",
	"type": "annotation, bibliography"
};

const { title, slug, author, year, source, tags, thesis, type } = metadata;

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;
export { metadata };